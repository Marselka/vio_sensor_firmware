
imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000875c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f8  080089f8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080089f8  080089f8  000189f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a00  08008a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a00  08008a00  00018a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c0  20000070  08008a78  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08008a78  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010389  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020dd  00000000  00000000  00030429  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  00032508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f98  00000000  00000000  00033588  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021650  00000000  00000000  00034520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd4b  00000000  00000000  00055b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1de5  00000000  00000000  000618bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001336a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000495c  00000000  00000000  0013371c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088d4 	.word	0x080088d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080088d4 	.word	0x080088d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <read_TIM5>:
    __io_putchar(*ptr++);
  }
  return len;
}

uint32_t read_TIM5() {
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return TIM5->CNT;
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <read_TIM5+0x14>)
 8000576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40000c00 	.word	0x40000c00

08000588 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	80fb      	strh	r3, [r7, #6]
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	if(GPIO_Pin == GPIO_PIN_9)
 8000592:	88fb      	ldrh	r3, [r7, #6]
 8000594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000598:	d114      	bne.n	80005c4 <HAL_GPIO_EXTI_Callback+0x3c>
  {
  	flag_read_imu_values = 1;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_GPIO_EXTI_Callback+0x44>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
  	soft_rtc_imu_subs = read_TIM5();
 80005a0:	f7ff ffe6 	bl	8000570 <read_TIM5>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x48>)
 80005a8:	601a      	str	r2, [r3, #0]
		soft_rtc_imu_s = soft_rtc_s;
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80005ac:	781a      	ldrb	r2, [r3, #0]
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_GPIO_EXTI_Callback+0x50>)
 80005b0:	701a      	strb	r2, [r3, #0]
		soft_rtc_imu_m = soft_rtc_m;
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <HAL_GPIO_EXTI_Callback+0x54>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b0a      	ldr	r3, [pc, #40]	; (80005e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80005b8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80005c0:	f002 fc39 	bl	8002e36 <HAL_GPIO_TogglePin>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000008e 	.word	0x2000008e
 80005d0:	20000098 	.word	0x20000098
 80005d4:	20000094 	.word	0x20000094
 80005d8:	20000096 	.word	0x20000096
 80005dc:	20000093 	.word	0x20000093
 80005e0:	20000095 	.word	0x20000095
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <setup_mpu>:

void setup_mpu(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af04      	add	r7, sp, #16
	uint8_t dat[] = {5, 16, 1, 1, 8, 8};
 80005ee:	4a1b      	ldr	r2, [pc, #108]	; (800065c <setup_mpu+0x74>)
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005f8:	6018      	str	r0, [r3, #0]
 80005fa:	3304      	adds	r3, #4
 80005fc:	8019      	strh	r1, [r3, #0]
	uint8_t adds[] = {107, 55, 26, 56, 27, 28};
 80005fe:	4a18      	ldr	r2, [pc, #96]	; (8000660 <setup_mpu+0x78>)
 8000600:	463b      	mov	r3, r7
 8000602:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000606:	6018      	str	r0, [r3, #0]
 8000608:	3304      	adds	r3, #4
 800060a:	8019      	strh	r1, [r3, #0]
	uint8_t n_of_bytes = sizeof(dat) / sizeof(dat[0]);
 800060c:	2306      	movs	r3, #6
 800060e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e019      	b.n	800064a <setup_mpu+0x62>
		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[idx], 1, &dat[idx], 1, 1000);
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	f107 0210 	add.w	r2, r7, #16
 800061c:	4413      	add	r3, r2
 800061e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000622:	b299      	uxth	r1, r3
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	4413      	add	r3, r2
 800062c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000630:	9202      	str	r2, [sp, #8]
 8000632:	2201      	movs	r2, #1
 8000634:	9201      	str	r2, [sp, #4]
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2301      	movs	r3, #1
 800063a:	460a      	mov	r2, r1
 800063c:	21d0      	movs	r1, #208	; 0xd0
 800063e:	4809      	ldr	r0, [pc, #36]	; (8000664 <setup_mpu+0x7c>)
 8000640:	f002 fd64 	bl	800310c <HAL_I2C_Mem_Write>
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	3301      	adds	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	7bfa      	ldrb	r2, [r7, #15]
 800064c:	7bbb      	ldrb	r3, [r7, #14]
 800064e:	429a      	cmp	r2, r3
 8000650:	d3e1      	bcc.n	8000616 <setup_mpu+0x2e>
	}
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	080088ec 	.word	0x080088ec
 8000660:	080088f4 	.word	0x080088f4
 8000664:	20000178 	.word	0x20000178

08000668 <make_message>:


void make_message(void) {
 8000668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066a:	b097      	sub	sp, #92	; 0x5c
 800066c:	af0e      	add	r7, sp, #56	; 0x38
	sprintf(str,
 800066e:	4b54      	ldr	r3, [pc, #336]	; (80007c0 <make_message+0x158>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	469c      	mov	ip, r3
 8000674:	4b53      	ldr	r3, [pc, #332]	; (80007c4 <make_message+0x15c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	469e      	mov	lr, r3
		"%04x"																			//4
		"\n", 																			//1
																								//=78
		(uint8_t)soft_rtc_imu_m,
		(uint8_t)soft_rtc_imu_s,
		(uint16_t)(soft_rtc_imu_subs>>16),
 800067a:	4b53      	ldr	r3, [pc, #332]	; (80007c8 <make_message+0x160>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	0c1b      	lsrs	r3, r3, #16
 8000680:	b29b      	uxth	r3, r3
	sprintf(str,
 8000682:	461c      	mov	r4, r3
		(uint16_t)(soft_rtc_imu_subs),
 8000684:	4b50      	ldr	r3, [pc, #320]	; (80007c8 <make_message+0x160>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	b29b      	uxth	r3, r3
	sprintf(str,
 800068a:	461d      	mov	r5, r3
		//(uint8_t)(sTime_imu.Minutes),
		//(uint8_t)(sTime_imu.Seconds),
		//(uint16_t)(sTime_imu.SubSeconds),

		(uint16_t)(dat_buf[0]<<8 | dat_buf[1]),
 800068c:	4b4f      	ldr	r3, [pc, #316]	; (80007cc <make_message+0x164>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	b21a      	sxth	r2, r3
 8000694:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <make_message+0x164>)
 8000696:	785b      	ldrb	r3, [r3, #1]
 8000698:	b21b      	sxth	r3, r3
 800069a:	4313      	orrs	r3, r2
 800069c:	b21b      	sxth	r3, r3
 800069e:	b29b      	uxth	r3, r3
	sprintf(str,
 80006a0:	461e      	mov	r6, r3
		(uint16_t)(dat_buf[2]<<8 | dat_buf[3]),
 80006a2:	4b4a      	ldr	r3, [pc, #296]	; (80007cc <make_message+0x164>)
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	021b      	lsls	r3, r3, #8
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	4b48      	ldr	r3, [pc, #288]	; (80007cc <make_message+0x164>)
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	b29b      	uxth	r3, r3
	sprintf(str,
 80006b6:	61fb      	str	r3, [r7, #28]
		(uint16_t)(dat_buf[4]<<8 | dat_buf[5]),
 80006b8:	4b44      	ldr	r3, [pc, #272]	; (80007cc <make_message+0x164>)
 80006ba:	791b      	ldrb	r3, [r3, #4]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b21a      	sxth	r2, r3
 80006c0:	4b42      	ldr	r3, [pc, #264]	; (80007cc <make_message+0x164>)
 80006c2:	795b      	ldrb	r3, [r3, #5]
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b21b      	sxth	r3, r3
 80006ca:	b29b      	uxth	r3, r3
	sprintf(str,
 80006cc:	61bb      	str	r3, [r7, #24]
		(uint16_t)(dat_buf[6]<<8 | dat_buf[7]),
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <make_message+0x164>)
 80006d0:	799b      	ldrb	r3, [r3, #6]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <make_message+0x164>)
 80006d8:	79db      	ldrb	r3, [r3, #7]
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4313      	orrs	r3, r2
 80006de:	b21b      	sxth	r3, r3
 80006e0:	b29b      	uxth	r3, r3
	sprintf(str,
 80006e2:	617b      	str	r3, [r7, #20]
		(uint16_t)(dat_buf[8]<<8 | dat_buf[9]),
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <make_message+0x164>)
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	b21a      	sxth	r2, r3
 80006ec:	4b37      	ldr	r3, [pc, #220]	; (80007cc <make_message+0x164>)
 80006ee:	7a5b      	ldrb	r3, [r3, #9]
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	4313      	orrs	r3, r2
 80006f4:	b21b      	sxth	r3, r3
 80006f6:	b29b      	uxth	r3, r3
	sprintf(str,
 80006f8:	613b      	str	r3, [r7, #16]
		(uint16_t)(dat_buf[10]<<8 | dat_buf[11]),
 80006fa:	4b34      	ldr	r3, [pc, #208]	; (80007cc <make_message+0x164>)
 80006fc:	7a9b      	ldrb	r3, [r3, #10]
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b21a      	sxth	r2, r3
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <make_message+0x164>)
 8000704:	7adb      	ldrb	r3, [r3, #11]
 8000706:	b21b      	sxth	r3, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	b21b      	sxth	r3, r3
 800070c:	b29b      	uxth	r3, r3
	sprintf(str,
 800070e:	60fb      	str	r3, [r7, #12]
		(uint16_t)(dat_buf[12]<<8 | dat_buf[13]),
 8000710:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <make_message+0x164>)
 8000712:	7b1b      	ldrb	r3, [r3, #12]
 8000714:	021b      	lsls	r3, r3, #8
 8000716:	b21a      	sxth	r2, r3
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <make_message+0x164>)
 800071a:	7b5b      	ldrb	r3, [r3, #13]
 800071c:	b21b      	sxth	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	b21b      	sxth	r3, r3
 8000722:	b29b      	uxth	r3, r3
	sprintf(str,
 8000724:	60bb      	str	r3, [r7, #8]

		(uint16_t)(dat_[1]<<8 | dat_[0]),
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <make_message+0x168>)
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	021b      	lsls	r3, r3, #8
 800072c:	b21a      	sxth	r2, r3
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <make_message+0x168>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
	sprintf(str,
 800073a:	607b      	str	r3, [r7, #4]
		(uint16_t)(dat_[3]<<8 | dat_[2]),
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <make_message+0x168>)
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	021b      	lsls	r3, r3, #8
 8000742:	b21a      	sxth	r2, r3
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <make_message+0x168>)
 8000746:	789b      	ldrb	r3, [r3, #2]
 8000748:	b21b      	sxth	r3, r3
 800074a:	4313      	orrs	r3, r2
 800074c:	b21b      	sxth	r3, r3
 800074e:	b29b      	uxth	r3, r3
	sprintf(str,
 8000750:	4618      	mov	r0, r3
		(uint16_t)(dat_[5]<<8 | dat_[4]),
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <make_message+0x168>)
 8000754:	795b      	ldrb	r3, [r3, #5]
 8000756:	021b      	lsls	r3, r3, #8
 8000758:	b21a      	sxth	r2, r3
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <make_message+0x168>)
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b21b      	sxth	r3, r3
 8000764:	b29b      	uxth	r3, r3
	sprintf(str,
 8000766:	4619      	mov	r1, r3
		(uint16_t)(dat_[7]<<8 | dat_[6]),
 8000768:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <make_message+0x168>)
 800076a:	79db      	ldrb	r3, [r3, #7]
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	b21a      	sxth	r2, r3
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <make_message+0x168>)
 8000772:	799b      	ldrb	r3, [r3, #6]
 8000774:	b21b      	sxth	r3, r3
 8000776:	4313      	orrs	r3, r2
 8000778:	b21b      	sxth	r3, r3
 800077a:	b29b      	uxth	r3, r3
	sprintf(str,
 800077c:	461a      	mov	r2, r3
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <make_message+0x16c>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	930d      	str	r3, [sp, #52]	; 0x34
 8000784:	920c      	str	r2, [sp, #48]	; 0x30
 8000786:	910b      	str	r1, [sp, #44]	; 0x2c
 8000788:	900a      	str	r0, [sp, #40]	; 0x28
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	9209      	str	r2, [sp, #36]	; 0x24
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	9208      	str	r2, [sp, #32]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	9207      	str	r2, [sp, #28]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	9206      	str	r2, [sp, #24]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	9205      	str	r2, [sp, #20]
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	9204      	str	r2, [sp, #16]
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	9303      	str	r3, [sp, #12]
 80007a6:	9602      	str	r6, [sp, #8]
 80007a8:	9501      	str	r5, [sp, #4]
 80007aa:	9400      	str	r4, [sp, #0]
 80007ac:	4673      	mov	r3, lr
 80007ae:	4662      	mov	r2, ip
 80007b0:	4909      	ldr	r1, [pc, #36]	; (80007d8 <make_message+0x170>)
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <make_message+0x174>)
 80007b4:	f007 fc88 	bl	80080c8 <siprintf>
				//(uint8_t)(sTime_lidar.Minutes),
				//(uint8_t)(sTime_lidar.Seconds),
				//(uint16_t)(sTime_lidar.SubSeconds)
			);
	}*/
}
 80007b8:	bf00      	nop
 80007ba:	3724      	adds	r7, #36	; 0x24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	20000095 	.word	0x20000095
 80007c4:	20000096 	.word	0x20000096
 80007c8:	20000098 	.word	0x20000098
 80007cc:	200004e4 	.word	0x200004e4
 80007d0:	20000304 	.word	0x20000304
 80007d4:	2000008c 	.word	0x2000008c
 80007d8:	080088fc 	.word	0x080088fc
 80007dc:	200004f4 	.word	0x200004f4

080007e0 <delay>:
	//uint8_t c = checksum("GPGSA,A,3,10,07,05,02,29,04,08,13,,,,,1.72,1.03,1.38",0,52);
	sprintf(&lidar_str[end+1], "%02X", c);

}

void delay(uint16_t n) {
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i=0; i<n; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	81fb      	strh	r3, [r7, #14]
 80007ee:	e002      	b.n	80007f6 <delay+0x16>
 80007f0:	89fb      	ldrh	r3, [r7, #14]
 80007f2:	3301      	adds	r3, #1
 80007f4:	81fb      	strh	r3, [r7, #14]
 80007f6:	89fa      	ldrh	r2, [r7, #14]
 80007f8:	88fb      	ldrh	r3, [r7, #6]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d3f8      	bcc.n	80007f0 <delay+0x10>
		;
	}
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <cp>:

void cp() {
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_BYTES; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e008      	b.n	800082a <cp+0x1e>
		dat_buf[i] = dat[i];
 8000818:	79fa      	ldrb	r2, [r7, #7]
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4907      	ldr	r1, [pc, #28]	; (800083c <cp+0x30>)
 800081e:	5c89      	ldrb	r1, [r1, r2]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <cp+0x34>)
 8000822:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<N_BYTES; i++) {
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3301      	adds	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	d9f3      	bls.n	8000818 <cp+0xc>
	}
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	200000c8 	.word	0x200000c8
 8000840:	200004e4 	.word	0x200004e4

08000844 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b37      	ldr	r3, [pc, #220]	; (8000930 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	429a      	cmp	r2, r3
 8000856:	d127      	bne.n	80008a8 <HAL_TIM_OC_DelayElapsedCallback+0x64>
		soft_rtc_s ++;
 8000858:	4b36      	ldr	r3, [pc, #216]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b34      	ldr	r3, [pc, #208]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000862:	701a      	strb	r2, [r3, #0]
		if (soft_rtc_s == 60) {
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b3c      	cmp	r3, #60	; 0x3c
 800086a:	d15c      	bne.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
			soft_rtc_s = 0;
 800086c:	4b31      	ldr	r3, [pc, #196]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
			soft_rtc_m ++;
 8000872:	4b31      	ldr	r3, [pc, #196]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	b2da      	uxtb	r2, r3
 800087a:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 800087c:	701a      	strb	r2, [r3, #0]
			if (soft_rtc_m == 60) {
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b3c      	cmp	r3, #60	; 0x3c
 8000884:	d14f      	bne.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
				soft_rtc_m = 0;
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
				soft_rtc_h ++;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	4b29      	ldr	r3, [pc, #164]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 8000896:	701a      	strb	r2, [r3, #0]
				if (soft_rtc_h == 24) {
 8000898:	4b28      	ldr	r3, [pc, #160]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b18      	cmp	r3, #24
 800089e:	d142      	bne.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
					soft_rtc_h = 0;
 80008a0:	4b26      	ldr	r3, [pc, #152]	; (800093c <HAL_TIM_OC_DelayElapsedCallback+0xf8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
			flag_cameras_ts_ready = 1;
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		}
	}
}
 80008a6:	e03e      	b.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
	else if (htim->Instance == htim1.Instance)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <HAL_TIM_OC_DelayElapsedCallback+0xfc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d11b      	bne.n	80008ec <HAL_TIM_OC_DelayElapsedCallback+0xa8>
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)==GPIO_PIN_SET) { // if timer output is HIGH
 80008b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 80008ba:	f002 fa8b 	bl	8002dd4 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d130      	bne.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
			soft_rtc_lidar_subs = read_TIM5();
 80008c4:	f7ff fe54 	bl	8000570 <read_TIM5>
 80008c8:	4602      	mov	r2, r0
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008cc:	601a      	str	r2, [r3, #0]
			soft_rtc_lidar_s = soft_rtc_s;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80008d4:	701a      	strb	r2, [r3, #0]
			soft_rtc_lidar_m = soft_rtc_m;
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 80008dc:	701a      	strb	r2, [r3, #0]
			flag_lidar_ts_ready = 1;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
			flag_transmit_to_lidar = 1;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
}
 80008ea:	e01c      	b.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
	else if (htim->Instance == htim2.Instance)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d116      	bne.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)==GPIO_PIN_RESET) { // if timer output is HIGH // is not needed
 80008f8:	2120      	movs	r1, #32
 80008fa:	4819      	ldr	r0, [pc, #100]	; (8000960 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 80008fc:	f002 fa6a 	bl	8002dd4 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10f      	bne.n	8000926 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
			soft_rtc_cameras_subs = read_TIM5();
 8000906:	f7ff fe33 	bl	8000570 <read_TIM5>
 800090a:	4602      	mov	r2, r0
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 800090e:	601a      	str	r2, [r3, #0]
			soft_rtc_cameras_s = soft_rtc_s;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8000916:	701a      	strb	r2, [r3, #0]
			soft_rtc_cameras_m = soft_rtc_m;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 800091e:	701a      	strb	r2, [r3, #0]
			flag_cameras_ts_ready = 1;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000224 	.word	0x20000224
 8000934:	20000094 	.word	0x20000094
 8000938:	20000093 	.word	0x20000093
 800093c:	20000092 	.word	0x20000092
 8000940:	200003c4 	.word	0x200003c4
 8000944:	40021000 	.word	0x40021000
 8000948:	200000a8 	.word	0x200000a8
 800094c:	200000a5 	.word	0x200000a5
 8000950:	200000a4 	.word	0x200000a4
 8000954:	20000090 	.word	0x20000090
 8000958:	2000008f 	.word	0x2000008f
 800095c:	200004a4 	.word	0x200004a4
 8000960:	40020000 	.word	0x40020000
 8000964:	200000a0 	.word	0x200000a0
 8000968:	2000009d 	.word	0x2000009d
 800096c:	2000009c 	.word	0x2000009c
 8000970:	20000091 	.word	0x20000091

08000974 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <HAL_UART_RxCpltCallback+0x24>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d102      	bne.n	800098c <HAL_UART_RxCpltCallback+0x18>
    	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
    	//flag_alignment_received = 1;
    	flag_data_received_from_pc = 1;
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_UART_RxCpltCallback+0x28>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
    }
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40004c00 	.word	0x40004c00
 800099c:	200001cc 	.word	0x200001cc

080009a0 <receive_from_pc>:

//void receive_alignment(void) {
//	HAL_UART_Receive_DMA(&huart4, &alignment_subs_received, 4);
//}
void receive_from_pc(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart4, input_buf, INPUT_PC_DATA_LENGTH);
 80009a4:	2205      	movs	r2, #5
 80009a6:	4903      	ldr	r1, [pc, #12]	; (80009b4 <receive_from_pc+0x14>)
 80009a8:	4803      	ldr	r0, [pc, #12]	; (80009b8 <receive_from_pc+0x18>)
 80009aa:	f006 fc3d 	bl	8007228 <HAL_UART_Receive_DMA>
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000374 	.word	0x20000374
 80009b8:	20000464 	.word	0x20000464

080009bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c2:	f001 fb0f 	bl	8001fe4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c6:	f000 f919 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f000 fd83 	bl	80014d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80009ce:	f000 fa1d 	bl	8000e0c <MX_TIM1_Init>
  MX_TIM3_Init();
 80009d2:	f000 fb51 	bl	8001078 <MX_TIM3_Init>
  MX_TIM2_Init();
 80009d6:	f000 fabb 	bl	8000f50 <MX_TIM2_Init>
  MX_DMA_Init();
 80009da:	f000 fd3b 	bl	8001454 <MX_DMA_Init>
  MX_I2C1_Init();
 80009de:	f000 f98f 	bl	8000d00 <MX_I2C1_Init>
  MX_RTC_Init();
 80009e2:	f000 f9ed 	bl	8000dc0 <MX_RTC_Init>
  MX_UART4_Init();
 80009e6:	f000 fce1 	bl	80013ac <MX_UART4_Init>
  MX_UART5_Init();
 80009ea:	f000 fd09 	bl	8001400 <MX_UART5_Init>
  MX_TIM8_Init();
 80009ee:	f000 fc41 	bl	8001274 <MX_TIM8_Init>
  MX_TIM5_Init();
 80009f2:	f000 fbbf 	bl	8001174 <MX_TIM5_Init>
  MX_I2C2_Init();
 80009f6:	f000 f9b3 	bl	8000d60 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80009fa:	2017      	movs	r0, #23
 80009fc:	f001 fc8b 	bl	8002316 <HAL_NVIC_DisableIRQ>
  setup_mpu();
 8000a00:	f7ff fdf2 	bl	80005e8 <setup_mpu>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a04:	2017      	movs	r0, #23
 8000a06:	f001 fc78 	bl	80022fa <HAL_NVIC_EnableIRQ>

	HAL_TIM_OC_Start_IT(&htim5, TIM_CHANNEL_1);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	486f      	ldr	r0, [pc, #444]	; (8000bcc <main+0x210>)
 8000a0e:	f005 fb97 	bl	8006140 <HAL_TIM_OC_Start_IT>
	delay(10);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f7ff fee4 	bl	80007e0 <delay>
	HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);
 8000a18:	2100      	movs	r1, #0
 8000a1a:	486d      	ldr	r0, [pc, #436]	; (8000bd0 <main+0x214>)
 8000a1c:	f005 fb52 	bl	80060c4 <HAL_TIM_OC_Start>
	delay(10);
 8000a20:	200a      	movs	r0, #10
 8000a22:	f7ff fedd 	bl	80007e0 <delay>
|::                      ::|
|::                      ::|
|::             [D5 USB] ::|
--------------------------*/
	//receive_alignment();
	receive_from_pc();
 8000a26:	f7ff ffbb 	bl	80009a0 <receive_from_pc>
	dat_[0] = 0b10000010;
 8000a2a:	4b6a      	ldr	r3, [pc, #424]	; (8000bd4 <main+0x218>)
 8000a2c:	2282      	movs	r2, #130	; 0x82
 8000a2e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x20, 1, dat_, 1, 1000);
 8000a30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a34:	9302      	str	r3, [sp, #8]
 8000a36:	2301      	movs	r3, #1
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <main+0x218>)
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2220      	movs	r2, #32
 8000a42:	2138      	movs	r1, #56	; 0x38
 8000a44:	4864      	ldr	r0, [pc, #400]	; (8000bd8 <main+0x21c>)
 8000a46:	f002 fb61 	bl	800310c <HAL_I2C_Mem_Write>
	dat_[0] = 0b00001100;
 8000a4a:	4b62      	ldr	r3, [pc, #392]	; (8000bd4 <main+0x218>)
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x23, 1, dat_, 1, 1000);
 8000a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	2301      	movs	r3, #1
 8000a58:	9301      	str	r3, [sp, #4]
 8000a5a:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <main+0x218>)
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2301      	movs	r3, #1
 8000a60:	2223      	movs	r2, #35	; 0x23
 8000a62:	2138      	movs	r1, #56	; 0x38
 8000a64:	485c      	ldr	r0, [pc, #368]	; (8000bd8 <main+0x21c>)
 8000a66:	f002 fb51 	bl	800310c <HAL_I2C_Mem_Write>
	dat_[0] = 0;
 8000a6a:	4b5a      	ldr	r3, [pc, #360]	; (8000bd4 <main+0x218>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x22, 1, dat_, 1, 1000);
 8000a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a74:	9302      	str	r3, [sp, #8]
 8000a76:	2301      	movs	r3, #1
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <main+0x218>)
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2222      	movs	r2, #34	; 0x22
 8000a82:	2138      	movs	r1, #56	; 0x38
 8000a84:	4854      	ldr	r0, [pc, #336]	; (8000bd8 <main+0x21c>)
 8000a86:	f002 fb41 	bl	800310c <HAL_I2C_Mem_Write>
  while (1)
  {
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)); // forward timer output signal to led pin
  	if (flag_read_imu_values == 1) {
 8000a8a:	4b54      	ldr	r3, [pc, #336]	; (8000bdc <main+0x220>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	f040 8095 	bne.w	8000bbe <main+0x202>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000a94:	2017      	movs	r0, #23
 8000a96:	f001 fc3e 	bl	8002316 <HAL_NVIC_DisableIRQ>
			flag_read_imu_values = 0;
 8000a9a:	4b50      	ldr	r3, [pc, #320]	; (8000bdc <main+0x220>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa6:	484e      	ldr	r0, [pc, #312]	; (8000be0 <main+0x224>)
 8000aa8:	f002 f9ac 	bl	8002e04 <HAL_GPIO_WritePin>
			count++;
 8000aac:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <main+0x228>)
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	4b4b      	ldr	r3, [pc, #300]	; (8000be4 <main+0x228>)
 8000ab6:	801a      	strh	r2, [r3, #0]
			cp();
 8000ab8:	f7ff fea8 	bl	800080c <cp>
			HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat, 14);
 8000abc:	230e      	movs	r3, #14
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	4b49      	ldr	r3, [pc, #292]	; (8000be8 <main+0x22c>)
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	223b      	movs	r2, #59	; 0x3b
 8000ac8:	21d0      	movs	r1, #208	; 0xd0
 8000aca:	4848      	ldr	r0, [pc, #288]	; (8000bec <main+0x230>)
 8000acc:	f002 fc18 	bl	8003300 <HAL_I2C_Mem_Read_DMA>
			//if (count%2){
			HAL_I2C_Mem_Read_DMA(&hi2c2, 0b0011100<<1, 0x28, 1, dat_, 8);
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <main+0x218>)
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2228      	movs	r2, #40	; 0x28
 8000adc:	2138      	movs	r1, #56	; 0x38
 8000ade:	483e      	ldr	r0, [pc, #248]	; (8000bd8 <main+0x21c>)
 8000ae0:	f002 fc0e 	bl	8003300 <HAL_I2C_Mem_Read_DMA>
			if (abs((int8_t)dat[0])>THRES || abs((int8_t)dat[2])>THRES || abs((int8_t)dat[4])>THRES ||
 8000ae4:	4b40      	ldr	r3, [pc, #256]	; (8000be8 <main+0x22c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b25b      	sxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b7e      	cmp	r3, #126	; 0x7e
 8000af2:	dc27      	bgt.n	8000b44 <main+0x188>
 8000af4:	4b3c      	ldr	r3, [pc, #240]	; (8000be8 <main+0x22c>)
 8000af6:	789b      	ldrb	r3, [r3, #2]
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b7e      	cmp	r3, #126	; 0x7e
 8000b02:	dc1f      	bgt.n	8000b44 <main+0x188>
 8000b04:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <main+0x22c>)
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b7e      	cmp	r3, #126	; 0x7e
 8000b12:	dc17      	bgt.n	8000b44 <main+0x188>
					abs((int8_t)dat[8])>THRES || abs((int8_t)dat[10])>THRES || abs((int8_t)dat[12])>THRES) {
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <main+0x22c>)
 8000b16:	7a1b      	ldrb	r3, [r3, #8]
 8000b18:	b25b      	sxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bfb8      	it	lt
 8000b1e:	425b      	neglt	r3, r3
			if (abs((int8_t)dat[0])>THRES || abs((int8_t)dat[2])>THRES || abs((int8_t)dat[4])>THRES ||
 8000b20:	2b7e      	cmp	r3, #126	; 0x7e
 8000b22:	dc0f      	bgt.n	8000b44 <main+0x188>
					abs((int8_t)dat[8])>THRES || abs((int8_t)dat[10])>THRES || abs((int8_t)dat[12])>THRES) {
 8000b24:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <main+0x22c>)
 8000b26:	7a9b      	ldrb	r3, [r3, #10]
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bfb8      	it	lt
 8000b2e:	425b      	neglt	r3, r3
 8000b30:	2b7e      	cmp	r3, #126	; 0x7e
 8000b32:	dc07      	bgt.n	8000b44 <main+0x188>
 8000b34:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <main+0x22c>)
 8000b36:	7b1b      	ldrb	r3, [r3, #12]
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b7e      	cmp	r3, #126	; 0x7e
 8000b42:	dd12      	ble.n	8000b6a <main+0x1ae>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b4a:	4825      	ldr	r0, [pc, #148]	; (8000be0 <main+0x224>)
 8000b4c:	f002 f95a 	bl	8002e04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b56:	4822      	ldr	r0, [pc, #136]	; (8000be0 <main+0x224>)
 8000b58:	f002 f954 	bl	8002e04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b62:	481f      	ldr	r0, [pc, #124]	; (8000be0 <main+0x224>)
 8000b64:	f002 f94e 	bl	8002e04 <HAL_GPIO_WritePin>
 8000b68:	e011      	b.n	8000b8e <main+0x1d2>
			}
			else {
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <main+0x224>)
 8000b72:	f002 f947 	bl	8002e04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <main+0x224>)
 8000b7e:	f002 f941 	bl	8002e04 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <main+0x224>)
 8000b8a:	f002 f93b 	bl	8002e04 <HAL_GPIO_WritePin>
			//}

			//buf_flag_cameras_ts_ready = flag_cameras_ts_ready;
			//buf_flag_lidar_ts_ready = flag_lidar_ts_ready;

			uint8_t mes_length = N_IMU_CHARS;// + buf_flag_cameras_ts_ready * N_CAMERAS_CHARS + buf_flag_lidar_ts_ready * N_LIDAR_CHARS;
 8000b8e:	234e      	movs	r3, #78	; 0x4e
 8000b90:	71fb      	strb	r3, [r7, #7]
			make_message();
 8000b92:	f7ff fd69 	bl	8000668 <make_message>
			HAL_UART_Transmit_DMA(&huart4, str, mes_length);//, 1000);	//HAL_UART_Transmit_DMA(&huart4, str, N_CHARS);
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4914      	ldr	r1, [pc, #80]	; (8000bf0 <main+0x234>)
 8000b9e:	4815      	ldr	r0, [pc, #84]	; (8000bf4 <main+0x238>)
 8000ba0:	f006 fad6 	bl	8007150 <HAL_UART_Transmit_DMA>

			//delay(7000);
			//if(count & 1024) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);}
			if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) {__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);}
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <main+0x23c>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d003      	beq.n	8000bb8 <main+0x1fc>
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <main+0x23c>)
 8000bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb6:	615a      	str	r2, [r3, #20]
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bb8:	2017      	movs	r0, #23
 8000bba:	f001 fb9e 	bl	80022fa <HAL_NVIC_EnableIRQ>
  	if (flag_transmit_to_lidar==1) {
  		flag_transmit_to_lidar = 0;
  		make_lidar_string();
  		HAL_UART_Transmit_DMA(&huart5, lidar_str, N_CHARS_TO_LIDAR);//, 1000);	//HAL_UART_Transmit_DMA(&huart5, str, N_CHARS);*/
  	}
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <main+0x224>)
 8000bc6:	f002 f91d 	bl	8002e04 <HAL_GPIO_WritePin>
  	if (flag_read_imu_values == 1) {
 8000bca:	e75e      	b.n	8000a8a <main+0xce>
 8000bcc:	20000224 	.word	0x20000224
 8000bd0:	20000264 	.word	0x20000264
 8000bd4:	20000304 	.word	0x20000304
 8000bd8:	200001d0 	.word	0x200001d0
 8000bdc:	2000008e 	.word	0x2000008e
 8000be0:	40020c00 	.word	0x40020c00
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	200000c8 	.word	0x200000c8
 8000bec:	20000178 	.word	0x20000178
 8000bf0:	200004f4 	.word	0x200004f4
 8000bf4:	20000464 	.word	0x20000464
 8000bf8:	40013c00 	.word	0x40013c00

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b098      	sub	sp, #96	; 0x60
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c06:	2230      	movs	r2, #48	; 0x30
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f007 fa54 	bl	80080b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b30      	ldr	r3, [pc, #192]	; (8000cf4 <SystemClock_Config+0xf8>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a2f      	ldr	r2, [pc, #188]	; (8000cf4 <SystemClock_Config+0xf8>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <SystemClock_Config+0xf8>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	; (8000cf8 <SystemClock_Config+0xfc>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a29      	ldr	r2, [pc, #164]	; (8000cf8 <SystemClock_Config+0xfc>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b27      	ldr	r3, [pc, #156]	; (8000cf8 <SystemClock_Config+0xfc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c66:	2305      	movs	r3, #5
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000c70:	2300      	movs	r3, #0
 8000c72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c74:	2302      	movs	r3, #2
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c82:	2360      	movs	r3, #96	; 0x60
 8000c84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c92:	4618      	mov	r0, r3
 8000c94:	f004 fb8c 	bl	80053b0 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c9e:	f000 fcaf 	bl	8001600 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f004 fde6 	bl	8005890 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000cca:	f000 fc99 	bl	8001600 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <SystemClock_Config+0x100>)
 8000cd4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f004 ffca 	bl	8005c74 <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000ce6:	f000 fc8b 	bl	8001600 <Error_Handler>
  }
}
 8000cea:	bf00      	nop
 8000cec:	3760      	adds	r7, #96	; 0x60
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007000 	.word	0x40007000
 8000cfc:	00190300 	.word	0x00190300

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <MX_I2C1_Init+0x58>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d0c:	4a13      	ldr	r2, [pc, #76]	; (8000d5c <MX_I2C1_Init+0x5c>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d16:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d40:	f002 f8ac 	bl	8002e9c <HAL_I2C_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000d4a:	f000 fc59 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000178 	.word	0x20000178
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	00061a80 	.word	0x00061a80

08000d60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <MX_I2C2_Init+0x58>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <MX_I2C2_Init+0x5c>)
 8000d6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_I2C2_Init+0x54>)
 8000da0:	f002 f87c 	bl	8002e9c <HAL_I2C_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000daa:	f000 fc29 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200001d0 	.word	0x200001d0
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	00061a80 	.word	0x00061a80

08000dc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_RTC_Init+0x44>)
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <MX_RTC_Init+0x48>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_RTC_Init+0x44>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32-1;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_RTC_Init+0x44>)
 8000dd2:	221f      	movs	r2, #31
 8000dd4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_RTC_Init+0x44>)
 8000dd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ddc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_RTC_Init+0x44>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_RTC_Init+0x44>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_RTC_Init+0x44>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_RTC_Init+0x44>)
 8000df2:	f005 f821 	bl	8005e38 <HAL_RTC_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000dfc:	f000 fc00 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000354 	.word	0x20000354
 8000e08:	40002800 	.word	0x40002800

08000e0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b096      	sub	sp, #88	; 0x58
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2220      	movs	r2, #32
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 f937 	bl	80080b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e4c:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <MX_TIM1_Init+0x140>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7680-1;
 8000e50:	4b3d      	ldr	r3, [pc, #244]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e52:	f641 52ff 	movw	r2, #7679	; 0x1dff
 8000e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 8000e5e:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e60:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e66:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6c:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e78:	4833      	ldr	r0, [pc, #204]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e7a:	f005 f8c2 	bl	8006002 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e84:	f000 fbbc 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e92:	4619      	mov	r1, r3
 8000e94:	482c      	ldr	r0, [pc, #176]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000e96:	f005 fc3b 	bl	8006710 <HAL_TIM_ConfigClockSource>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ea0:	f000 fbae 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000ea4:	4828      	ldr	r0, [pc, #160]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000ea6:	f005 f8d7 	bl	8006058 <HAL_TIM_OC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000eb0:	f000 fba6 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ebc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4821      	ldr	r0, [pc, #132]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000ec4:	f006 f814 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000ece:	f000 fb97 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000ed2:	2330      	movs	r3, #48	; 0x30
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4814      	ldr	r0, [pc, #80]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000ef8:	f005 fae4 	bl	80064c4 <HAL_TIM_OC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000f02:	f000 fb7d 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000f2a:	f006 f85d 	bl	8006fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000f34:	f000 fb64 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_TIM1_Init+0x13c>)
 8000f3a:	f000 fd27 	bl	800198c <HAL_TIM_MspPostInit>

}
 8000f3e:	bf00      	nop
 8000f40:	3758      	adds	r7, #88	; 0x58
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200003c4 	.word	0x200003c4
 8000f4c:	40010000 	.word	0x40010000

08000f50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	f107 0320 	add.w	r3, r7, #32
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f80:	4b36      	ldr	r3, [pc, #216]	; (800105c <MX_TIM2_Init+0x10c>)
 8000f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8000f88:	4b34      	ldr	r3, [pc, #208]	; (800105c <MX_TIM2_Init+0x10c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000f8e:	4b33      	ldr	r3, [pc, #204]	; (800105c <MX_TIM2_Init+0x10c>)
 8000f90:	2210      	movs	r2, #16
 8000f92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2559200-1;
 8000f94:	4b31      	ldr	r3, [pc, #196]	; (800105c <MX_TIM2_Init+0x10c>)
 8000f96:	4a32      	ldr	r2, [pc, #200]	; (8001060 <MX_TIM2_Init+0x110>)
 8000f98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <MX_TIM2_Init+0x10c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	; (800105c <MX_TIM2_Init+0x10c>)
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fa6:	482d      	ldr	r0, [pc, #180]	; (800105c <MX_TIM2_Init+0x10c>)
 8000fa8:	f005 f82b 	bl	8006002 <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000fb2:	f000 fb25 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4826      	ldr	r0, [pc, #152]	; (800105c <MX_TIM2_Init+0x10c>)
 8000fc4:	f005 fba4 	bl	8006710 <HAL_TIM_ConfigClockSource>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000fce:	f000 fb17 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fd2:	4822      	ldr	r0, [pc, #136]	; (800105c <MX_TIM2_Init+0x10c>)
 8000fd4:	f005 f938 	bl	8006248 <HAL_TIM_PWM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000fde:	f000 fb0f 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fea:	f107 0320 	add.w	r3, r7, #32
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481a      	ldr	r0, [pc, #104]	; (800105c <MX_TIM2_Init+0x10c>)
 8000ff2:	f005 ff7d 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ffc:	f000 fb00 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001000:	2360      	movs	r3, #96	; 0x60
 8001002:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1280000;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_TIM2_Init+0x114>)
 8001006:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001008:	2302      	movs	r3, #2
 800100a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	4811      	ldr	r0, [pc, #68]	; (800105c <MX_TIM2_Init+0x10c>)
 8001018:	f005 fab4 	bl	8006584 <HAL_TIM_PWM_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001022:	f000 faed 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  alignment_subs_low = sConfigOC.Pulse;
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	4a0f      	ldr	r2, [pc, #60]	; (8001068 <MX_TIM2_Init+0x118>)
 800102a:	6013      	str	r3, [r2, #0]
  alignment_subs_high = alignment_subs_low + ALIGN_SUBS_INTERVAL; //must be lower than htim2.Init.Period
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_TIM2_Init+0x118>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f503 131c 	add.w	r3, r3, #2555904	; 0x270000
 8001034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001038:	4a0c      	ldr	r2, [pc, #48]	; (800106c <MX_TIM2_Init+0x11c>)
 800103a:	6013      	str	r3, [r2, #0]
  alignment_subs_signed = (int32_t)(sConfigOC.Pulse);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	461a      	mov	r2, r3
 8001040:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_TIM2_Init+0x120>)
 8001042:	601a      	str	r2, [r3, #0]
  tim2_counter_per = htim2.Init.Period;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <MX_TIM2_Init+0x10c>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <MX_TIM2_Init+0x124>)
 800104a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800104c:	4803      	ldr	r0, [pc, #12]	; (800105c <MX_TIM2_Init+0x10c>)
 800104e:	f000 fc9d 	bl	800198c <HAL_TIM_MspPostInit>

}
 8001052:	bf00      	nop
 8001054:	3738      	adds	r7, #56	; 0x38
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200004a4 	.word	0x200004a4
 8001060:	00270cdf 	.word	0x00270cdf
 8001064:	00138800 	.word	0x00138800
 8001068:	200000b0 	.word	0x200000b0
 800106c:	200000b4 	.word	0x200000b4
 8001070:	200000ac 	.word	0x200000ac
 8001074:	200000b8 	.word	0x200000b8

08001078 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]
 80010a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a8:	4b30      	ldr	r3, [pc, #192]	; (800116c <MX_TIM3_Init+0xf4>)
 80010aa:	4a31      	ldr	r2, [pc, #196]	; (8001170 <MX_TIM3_Init+0xf8>)
 80010ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <MX_TIM3_Init+0xf4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_TIM3_Init+0xf4>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <MX_TIM3_Init+0xf4>)
 80010bc:	2201      	movs	r2, #1
 80010be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_TIM3_Init+0xf4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c6:	4b29      	ldr	r3, [pc, #164]	; (800116c <MX_TIM3_Init+0xf4>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010cc:	4827      	ldr	r0, [pc, #156]	; (800116c <MX_TIM3_Init+0xf4>)
 80010ce:	f004 ff98 	bl	8006002 <HAL_TIM_Base_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010d8:	f000 fa92 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	4619      	mov	r1, r3
 80010e8:	4820      	ldr	r0, [pc, #128]	; (800116c <MX_TIM3_Init+0xf4>)
 80010ea:	f005 fb11 	bl	8006710 <HAL_TIM_ConfigClockSource>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010f4:	f000 fa84 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80010f8:	481c      	ldr	r0, [pc, #112]	; (800116c <MX_TIM3_Init+0xf4>)
 80010fa:	f004 ffad 	bl	8006058 <HAL_TIM_OC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001104:	f000 fa7c 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4619      	mov	r1, r3
 8001116:	4815      	ldr	r0, [pc, #84]	; (800116c <MX_TIM3_Init+0xf4>)
 8001118:	f005 feea 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001122:	f000 fa6d 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001126:	2330      	movs	r3, #48	; 0x30
 8001128:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	2200      	movs	r2, #0
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <MX_TIM3_Init+0xf4>)
 800113e:	f005 f9c1 	bl	80064c4 <HAL_TIM_OC_ConfigChannel>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001148:	f000 fa5a 	bl	8001600 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <MX_TIM3_Init+0xf4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_TIM3_Init+0xf4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0208 	orr.w	r2, r2, #8
 800115a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <MX_TIM3_Init+0xf4>)
 800115e:	f000 fc15 	bl	800198c <HAL_TIM_MspPostInit>

}
 8001162:	bf00      	nop
 8001164:	3738      	adds	r7, #56	; 0x38
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000264 	.word	0x20000264
 8001170:	40000400 	.word	0x40000400

08001174 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	f107 0320 	add.w	r3, r7, #32
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011a6:	4a31      	ldr	r2, [pc, #196]	; (800126c <MX_TIM5_Init+0xf8>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 3-1;
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 25600000 - 1;
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011b8:	4a2d      	ldr	r2, [pc, #180]	; (8001270 <MX_TIM5_Init+0xfc>)
 80011ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011bc:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011c2:	4b29      	ldr	r3, [pc, #164]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80011c8:	4827      	ldr	r0, [pc, #156]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011ca:	f004 ff1a 	bl	8006002 <HAL_TIM_Base_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80011d4:	f000 fa14 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4820      	ldr	r0, [pc, #128]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011e6:	f005 fa93 	bl	8006710 <HAL_TIM_ConfigClockSource>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80011f0:	f000 fa06 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <MX_TIM5_Init+0xf4>)
 80011f6:	f004 ff2f 	bl	8006058 <HAL_TIM_OC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001200:	f000 f9fe 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	4815      	ldr	r0, [pc, #84]	; (8001268 <MX_TIM5_Init+0xf4>)
 8001214:	f005 fe6c 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800121e:	f000 f9ef 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001222:	2330      	movs	r3, #48	; 0x30
 8001224:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	4619      	mov	r1, r3
 8001238:	480b      	ldr	r0, [pc, #44]	; (8001268 <MX_TIM5_Init+0xf4>)
 800123a:	f005 f943 	bl	80064c4 <HAL_TIM_OC_ConfigChannel>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001244:	f000 f9dc 	bl	8001600 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001248:	4b07      	ldr	r3, [pc, #28]	; (8001268 <MX_TIM5_Init+0xf4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	699a      	ldr	r2, [r3, #24]
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_TIM5_Init+0xf4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0208 	orr.w	r2, r2, #8
 8001256:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <MX_TIM5_Init+0xf4>)
 800125a:	f000 fb97 	bl	800198c <HAL_TIM_MspPostInit>

}
 800125e:	bf00      	nop
 8001260:	3738      	adds	r7, #56	; 0x38
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000224 	.word	0x20000224
 800126c:	40000c00 	.word	0x40000c00
 8001270:	01869fff 	.word	0x01869fff

08001274 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b096      	sub	sp, #88	; 0x58
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2220      	movs	r2, #32
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 ff03 	bl	80080b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012b2:	4b3c      	ldr	r3, [pc, #240]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012b4:	4a3c      	ldr	r2, [pc, #240]	; (80013a8 <MX_TIM8_Init+0x134>)
 80012b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80012b8:	4b3a      	ldr	r3, [pc, #232]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012be:	4b39      	ldr	r3, [pc, #228]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b36      	ldr	r3, [pc, #216]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012d0:	4b34      	ldr	r3, [pc, #208]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012dc:	4831      	ldr	r0, [pc, #196]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012de:	f004 fe90 	bl	8006002 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80012e8:	f000 f98a 	bl	8001600 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f6:	4619      	mov	r1, r3
 80012f8:	482a      	ldr	r0, [pc, #168]	; (80013a4 <MX_TIM8_Init+0x130>)
 80012fa:	f005 fa09 	bl	8006710 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001304:	f000 f97c 	bl	8001600 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001308:	4826      	ldr	r0, [pc, #152]	; (80013a4 <MX_TIM8_Init+0x130>)
 800130a:	f004 fea5 	bl	8006058 <HAL_TIM_OC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001314:	f000 f974 	bl	8001600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001318:	2300      	movs	r3, #0
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001320:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001324:	4619      	mov	r1, r3
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <MX_TIM8_Init+0x130>)
 8001328:	f005 fde2 	bl	8006ef0 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001332:	f000 f965 	bl	8001600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	4812      	ldr	r0, [pc, #72]	; (80013a4 <MX_TIM8_Init+0x130>)
 800135c:	f005 f8b2 	bl	80064c4 <HAL_TIM_OC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001366:	f000 f94b 	bl	8001600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4619      	mov	r1, r3
 800138c:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_TIM8_Init+0x130>)
 800138e:	f005 fe2b 	bl	8006fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001398:	f000 f932 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800139c:	bf00      	nop
 800139e:	3758      	adds	r7, #88	; 0x58
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000138 	.word	0x20000138
 80013a8:	40010400 	.word	0x40010400

080013ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_UART4_Init+0x48>)
 80013b2:	4a11      	ldr	r2, [pc, #68]	; (80013f8 <MX_UART4_Init+0x4c>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_UART4_Init+0x48>)
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <MX_UART4_Init+0x50>)
 80013ba:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013bc:	4b0d      	ldr	r3, [pc, #52]	; (80013f4 <MX_UART4_Init+0x48>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_UART4_Init+0x48>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_UART4_Init+0x48>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_UART4_Init+0x48>)
 80013d0:	220c      	movs	r2, #12
 80013d2:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <MX_UART4_Init+0x48>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_UART4_Init+0x48>)
 80013dc:	2200      	movs	r2, #0
 80013de:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_UART4_Init+0x48>)
 80013e2:	f005 fe67 	bl	80070b4 <HAL_UART_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 80013ec:	f000 f908 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000464 	.word	0x20000464
 80013f8:	40004c00 	.word	0x40004c00
 80013fc:	001e8480 	.word	0x001e8480

08001400 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_UART5_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_UART5_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_UART5_Init+0x4c>)
 800140c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001410:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_UART5_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_UART5_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_UART5_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_UART5_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_UART5_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_UART5_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_UART5_Init+0x4c>)
 8001438:	f005 fe3c 	bl	80070b4 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f8dd 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000314 	.word	0x20000314
 8001450:	40005000 	.word	0x40005000

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_DMA_Init+0x7c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <MX_DMA_Init+0x7c>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_DMA_Init+0x7c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	200d      	movs	r0, #13
 800147c:	f000 ff21 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001480:	200d      	movs	r0, #13
 8001482:	f000 ff3a 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200e      	movs	r0, #14
 800148c:	f000 ff19 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001490:	200e      	movs	r0, #14
 8001492:	f000 ff32 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	200f      	movs	r0, #15
 800149c:	f000 ff11 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014a0:	200f      	movs	r0, #15
 80014a2:	f000 ff2a 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2010      	movs	r0, #16
 80014ac:	f000 ff09 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014b0:	2010      	movs	r0, #16
 80014b2:	f000 ff22 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2105      	movs	r1, #5
 80014ba:	202f      	movs	r0, #47	; 0x2f
 80014bc:	f000 ff01 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80014c0:	202f      	movs	r0, #47	; 0x2f
 80014c2:	f000 ff1a 	bl	80022fa <HAL_NVIC_EnableIRQ>

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <MX_GPIO_Init+0x11c>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a3f      	ldr	r2, [pc, #252]	; (80015f0 <MX_GPIO_Init+0x11c>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <MX_GPIO_Init+0x11c>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <MX_GPIO_Init+0x11c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a38      	ldr	r2, [pc, #224]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b32      	ldr	r3, [pc, #200]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <MX_GPIO_Init+0x11c>)
 800152c:	f043 0310 	orr.w	r3, r3, #16
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0310 	and.w	r3, r3, #16
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a2a      	ldr	r2, [pc, #168]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b28      	ldr	r3, [pc, #160]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a23      	ldr	r2, [pc, #140]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_GPIO_Init+0x11c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_GPIO_Init+0x11c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <MX_GPIO_Init+0x11c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <MX_GPIO_Init+0x120>)
 800159a:	f001 fc33 	bl	8002e04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800159e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	480f      	ldr	r0, [pc, #60]	; (80015f4 <MX_GPIO_Init+0x120>)
 80015b8:	f001 fa72 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c2:	4b0d      	ldr	r3, [pc, #52]	; (80015f8 <MX_GPIO_Init+0x124>)
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4619      	mov	r1, r3
 80015d0:	480a      	ldr	r0, [pc, #40]	; (80015fc <MX_GPIO_Init+0x128>)
 80015d2:	f001 fa65 	bl	8002aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2017      	movs	r0, #23
 80015dc:	f000 fe71 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015e0:	2017      	movs	r0, #23
 80015e2:	f000 fe8a 	bl	80022fa <HAL_NVIC_EnableIRQ>

}
 80015e6:	bf00      	nop
 80015e8:	3730      	adds	r7, #48	; 0x30
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	10110000 	.word	0x10110000
 80015fc:	40020800 	.word	0x40020800

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_MspInit+0x4c>)
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_MspInit+0x4c>)
 8001620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001624:	6453      	str	r3, [r2, #68]	; 0x44
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_MspInit+0x4c>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_MspInit+0x4c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_MspInit+0x4c>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_MspInit+0x4c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a65      	ldr	r2, [pc, #404]	; (8001814 <HAL_I2C_MspInit+0x1b4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d163      	bne.n	800174a <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b61      	ldr	r3, [pc, #388]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800169e:	23c0      	movs	r3, #192	; 0xc0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a2:	2312      	movs	r3, #18
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ae:	2304      	movs	r3, #4
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4858      	ldr	r0, [pc, #352]	; (800181c <HAL_I2C_MspInit+0x1bc>)
 80016ba:	f001 f9f1 	bl	8002aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	4b55      	ldr	r3, [pc, #340]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a54      	ldr	r2, [pc, #336]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 80016c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 80016dc:	4a51      	ldr	r2, [pc, #324]	; (8001824 <HAL_I2C_MspInit+0x1c4>)
 80016de:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016e0:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 80016e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016e8:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ee:	4b4c      	ldr	r3, [pc, #304]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f4:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 80016f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016fa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016fc:	4b48      	ldr	r3, [pc, #288]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001708:	4b45      	ldr	r3, [pc, #276]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 8001710:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001714:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800171c:	4840      	ldr	r0, [pc, #256]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 800171e:	f000 fe15 	bl	800234c <HAL_DMA_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001728:	f7ff ff6a 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
 8001732:	4a3b      	ldr	r2, [pc, #236]	; (8001820 <HAL_I2C_MspInit+0x1c0>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	201f      	movs	r0, #31
 800173e:	f000 fdc0 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001742:	201f      	movs	r0, #31
 8001744:	f000 fdd9 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001748:	e05f      	b.n	800180a <HAL_I2C_MspInit+0x1aa>
  else if(hi2c->Instance==I2C2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a36      	ldr	r2, [pc, #216]	; (8001828 <HAL_I2C_MspInit+0x1c8>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d15a      	bne.n	800180a <HAL_I2C_MspInit+0x1aa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001770:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001782:	2304      	movs	r3, #4
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	4823      	ldr	r0, [pc, #140]	; (800181c <HAL_I2C_MspInit+0x1bc>)
 800178e:	f001 f987 	bl	8002aa0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 800179c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <HAL_I2C_MspInit+0x1b8>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017b0:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <HAL_I2C_MspInit+0x1d0>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017b6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 80017f0:	f000 fdac 	bl	800234c <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 80017fa:	f7ff ff01 	bl	8001600 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
 8001804:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_I2C_MspInit+0x1cc>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38
}
 800180a:	bf00      	nop
 800180c:	3730      	adds	r7, #48	; 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40005400 	.word	0x40005400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020400 	.word	0x40020400
 8001820:	20000404 	.word	0x20000404
 8001824:	40026088 	.word	0x40026088
 8001828:	40005800 	.word	0x40005800
 800182c:	200002a4 	.word	0x200002a4
 8001830:	40026058 	.word	0x40026058

08001834 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_RTC_MspInit+0x24>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d102      	bne.n	800184c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RTC_MspInit+0x28>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40002800 	.word	0x40002800
 800185c:	42470e3c 	.word	0x42470e3c

08001860 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a42      	ldr	r2, [pc, #264]	; (8001978 <HAL_TIM_Base_MspInit+0x118>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d116      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a40      	ldr	r2, [pc, #256]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 4, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2104      	movs	r1, #4
 8001892:	201b      	movs	r0, #27
 8001894:	f000 fd15 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001898:	201b      	movs	r0, #27
 800189a:	f000 fd2e 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800189e:	e066      	b.n	800196e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018a8:	d116      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a32      	ldr	r2, [pc, #200]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2104      	movs	r1, #4
 80018ca:	201c      	movs	r0, #28
 80018cc:	f000 fcf9 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018d0:	201c      	movs	r0, #28
 80018d2:	f000 fd12 	bl	80022fa <HAL_NVIC_EnableIRQ>
}
 80018d6:	e04a      	b.n	800196e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a28      	ldr	r2, [pc, #160]	; (8001980 <HAL_TIM_Base_MspInit+0x120>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d116      	bne.n	8001910 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	4b25      	ldr	r3, [pc, #148]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a24      	ldr	r2, [pc, #144]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b22      	ldr	r3, [pc, #136]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2104      	movs	r1, #4
 8001902:	201d      	movs	r0, #29
 8001904:	f000 fcdd 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001908:	201d      	movs	r0, #29
 800190a:	f000 fcf6 	bl	80022fa <HAL_NVIC_EnableIRQ>
}
 800190e:	e02e      	b.n	800196e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM5)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_TIM_Base_MspInit+0x124>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d116      	bne.n	8001948 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a16      	ldr	r2, [pc, #88]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2032      	movs	r0, #50	; 0x32
 800193c:	f000 fcc1 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001940:	2032      	movs	r0, #50	; 0x32
 8001942:	f000 fcda 	bl	80022fa <HAL_NVIC_EnableIRQ>
}
 8001946:	e012      	b.n	800196e <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM8)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_TIM_Base_MspInit+0x128>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10d      	bne.n	800196e <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6453      	str	r3, [r2, #68]	; 0x44
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_TIM_Base_MspInit+0x11c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	bf00      	nop
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40010000 	.word	0x40010000
 800197c:	40023800 	.word	0x40023800
 8001980:	40000400 	.word	0x40000400
 8001984:	40000c00 	.word	0x40000c00
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	; 0x30
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_TIM_MspPostInit+0x140>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d11f      	bne.n	80019ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019dc:	2301      	movs	r3, #1
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	4619      	mov	r1, r3
 80019e6:	483b      	ldr	r0, [pc, #236]	; (8001ad4 <HAL_TIM_MspPostInit+0x148>)
 80019e8:	f001 f85a 	bl	8002aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80019ec:	e06a      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM2)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f6:	d11e      	bne.n	8001a36 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6313      	str	r3, [r2, #48]	; 0x30
 8001a08:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a14:	2320      	movs	r3, #32
 8001a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 031c 	add.w	r3, r7, #28
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <HAL_TIM_MspPostInit+0x14c>)
 8001a30:	f001 f836 	bl	8002aa0 <HAL_GPIO_Init>
}
 8001a34:	e046      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a28      	ldr	r2, [pc, #160]	; (8001adc <HAL_TIM_MspPostInit+0x150>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d11e      	bne.n	8001a7e <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a5c:	2340      	movs	r3, #64	; 0x40
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <HAL_TIM_MspPostInit+0x14c>)
 8001a78:	f001 f812 	bl	8002aa0 <HAL_GPIO_Init>
}
 8001a7c:	e022      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a17      	ldr	r2, [pc, #92]	; (8001ae0 <HAL_TIM_MspPostInit+0x154>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d11d      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6313      	str	r3, [r2, #48]	; 0x30
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_TIM_MspPostInit+0x144>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <HAL_TIM_MspPostInit+0x14c>)
 8001ac0:	f000 ffee 	bl	8002aa0 <HAL_GPIO_Init>
}
 8001ac4:	bf00      	nop
 8001ac6:	3730      	adds	r7, #48	; 0x30
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40010000 	.word	0x40010000
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40020000 	.word	0x40020000
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000c00 	.word	0x40000c00

08001ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	; 0x38
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a9f      	ldr	r2, [pc, #636]	; (8001d80 <HAL_UART_MspInit+0x29c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	f040 80b0 	bne.w	8001c68 <HAL_UART_MspInit+0x184>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	4b9d      	ldr	r3, [pc, #628]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	4a9c      	ldr	r2, [pc, #624]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b16:	6413      	str	r3, [r2, #64]	; 0x40
 8001b18:	4b9a      	ldr	r3, [pc, #616]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
 8001b28:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a95      	ldr	r2, [pc, #596]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	4b8f      	ldr	r3, [pc, #572]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a8e      	ldr	r2, [pc, #568]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b8c      	ldr	r3, [pc, #560]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
 8001b5a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA1     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b60:	2302      	movs	r3, #2
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b6c:	2308      	movs	r3, #8
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b74:	4619      	mov	r1, r3
 8001b76:	4884      	ldr	r0, [pc, #528]	; (8001d88 <HAL_UART_MspInit+0x2a4>)
 8001b78:	f000 ff92 	bl	8002aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001b8e:	2308      	movs	r3, #8
 8001b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	487c      	ldr	r0, [pc, #496]	; (8001d8c <HAL_UART_MspInit+0x2a8>)
 8001b9a:	f000 ff81 	bl	8002aa0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001b9e:	4b7c      	ldr	r3, [pc, #496]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001ba0:	4a7c      	ldr	r2, [pc, #496]	; (8001d94 <HAL_UART_MspInit+0x2b0>)
 8001ba2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001baa:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bac:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bae:	2240      	movs	r2, #64	; 0x40
 8001bb0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb2:	4b77      	ldr	r3, [pc, #476]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bbe:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc0:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001bcc:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bd8:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001bde:	486c      	ldr	r0, [pc, #432]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001be0:	f000 fbb4 	bl	800234c <HAL_DMA_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001bea:	f7ff fd09 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001bf4:	4a66      	ldr	r2, [pc, #408]	; (8001d90 <HAL_UART_MspInit+0x2ac>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001bfa:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001bfc:	4a67      	ldr	r2, [pc, #412]	; (8001d9c <HAL_UART_MspInit+0x2b8>)
 8001bfe:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c00:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c06:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c08:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0e:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c14:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c1a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1c:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c22:	4b5d      	ldr	r3, [pc, #372]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001c28:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2e:	4b5a      	ldr	r3, [pc, #360]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c34:	4b58      	ldr	r3, [pc, #352]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001c3a:	4857      	ldr	r0, [pc, #348]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c3c:	f000 fb86 	bl	800234c <HAL_DMA_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8001c46:	f7ff fcdb 	bl	8001600 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a52      	ldr	r2, [pc, #328]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c50:	4a51      	ldr	r2, [pc, #324]	; (8001d98 <HAL_UART_MspInit+0x2b4>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2034      	movs	r0, #52	; 0x34
 8001c5c:	f000 fb31 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c60:	2034      	movs	r0, #52	; 0x34
 8001c62:	f000 fb4a 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001c66:	e086      	b.n	8001d76 <HAL_UART_MspInit+0x292>
  else if(huart->Instance==UART5)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a4c      	ldr	r2, [pc, #304]	; (8001da0 <HAL_UART_MspInit+0x2bc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	f040 8081 	bne.w	8001d76 <HAL_UART_MspInit+0x292>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c82:	6413      	str	r3, [r2, #64]	; 0x40
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	4a3a      	ldr	r2, [pc, #232]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a33      	ldr	r2, [pc, #204]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_UART_MspInit+0x2a0>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cda:	2308      	movs	r3, #8
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4829      	ldr	r0, [pc, #164]	; (8001d8c <HAL_UART_MspInit+0x2a8>)
 8001ce6:	f000 fedb 	bl	8002aa0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cea:	2304      	movs	r3, #4
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d02:	4619      	mov	r1, r3
 8001d04:	4827      	ldr	r0, [pc, #156]	; (8001da4 <HAL_UART_MspInit+0x2c0>)
 8001d06:	f000 fecb 	bl	8002aa0 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_UART_MspInit+0x2c8>)
 8001d0e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d16:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d1a:	2240      	movs	r2, #64	; 0x40
 8001d1c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d2a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001d4a:	4817      	ldr	r0, [pc, #92]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d4c:	f000 fafe 	bl	800234c <HAL_DMA_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_UART_MspInit+0x276>
      Error_Handler();
 8001d56:	f7ff fc53 	bl	8001600 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_UART_MspInit+0x2c4>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2105      	movs	r1, #5
 8001d6a:	2035      	movs	r0, #53	; 0x35
 8001d6c:	f000 faa9 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001d70:	2035      	movs	r0, #53	; 0x35
 8001d72:	f000 fac2 	bl	80022fa <HAL_NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3738      	adds	r7, #56	; 0x38
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40004c00 	.word	0x40004c00
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	20000568 	.word	0x20000568
 8001d94:	40026070 	.word	0x40026070
 8001d98:	200000d8 	.word	0x200000d8
 8001d9c:	40026040 	.word	0x40026040
 8001da0:	40005000 	.word	0x40005000
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	200005c8 	.word	0x200005c8
 8001dac:	400260b8 	.word	0x400260b8

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <HardFault_Handler+0x4>

08001dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <MemManage_Handler+0x4>

08001dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <BusFault_Handler+0x4>

08001dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <UsageFault_Handler+0x4>

08001dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e04:	f000 f940 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA1_Stream2_IRQHandler+0x10>)
 8001e12:	f000 fbc3 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200000d8 	.word	0x200000d8

08001e20 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA1_Stream3_IRQHandler+0x10>)
 8001e26:	f000 fbb9 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200002a4 	.word	0x200002a4

08001e34 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA1_Stream4_IRQHandler+0x10>)
 8001e3a:	f000 fbaf 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000568 	.word	0x20000568

08001e48 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA1_Stream5_IRQHandler+0x10>)
 8001e4e:	f000 fba5 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000404 	.word	0x20000404

08001e5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001e60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e64:	f001 f802 	bl	8002e6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <TIM1_CC_IRQHandler+0x10>)
 8001e72:	f004 fa1e 	bl	80062b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	200003c4 	.word	0x200003c4

08001e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <TIM2_IRQHandler+0x10>)
 8001e86:	f004 fa14 	bl	80062b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200004a4 	.word	0x200004a4

08001e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <TIM3_IRQHandler+0x10>)
 8001e9a:	f004 fa0a 	bl	80062b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000264 	.word	0x20000264

08001ea8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eac:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <I2C1_EV_IRQHandler+0x10>)
 8001eae:	f001 fb73 	bl	8003598 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000178 	.word	0x20000178

08001ebc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Stream7_IRQHandler+0x10>)
 8001ec2:	f000 fb6b 	bl	800259c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200005c8 	.word	0x200005c8

08001ed0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <TIM5_IRQHandler+0x10>)
 8001ed6:	f004 f9ec 	bl	80062b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000224 	.word	0x20000224

08001ee4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ee8:	4802      	ldr	r0, [pc, #8]	; (8001ef4 <UART4_IRQHandler+0x10>)
 8001eea:	f005 fa1d 	bl	8007328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000464 	.word	0x20000464

08001ef8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <UART5_IRQHandler+0x10>)
 8001efe:	f005 fa13 	bl	8007328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000314 	.word	0x20000314

08001f0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <_sbrk+0x50>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x16>
		heap_end = &end;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <_sbrk+0x50>)
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <_sbrk+0x54>)
 8001f20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <_sbrk+0x50>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <_sbrk+0x50>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	466a      	mov	r2, sp
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d907      	bls.n	8001f46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f36:	f006 f895 	bl	8008064 <__errno>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	230c      	movs	r3, #12
 8001f3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f44:	e006      	b.n	8001f54 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <_sbrk+0x50>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a03      	ldr	r2, [pc, #12]	; (8001f5c <_sbrk+0x50>)
 8001f50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200000bc 	.word	0x200000bc
 8001f60:	20000630 	.word	0x20000630

08001f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <SystemInit+0x28>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <SystemInit+0x28>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SystemInit+0x28>)
 8001f7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f7e:	609a      	str	r2, [r3, #8]
#endif
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f96:	e003      	b.n	8001fa0 <LoopCopyDataInit>

08001f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f9e:	3104      	adds	r1, #4

08001fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fa8:	d3f6      	bcc.n	8001f98 <CopyDataInit>
  ldr  r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fac:	e002      	b.n	8001fb4 <LoopFillZerobss>

08001fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fb0:	f842 3b04 	str.w	r3, [r2], #4

08001fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fb8:	d3f9      	bcc.n	8001fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fba:	f7ff ffd3 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f006 f857 	bl	8008070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7fe fcfb 	bl	80009bc <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fcc:	08008a08 	.word	0x08008a08
  ldr  r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fd4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001fd8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001fdc:	20000630 	.word	0x20000630

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_Init+0x40>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_Init+0x40>)
 8001fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_Init+0x40>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <HAL_Init+0x40>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_Init+0x40>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_Init+0x40>)
 8002006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 f94d 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f808 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002018:	f7ff fafa 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f973 	bl	8002332 <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002064:	f000 f92d 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000000 	.word	0x20000000
 8002080:	20000008 	.word	0x20000008
 8002084:	20000004 	.word	0x20000004

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000628 	.word	0x20000628

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	20000628 	.word	0x20000628

080020c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <__NVIC_SetPriorityGrouping+0x44>)
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	60d3      	str	r3, [r2, #12]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <__NVIC_GetPriorityGrouping+0x18>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 0307 	and.w	r3, r3, #7
}
 800211e:	4618      	mov	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	2b00      	cmp	r3, #0
 800213c:	db0b      	blt.n	8002156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 021f 	and.w	r2, r3, #31
 8002144:	4907      	ldr	r1, [pc, #28]	; (8002164 <__NVIC_EnableIRQ+0x38>)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	2001      	movs	r0, #1
 800214e:	fa00 f202 	lsl.w	r2, r0, r2
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000e100 	.word	0xe000e100

08002168 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002176:	2b00      	cmp	r3, #0
 8002178:	db10      	blt.n	800219c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	f003 021f 	and.w	r2, r3, #31
 8002180:	4909      	ldr	r1, [pc, #36]	; (80021a8 <__NVIC_DisableIRQ+0x40>)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	2001      	movs	r0, #1
 800218a:	fa00 f202 	lsl.w	r2, r0, r2
 800218e:	3320      	adds	r3, #32
 8002190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002198:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	; (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff07 	bl	80020c8 <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d4:	f7ff ff1c 	bl	8002110 <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff8e 	bl	8002200 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff0f 	bl	800212c <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff1f 	bl	8002168 <__NVIC_DisableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ff94 	bl	8002268 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff feaa 	bl	80020b0 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e099      	b.n	800249c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0201 	bic.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002388:	e00f      	b.n	80023aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800238a:	f7ff fe91 	bl	80020b0 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b05      	cmp	r3, #5
 8002396:	d908      	bls.n	80023aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2220      	movs	r2, #32
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2203      	movs	r2, #3
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e078      	b.n	800249c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1e8      	bne.n	800238a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	4b38      	ldr	r3, [pc, #224]	; (80024a4 <HAL_DMA_Init+0x158>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b04      	cmp	r3, #4
 8002402:	d107      	bne.n	8002414 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	4313      	orrs	r3, r2
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0307 	bic.w	r3, r3, #7
 800242a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	4313      	orrs	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b04      	cmp	r3, #4
 800243c:	d117      	bne.n	800246e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00e      	beq.n	800246e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 faab 	bl	80029ac <DMA_CheckFifoParam>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2240      	movs	r2, #64	; 0x40
 8002460:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800246a:	2301      	movs	r3, #1
 800246c:	e016      	b.n	800249c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa62 	bl	8002940 <DMA_CalcBaseAndBitshift>
 800247c:	4603      	mov	r3, r0
 800247e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002484:	223f      	movs	r2, #63	; 0x3f
 8002486:	409a      	lsls	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	f010803f 	.word	0xf010803f

080024a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_DMA_Start_IT+0x26>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e040      	b.n	8002550 <HAL_DMA_Start_IT+0xa8>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d12f      	bne.n	8002542 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f9f4 	bl	80028e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	223f      	movs	r2, #63	; 0x3f
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0216 	orr.w	r2, r2, #22
 8002516:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0208 	orr.w	r2, r2, #8
 800252e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e005      	b.n	800254e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800254a:	2302      	movs	r3, #2
 800254c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d004      	beq.n	8002576 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2280      	movs	r2, #128	; 0x80
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e00c      	b.n	8002590 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2205      	movs	r2, #5
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a8:	4b92      	ldr	r3, [pc, #584]	; (80027f4 <HAL_DMA_IRQHandler+0x258>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a92      	ldr	r2, [pc, #584]	; (80027f8 <HAL_DMA_IRQHandler+0x25c>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a9b      	lsrs	r3, r3, #10
 80025b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	2208      	movs	r2, #8
 80025c8:	409a      	lsls	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d01a      	beq.n	8002608 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0204 	bic.w	r2, r2, #4
 80025ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2208      	movs	r2, #8
 80025f6:	409a      	lsls	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0201 	orr.w	r2, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	2201      	movs	r2, #1
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f043 0202 	orr.w	r2, r3, #2
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2204      	movs	r2, #4
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d012      	beq.n	8002674 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00b      	beq.n	8002674 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	2204      	movs	r2, #4
 8002662:	409a      	lsls	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f043 0204 	orr.w	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2210      	movs	r2, #16
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d043      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d03c      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2210      	movs	r2, #16
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d018      	beq.n	80026de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d024      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	4798      	blx	r3
 80026ca:	e01f      	b.n	800270c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e016      	b.n	800270c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0208 	bic.w	r2, r2, #8
 80026fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	2220      	movs	r2, #32
 8002712:	409a      	lsls	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 808e 	beq.w	800283a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8086 	beq.w	800283a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	2220      	movs	r2, #32
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b05      	cmp	r3, #5
 8002744:	d136      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0216 	bic.w	r2, r2, #22
 8002754:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002764:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <HAL_DMA_IRQHandler+0x1da>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0208 	bic.w	r2, r2, #8
 8002784:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	223f      	movs	r2, #63	; 0x3f
 800278c:	409a      	lsls	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d07d      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
        }
        return;
 80027b2:	e078      	b.n	80028a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d01c      	beq.n	80027fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d030      	beq.n	800283a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	4798      	blx	r3
 80027e0:	e02b      	b.n	800283a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d027      	beq.n	800283a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	4798      	blx	r3
 80027f2:	e022      	b.n	800283a <HAL_DMA_IRQHandler+0x29e>
 80027f4:	20000000 	.word	0x20000000
 80027f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10f      	bne.n	800282a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0210 	bic.w	r2, r2, #16
 8002818:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	2b00      	cmp	r3, #0
 8002840:	d032      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d022      	beq.n	8002894 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2205      	movs	r2, #5
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	3301      	adds	r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	429a      	cmp	r2, r3
 8002870:	d307      	bcc.n	8002882 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1f2      	bne.n	8002866 <HAL_DMA_IRQHandler+0x2ca>
 8002880:	e000      	b.n	8002884 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002882:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
 80028a4:	e000      	b.n	80028a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028a6:	bf00      	nop
    }
  }
}
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop

080028b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002900:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d108      	bne.n	8002924 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002922:	e007      	b.n	8002934 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3b10      	subs	r3, #16
 8002950:	4a14      	ldr	r2, [pc, #80]	; (80029a4 <DMA_CalcBaseAndBitshift+0x64>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800295a:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <DMA_CalcBaseAndBitshift+0x68>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d909      	bls.n	8002982 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	1d1a      	adds	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58
 8002980:	e007      	b.n	8002992 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	aaaaaaab 	.word	0xaaaaaaab
 80029a8:	080089bc 	.word	0x080089bc

080029ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11f      	bne.n	8002a06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d855      	bhi.n	8002a78 <DMA_CheckFifoParam+0xcc>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <DMA_CheckFifoParam+0x28>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029f7 	.word	0x080029f7
 80029dc:	080029e5 	.word	0x080029e5
 80029e0:	08002a79 	.word	0x08002a79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d045      	beq.n	8002a7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f4:	e042      	b.n	8002a7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029fe:	d13f      	bne.n	8002a80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a04:	e03c      	b.n	8002a80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0e:	d121      	bne.n	8002a54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d836      	bhi.n	8002a84 <DMA_CheckFifoParam+0xd8>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <DMA_CheckFifoParam+0x70>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002a33 	.word	0x08002a33
 8002a24:	08002a2d 	.word	0x08002a2d
 8002a28:	08002a45 	.word	0x08002a45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e02f      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d024      	beq.n	8002a88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a42:	e021      	b.n	8002a88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a4c:	d11e      	bne.n	8002a8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a52:	e01b      	b.n	8002a8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d902      	bls.n	8002a60 <DMA_CheckFifoParam+0xb4>
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d003      	beq.n	8002a66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a5e:	e018      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e015      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00e      	beq.n	8002a90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	73fb      	strb	r3, [r7, #15]
      break;
 8002a76:	e00b      	b.n	8002a90 <DMA_CheckFifoParam+0xe4>
      break;
 8002a78:	bf00      	nop
 8002a7a:	e00a      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;
 8002a7c:	bf00      	nop
 8002a7e:	e008      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;
 8002a80:	bf00      	nop
 8002a82:	e006      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;
 8002a84:	bf00      	nop
 8002a86:	e004      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;
 8002a88:	bf00      	nop
 8002a8a:	e002      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;   
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <DMA_CheckFifoParam+0xe6>
      break;
 8002a90:	bf00      	nop
    }
  } 
  
  return status; 
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e16b      	b.n	8002d94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	f040 815a 	bne.w	8002d8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d00b      	beq.n	8002afa <HAL_GPIO_Init+0x5a>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d007      	beq.n	8002afa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aee:	2b11      	cmp	r3, #17
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b12      	cmp	r3, #18
 8002af8:	d130      	bne.n	8002b5c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 0201 	and.w	r2, r3, #1
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0xfc>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b12      	cmp	r3, #18
 8002b9a:	d123      	bne.n	8002be4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	69b9      	ldr	r1, [r7, #24]
 8002be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0203 	and.w	r2, r3, #3
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 80b4 	beq.w	8002d8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b5f      	ldr	r3, [pc, #380]	; (8002da8 <HAL_GPIO_Init+0x308>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4a5e      	ldr	r2, [pc, #376]	; (8002da8 <HAL_GPIO_Init+0x308>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	; 0x44
 8002c36:	4b5c      	ldr	r3, [pc, #368]	; (8002da8 <HAL_GPIO_Init+0x308>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c42:	4a5a      	ldr	r2, [pc, #360]	; (8002dac <HAL_GPIO_Init+0x30c>)
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	089b      	lsrs	r3, r3, #2
 8002c48:	3302      	adds	r3, #2
 8002c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	220f      	movs	r2, #15
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4013      	ands	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a51      	ldr	r2, [pc, #324]	; (8002db0 <HAL_GPIO_Init+0x310>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02b      	beq.n	8002cc6 <HAL_GPIO_Init+0x226>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a50      	ldr	r2, [pc, #320]	; (8002db4 <HAL_GPIO_Init+0x314>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x222>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_GPIO_Init+0x318>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x21e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4e      	ldr	r2, [pc, #312]	; (8002dbc <HAL_GPIO_Init+0x31c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x21a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4d      	ldr	r2, [pc, #308]	; (8002dc0 <HAL_GPIO_Init+0x320>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x216>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	; (8002dc4 <HAL_GPIO_Init+0x324>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x212>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a4b      	ldr	r2, [pc, #300]	; (8002dc8 <HAL_GPIO_Init+0x328>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x20e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_GPIO_Init+0x32c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x20a>
 8002ca6:	2307      	movs	r3, #7
 8002ca8:	e00e      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002caa:	2308      	movs	r3, #8
 8002cac:	e00c      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cae:	2306      	movs	r3, #6
 8002cb0:	e00a      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x228>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	f002 0203 	and.w	r2, r2, #3
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd8:	4934      	ldr	r1, [pc, #208]	; (8002dac <HAL_GPIO_Init+0x30c>)
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d0a:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d10:	4b2f      	ldr	r3, [pc, #188]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d3a:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d5e:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d64:	4b1a      	ldr	r3, [pc, #104]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d88:	4a11      	ldr	r2, [pc, #68]	; (8002dd0 <HAL_GPIO_Init+0x330>)
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3301      	adds	r3, #1
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	2b0f      	cmp	r3, #15
 8002d98:	f67f ae90 	bls.w	8002abc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d9c:	bf00      	nop
 8002d9e:	3724      	adds	r7, #36	; 0x24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40021c00 	.word	0x40021c00
 8002dd0:	40013c00 	.word	0x40013c00

08002dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	4013      	ands	r3, r2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e001      	b.n	8002df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	887b      	ldrh	r3, [r7, #2]
 8002e48:	401a      	ands	r2, r3
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d104      	bne.n	8002e5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	041a      	lsls	r2, r3, #16
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	619a      	str	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d006      	beq.n	8002e90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e82:	4a05      	ldr	r2, [pc, #20]	; (8002e98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd fb7c 	bl	8000588 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40013c00 	.word	0x40013c00

08002e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e11f      	b.n	80030ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fbcc 	bl	8001660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f00:	f002 fe90 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8002f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a7b      	ldr	r2, [pc, #492]	; (80030f8 <HAL_I2C_Init+0x25c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d807      	bhi.n	8002f20 <HAL_I2C_Init+0x84>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4a7a      	ldr	r2, [pc, #488]	; (80030fc <HAL_I2C_Init+0x260>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	bf94      	ite	ls
 8002f18:	2301      	movls	r3, #1
 8002f1a:	2300      	movhi	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e006      	b.n	8002f2e <HAL_I2C_Init+0x92>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4a77      	ldr	r2, [pc, #476]	; (8003100 <HAL_I2C_Init+0x264>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	bf94      	ite	ls
 8002f28:	2301      	movls	r3, #1
 8002f2a:	2300      	movhi	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0db      	b.n	80030ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a72      	ldr	r2, [pc, #456]	; (8003104 <HAL_I2C_Init+0x268>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0c9b      	lsrs	r3, r3, #18
 8002f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a64      	ldr	r2, [pc, #400]	; (80030f8 <HAL_I2C_Init+0x25c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d802      	bhi.n	8002f70 <HAL_I2C_Init+0xd4>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	e009      	b.n	8002f84 <HAL_I2C_Init+0xe8>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	4a63      	ldr	r2, [pc, #396]	; (8003108 <HAL_I2C_Init+0x26c>)
 8002f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	3301      	adds	r3, #1
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4956      	ldr	r1, [pc, #344]	; (80030f8 <HAL_I2C_Init+0x25c>)
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	d80d      	bhi.n	8002fc0 <HAL_I2C_Init+0x124>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	1e59      	subs	r1, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	bf38      	it	cc
 8002fbc:	2304      	movcc	r3, #4
 8002fbe:	e04f      	b.n	8003060 <HAL_I2C_Init+0x1c4>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <HAL_I2C_Init+0x150>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e012      	b.n	8003012 <HAL_I2C_Init+0x176>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Init+0x17e>
 8003016:	2301      	movs	r3, #1
 8003018:	e022      	b.n	8003060 <HAL_I2C_Init+0x1c4>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_I2C_Init+0x1a4>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e58      	subs	r0, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	440b      	add	r3, r1
 8003030:	fbb0 f3f3 	udiv	r3, r0, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800303e:	e00f      	b.n	8003060 <HAL_I2C_Init+0x1c4>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6809      	ldr	r1, [r1, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800308e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6911      	ldr	r1, [r2, #16]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	000186a0 	.word	0x000186a0
 80030fc:	001e847f 	.word	0x001e847f
 8003100:	003d08ff 	.word	0x003d08ff
 8003104:	431bde83 	.word	0x431bde83
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	460b      	mov	r3, r1
 8003120:	813b      	strh	r3, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003126:	f7fe ffc3 	bl	80020b0 <HAL_GetTick>
 800312a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b20      	cmp	r3, #32
 8003136:	f040 80d9 	bne.w	80032ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2319      	movs	r3, #25
 8003140:	2201      	movs	r2, #1
 8003142:	496d      	ldr	r1, [pc, #436]	; (80032f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f001 ff90 	bl	800506a <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
 8003152:	e0cc      	b.n	80032ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Mem_Write+0x56>
 800315e:	2302      	movs	r3, #2
 8003160:	e0c5      	b.n	80032ee <HAL_I2C_Mem_Write+0x1e2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d007      	beq.n	8003188 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2221      	movs	r2, #33	; 0x21
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	; 0x40
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a3a      	ldr	r2, [r7, #32]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a4d      	ldr	r2, [pc, #308]	; (80032fc <HAL_I2C_Mem_Write+0x1f0>)
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ca:	88f8      	ldrh	r0, [r7, #6]
 80031cc:	893a      	ldrh	r2, [r7, #8]
 80031ce:	8979      	ldrh	r1, [r7, #10]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	4603      	mov	r3, r0
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f001 fc3a 	bl	8004a54 <I2C_RequestMemoryWrite>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d052      	beq.n	800328c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e081      	b.n	80032ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f002 f811 	bl	8005216 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d107      	bne.n	8003212 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06b      	b.n	80032ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d11b      	bne.n	800328c <HAL_I2C_Mem_Write+0x180>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1aa      	bne.n	80031ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f001 fffd 	bl	8005298 <I2C_WaitOnBTFFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d107      	bne.n	80032bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e016      	b.n	80032ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	00100002 	.word	0x00100002
 80032fc:	ffff0000 	.word	0xffff0000

08003300 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	4603      	mov	r3, r0
 8003310:	817b      	strh	r3, [r7, #10]
 8003312:	460b      	mov	r3, r1
 8003314:	813b      	strh	r3, [r7, #8]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800331a:	f7fe fec9 	bl	80020b0 <HAL_GetTick>
 800331e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b20      	cmp	r3, #32
 800332e:	f040 8123 	bne.w	8003578 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003332:	4b94      	ldr	r3, [pc, #592]	; (8003584 <HAL_I2C_Mem_Read_DMA+0x284>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	08db      	lsrs	r3, r3, #3
 8003338:	4a93      	ldr	r2, [pc, #588]	; (8003588 <HAL_I2C_Mem_Read_DMA+0x288>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0a1a      	lsrs	r2, r3, #8
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009a      	lsls	r2, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	3b01      	subs	r3, #1
 8003350:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e0f9      	b.n	800357a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b02      	cmp	r3, #2
 8003392:	d0db      	beq.n	800334c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_I2C_Mem_Read_DMA+0xa2>
 800339e:	2302      	movs	r3, #2
 80033a0:	e0eb      	b.n	800357a <HAL_I2C_Mem_Read_DMA+0x27a>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2222      	movs	r2, #34	; 0x22
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4a61      	ldr	r2, [pc, #388]	; (800358c <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 8085 	beq.w	800351e <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003418:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_I2C_Mem_Read_DMA+0x290>)
 800341a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	4a5c      	ldr	r2, [pc, #368]	; (8003594 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003422:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	2200      	movs	r2, #0
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003430:	2200      	movs	r2, #0
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003438:	2200      	movs	r2, #0
 800343a:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3310      	adds	r3, #16
 800344e:	4619      	mov	r1, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	461a      	mov	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345a:	f7ff f825 	bl	80024a8 <HAL_DMA_Start_IT>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8003464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003468:	2b00      	cmp	r3, #0
 800346a:	d144      	bne.n	80034f6 <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800346c:	88f8      	ldrh	r0, [r7, #6]
 800346e:	893a      	ldrh	r2, [r7, #8]
 8003470:	8979      	ldrh	r1, [r7, #10]
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2323      	movs	r3, #35	; 0x23
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4603      	mov	r3, r0
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f001 fb7d 	bl	8004b7c <I2C_RequestMemoryRead>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e076      	b.n	800357a <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	2b01      	cmp	r3, #1
 8003492:	d108      	bne.n	80034a6 <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	e007      	b.n	80034b6 <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034b4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	61bb      	str	r3, [r7, #24]
 80034ca:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	e03e      	b.n	8003574 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f043 0210 	orr.w	r2, r3, #16
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e02d      	b.n	800357a <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800351e:	88f8      	ldrh	r0, [r7, #6]
 8003520:	893a      	ldrh	r2, [r7, #8]
 8003522:	8979      	ldrh	r1, [r7, #10]
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	2323      	movs	r3, #35	; 0x23
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4603      	mov	r3, r0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f001 fb24 	bl	8004b7c <I2C_RequestMemoryRead>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e01d      	b.n	800357a <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003562:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e000      	b.n	800357a <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8003578:	2302      	movs	r3, #2
  }
}
 800357a:	4618      	mov	r0, r3
 800357c:	3728      	adds	r7, #40	; 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000000 	.word	0x20000000
 8003588:	14f8b589 	.word	0x14f8b589
 800358c:	ffff0000 	.word	0xffff0000
 8003590:	08004d49 	.word	0x08004d49
 8003594:	08004ef3 	.word	0x08004ef3

08003598 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b088      	sub	sp, #32
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d003      	beq.n	80035d0 <HAL_I2C_EV_IRQHandler+0x38>
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b40      	cmp	r3, #64	; 0x40
 80035cc:	f040 80b6 	bne.w	800373c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_I2C_EV_IRQHandler+0x6e>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80035f0:	d003      	beq.n	80035fa <HAL_I2C_EV_IRQHandler+0x62>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80035f8:	d101      	bne.n	80035fe <HAL_I2C_EV_IRQHandler+0x66>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_I2C_EV_IRQHandler+0x68>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b01      	cmp	r3, #1
 8003602:	f000 8127 	beq.w	8003854 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00c      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0x92>
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	0a5b      	lsrs	r3, r3, #9
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d006      	beq.n	800362a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f001 feab 	bl	8005378 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 fc75 	bl	8003f12 <I2C_Master_SB>
 8003628:	e087      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0xb2>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	0a5b      	lsrs	r3, r3, #9
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fceb 	bl	800401e <I2C_Master_ADD10>
 8003648:	e077      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0xd2>
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	0a5b      	lsrs	r3, r3, #9
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fd05 	bl	8004072 <I2C_Master_ADDR>
 8003668:	e067      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d030      	beq.n	80036d8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003684:	f000 80e8 	beq.w	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	09db      	lsrs	r3, r3, #7
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00f      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x11c>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d009      	beq.n	80036b4 <HAL_I2C_EV_IRQHandler+0x11c>
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d103      	bne.n	80036b4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 f941 	bl	8003934 <I2C_MasterTransmit_TXE>
 80036b2:	e042      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80cb 	beq.w	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	0a5b      	lsrs	r3, r3, #9
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80c4 	beq.w	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f9cb 	bl	8003a6c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d6:	e0bf      	b.n	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e6:	f000 80b7 	beq.w	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00f      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x17e>
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	0a9b      	lsrs	r3, r3, #10
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_I2C_EV_IRQHandler+0x17e>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d103      	bne.n	8003716 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fa93 	bl	8003c3a <I2C_MasterReceive_RXNE>
 8003714:	e011      	b.n	800373a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 809a 	beq.w	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	0a5b      	lsrs	r3, r3, #9
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8093 	beq.w	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fb03 	bl	8003d3e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003738:	e08e      	b.n	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
 800373a:	e08d      	b.n	8003858 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d004      	beq.n	800374e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	61fb      	str	r3, [r7, #28]
 800374c:	e007      	b.n	800375e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d012      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x1f8>
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	0a5b      	lsrs	r3, r3, #9
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00c      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fec1 	bl	8004510 <I2C_Slave_ADDR>
 800378e:	e066      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x218>
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	0a5b      	lsrs	r3, r3, #9
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fef5 	bl	8004598 <I2C_Slave_STOPF>
 80037ae:	e056      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037b0:	7bbb      	ldrb	r3, [r7, #14]
 80037b2:	2b21      	cmp	r3, #33	; 0x21
 80037b4:	d002      	beq.n	80037bc <HAL_I2C_EV_IRQHandler+0x224>
 80037b6:	7bbb      	ldrb	r3, [r7, #14]
 80037b8:	2b29      	cmp	r3, #41	; 0x29
 80037ba:	d125      	bne.n	8003808 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	09db      	lsrs	r3, r3, #7
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00f      	beq.n	80037e8 <HAL_I2C_EV_IRQHandler+0x250>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	0a9b      	lsrs	r3, r3, #10
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_I2C_EV_IRQHandler+0x250>
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d103      	bne.n	80037e8 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fdd7 	bl	8004394 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037e6:	e039      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d033      	beq.n	800385c <HAL_I2C_EV_IRQHandler+0x2c4>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	0a5b      	lsrs	r3, r3, #9
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d02d      	beq.n	800385c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fe04 	bl	800440e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003806:	e029      	b.n	800385c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	099b      	lsrs	r3, r3, #6
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00f      	beq.n	8003834 <HAL_I2C_EV_IRQHandler+0x29c>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	0a9b      	lsrs	r3, r3, #10
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <HAL_I2C_EV_IRQHandler+0x29c>
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	089b      	lsrs	r3, r3, #2
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d103      	bne.n	8003834 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fe0f 	bl	8004450 <I2C_SlaveReceive_RXNE>
 8003832:	e014      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00e      	beq.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0a5b      	lsrs	r3, r3, #9
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 fe3d 	bl	80044cc <I2C_SlaveReceive_BTF>
 8003852:	e004      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003854:	bf00      	nop
 8003856:	e002      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800385c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800385e:	3720      	adds	r7, #32
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	70fb      	strb	r3, [r7, #3]
 80038c0:	4613      	mov	r3, r2
 80038c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003942:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d150      	bne.n	80039fc <I2C_MasterTransmit_TXE+0xc8>
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b21      	cmp	r3, #33	; 0x21
 800395e:	d14d      	bne.n	80039fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d01d      	beq.n	80039a2 <I2C_MasterTransmit_TXE+0x6e>
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b20      	cmp	r3, #32
 800396a:	d01a      	beq.n	80039a2 <I2C_MasterTransmit_TXE+0x6e>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003972:	d016      	beq.n	80039a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003982:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2211      	movs	r2, #17
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff62 	bl	8003864 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039a0:	e060      	b.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d107      	bne.n	80039ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff ff7d 	bl	80038e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039ea:	e03b      	b.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff35 	bl	8003864 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80039fa:	e033      	b.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b21      	cmp	r3, #33	; 0x21
 8003a00:	d005      	beq.n	8003a0e <I2C_MasterTransmit_TXE+0xda>
 8003a02:	7bbb      	ldrb	r3, [r7, #14]
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d12d      	bne.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	2b22      	cmp	r3, #34	; 0x22
 8003a0c:	d12a      	bne.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d108      	bne.n	8003a2a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a26:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003a28:	e01c      	b.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b40      	cmp	r3, #64	; 0x40
 8003a34:	d103      	bne.n	8003a3e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f898 	bl	8003b6c <I2C_MemoryTransmit_TXE_BTF>
}
 8003a3c:	e012      	b.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003a62:	e7ff      	b.n	8003a64 <I2C_MasterTransmit_TXE+0x130>
 8003a64:	bf00      	nop
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b21      	cmp	r3, #33	; 0x21
 8003a84:	d165      	bne.n	8003b52 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003ab4:	e056      	b.n	8003b64 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d01d      	beq.n	8003af8 <I2C_MasterTransmit_BTF+0x8c>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b20      	cmp	r3, #32
 8003ac0:	d01a      	beq.n	8003af8 <I2C_MasterTransmit_BTF+0x8c>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ac8:	d016      	beq.n	8003af8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ad8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2211      	movs	r2, #17
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff feb7 	bl	8003864 <HAL_I2C_MasterTxCpltCallback>
}
 8003af6:	e035      	b.n	8003b64 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b06:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d107      	bne.n	8003b42 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f7ff fed2 	bl	80038e4 <HAL_I2C_MemTxCpltCallback>
}
 8003b40:	e010      	b.n	8003b64 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fe8a 	bl	8003864 <HAL_I2C_MasterTxCpltCallback>
}
 8003b50:	e008      	b.n	8003b64 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d102      	bne.n	8003b64 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f804 	bl	8003b6c <I2C_MemoryTransmit_TXE_BTF>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11d      	bne.n	8003bb8 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10b      	bne.n	8003b9c <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003b9a:	e048      	b.n	8003c2e <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	121b      	asrs	r3, r3, #8
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bb6:	e03a      	b.n	8003c2e <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d10b      	bne.n	8003bd8 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003bd6:	e02a      	b.n	8003c2e <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d126      	bne.n	8003c2e <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b22      	cmp	r3, #34	; 0x22
 8003bea:	d108      	bne.n	8003bfe <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bfa:	601a      	str	r2, [r3, #0]
}
 8003bfc:	e017      	b.n	8003c2e <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b21      	cmp	r3, #33	; 0x21
 8003c08:	d111      	bne.n	8003c2e <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	781a      	ldrb	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	1c5a      	adds	r2, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b22      	cmp	r3, #34	; 0x22
 8003c4c:	d173      	bne.n	8003d36 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d920      	bls.n	8003c9e <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691a      	ldr	r2, [r3, #16]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	1c5a      	adds	r2, r3, #1
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d154      	bne.n	8003d36 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c9a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003c9c:	e04b      	b.n	8003d36 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d047      	beq.n	8003d36 <I2C_MasterReceive_RXNE+0xfc>
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d002      	beq.n	8003cb2 <I2C_MasterReceive_RXNE+0x78>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d141      	bne.n	8003d36 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cd0:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d10a      	bne.n	8003d22 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff fdec 	bl	80038f8 <HAL_I2C_MemRxCpltCallback>
}
 8003d20:	e009      	b.n	8003d36 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2212      	movs	r2, #18
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fda1 	bl	8003878 <HAL_I2C_MasterRxCpltCallback>
}
 8003d36:	bf00      	nop
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d11b      	bne.n	8003d8e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003d8c:	e0bd      	b.n	8003f0a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d129      	bne.n	8003dec <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d00a      	beq.n	8003dc4 <I2C_MasterReceive_BTF+0x86>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d007      	beq.n	8003dc4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003dea:	e08e      	b.n	8003f0a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d176      	bne.n	8003ee4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d002      	beq.n	8003e02 <I2C_MasterReceive_BTF+0xc4>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2b10      	cmp	r3, #16
 8003e00:	d108      	bne.n	8003e14 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e019      	b.n	8003e48 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d002      	beq.n	8003e20 <I2C_MasterReceive_BTF+0xe2>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d108      	bne.n	8003e32 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e00a      	b.n	8003e48 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d007      	beq.n	8003e48 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ea2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b40      	cmp	r3, #64	; 0x40
 8003eb6:	d10a      	bne.n	8003ece <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fd16 	bl	80038f8 <HAL_I2C_MemRxCpltCallback>
}
 8003ecc:	e01d      	b.n	8003f0a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2212      	movs	r2, #18
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fccb 	bl	8003878 <HAL_I2C_MasterRxCpltCallback>
}
 8003ee2:	e012      	b.n	8003f0a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b40      	cmp	r3, #64	; 0x40
 8003f24:	d117      	bne.n	8003f56 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d109      	bne.n	8003f42 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f3e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003f40:	e067      	b.n	8004012 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	611a      	str	r2, [r3, #16]
}
 8003f54:	e05d      	b.n	8004012 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f5e:	d133      	bne.n	8003fc8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b21      	cmp	r3, #33	; 0x21
 8003f6a:	d109      	bne.n	8003f80 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	461a      	mov	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f7c:	611a      	str	r2, [r3, #16]
 8003f7e:	e008      	b.n	8003f92 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <I2C_Master_SB+0x92>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d108      	bne.n	8003fb6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d032      	beq.n	8004012 <I2C_Master_SB+0x100>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d02d      	beq.n	8004012 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fc4:	605a      	str	r2, [r3, #4]
}
 8003fc6:	e024      	b.n	8004012 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10e      	bne.n	8003fee <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	11db      	asrs	r3, r3, #7
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 0306 	and.w	r3, r3, #6
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f063 030f 	orn	r3, r3, #15
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	611a      	str	r2, [r3, #16]
}
 8003fec:	e011      	b.n	8004012 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10d      	bne.n	8004012 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	11db      	asrs	r3, r3, #7
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 0306 	and.w	r3, r3, #6
 8004004:	b2db      	uxtb	r3, r3
 8004006:	f063 030e 	orn	r3, r3, #14
 800400a:	b2da      	uxtb	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	b2da      	uxtb	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <I2C_Master_ADD10+0x24>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	2b00      	cmp	r3, #0
 8004040:	d011      	beq.n	8004066 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <I2C_Master_ADD10+0x38>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004064:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004072:	b480      	push	{r7}
 8004074:	b091      	sub	sp, #68	; 0x44
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b22      	cmp	r3, #34	; 0x22
 800409a:	f040 8169 	bne.w	8004370 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10f      	bne.n	80040c6 <I2C_Master_ADDR+0x54>
 80040a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040aa:	2b40      	cmp	r3, #64	; 0x40
 80040ac:	d10b      	bne.n	80040c6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ae:	2300      	movs	r3, #0
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	633b      	str	r3, [r7, #48]	; 0x30
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
 80040c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c4:	e160      	b.n	8004388 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11d      	bne.n	800410a <I2C_Master_ADDR+0x98>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040d6:	d118      	bne.n	800410a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d8:	2300      	movs	r3, #0
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	651a      	str	r2, [r3, #80]	; 0x50
 8004108:	e13e      	b.n	8004388 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d113      	bne.n	800413c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004114:	2300      	movs	r3, #0
 8004116:	62bb      	str	r3, [r7, #40]	; 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	62bb      	str	r3, [r7, #40]	; 0x28
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e115      	b.n	8004368 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	f040 808a 	bne.w	800425c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800414e:	d137      	bne.n	80041c0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800416e:	d113      	bne.n	8004198 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800417e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004180:	2300      	movs	r3, #0
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	e0e7      	b.n	8004368 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	623b      	str	r3, [r7, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	623b      	str	r3, [r7, #32]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	623b      	str	r3, [r7, #32]
 80041ac:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e0d3      	b.n	8004368 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d02e      	beq.n	8004224 <I2C_Master_ADDR+0x1b2>
 80041c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d02b      	beq.n	8004224 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80041cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ce:	2b12      	cmp	r3, #18
 80041d0:	d102      	bne.n	80041d8 <I2C_Master_ADDR+0x166>
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d125      	bne.n	8004224 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80041d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d00e      	beq.n	80041fc <I2C_Master_ADDR+0x18a>
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d00b      	beq.n	80041fc <I2C_Master_ADDR+0x18a>
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	d008      	beq.n	80041fc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e007      	b.n	800420c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800420a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	e0a1      	b.n	8004368 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004232:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004234:	2300      	movs	r3, #0
 8004236:	61bb      	str	r3, [r7, #24]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e085      	b.n	8004368 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d14d      	bne.n	8004302 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004268:	2b04      	cmp	r3, #4
 800426a:	d016      	beq.n	800429a <I2C_Master_ADDR+0x228>
 800426c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426e:	2b02      	cmp	r3, #2
 8004270:	d013      	beq.n	800429a <I2C_Master_ADDR+0x228>
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b10      	cmp	r3, #16
 8004276:	d010      	beq.n	800429a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004286:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e007      	b.n	80042aa <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b8:	d117      	bne.n	80042ea <I2C_Master_ADDR+0x278>
 80042ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c0:	d00b      	beq.n	80042da <I2C_Master_ADDR+0x268>
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d008      	beq.n	80042da <I2C_Master_ADDR+0x268>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d005      	beq.n	80042da <I2C_Master_ADDR+0x268>
 80042ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d002      	beq.n	80042da <I2C_Master_ADDR+0x268>
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d107      	bne.n	80042ea <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042e8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	e032      	b.n	8004368 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004310:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d117      	bne.n	8004352 <I2C_Master_ADDR+0x2e0>
 8004322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004324:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004328:	d00b      	beq.n	8004342 <I2C_Master_ADDR+0x2d0>
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	2b01      	cmp	r3, #1
 800432e:	d008      	beq.n	8004342 <I2C_Master_ADDR+0x2d0>
 8004330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004332:	2b08      	cmp	r3, #8
 8004334:	d005      	beq.n	8004342 <I2C_Master_ADDR+0x2d0>
 8004336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004338:	2b10      	cmp	r3, #16
 800433a:	d002      	beq.n	8004342 <I2C_Master_ADDR+0x2d0>
 800433c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800433e:	2b20      	cmp	r3, #32
 8004340:	d107      	bne.n	8004352 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004350:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800436e:	e00b      	b.n	8004388 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	60fb      	str	r3, [r7, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	68fb      	ldr	r3, [r7, #12]
}
 8004386:	e7ff      	b.n	8004388 <I2C_Master_ADDR+0x316>
 8004388:	bf00      	nop
 800438a:	3744      	adds	r7, #68	; 0x44
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d02b      	beq.n	8004406 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	781a      	ldrb	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d114      	bne.n	8004406 <I2C_SlaveTransmit_TXE+0x72>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b29      	cmp	r3, #41	; 0x29
 80043e0:	d111      	bne.n	8004406 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2221      	movs	r2, #33	; 0x21
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2228      	movs	r2, #40	; 0x28
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fa43 	bl	800388c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d011      	beq.n	8004444 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	781a      	ldrb	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d02c      	beq.n	80044c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b29a      	uxth	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d114      	bne.n	80044c4 <I2C_SlaveReceive_RXNE+0x74>
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b2a      	cmp	r3, #42	; 0x2a
 800449e:	d111      	bne.n	80044c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2222      	movs	r2, #34	; 0x22
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2228      	movs	r2, #40	; 0x28
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7ff f9ee 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d012      	beq.n	8004504 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	3b01      	subs	r3, #1
 80044fe:	b29a      	uxth	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800451a:	2300      	movs	r3, #0
 800451c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800452a:	2b28      	cmp	r3, #40	; 0x28
 800452c:	d127      	bne.n	800457e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800453c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800454a:	2301      	movs	r3, #1
 800454c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	09db      	lsrs	r3, r3, #7
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	81bb      	strh	r3, [r7, #12]
 8004560:	e002      	b.n	8004568 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004570:	89ba      	ldrh	r2, [r7, #12]
 8004572:	7bfb      	ldrb	r3, [r7, #15]
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff f99c 	bl	80038b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800457c:	e008      	b.n	8004590 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f06f 0202 	mvn.w	r2, #2
 8004586:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045b8:	2300      	movs	r3, #0
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	d172      	bne.n	80046dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b22      	cmp	r3, #34	; 0x22
 80045fa:	d002      	beq.n	8004602 <I2C_Slave_STOPF+0x6a>
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d135      	bne.n	800466e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0204 	orr.w	r2, r3, #4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004634:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe f938 	bl	80028b0 <HAL_DMA_GetState>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d049      	beq.n	80046da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	4a69      	ldr	r2, [pc, #420]	; (80047f0 <I2C_Slave_STOPF+0x258>)
 800464c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd ff80 	bl	8002558 <HAL_DMA_Abort_IT>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d03d      	beq.n	80046da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004668:	4610      	mov	r0, r2
 800466a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800466c:	e035      	b.n	80046da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29a      	uxth	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f043 0204 	orr.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe f902 	bl	80028b0 <HAL_DMA_GetState>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d014      	beq.n	80046dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b6:	4a4e      	ldr	r2, [pc, #312]	; (80047f0 <I2C_Slave_STOPF+0x258>)
 80046b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fd ff4a 	bl	8002558 <HAL_DMA_Abort_IT>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046d4:	4610      	mov	r0, r2
 80046d6:	4798      	blx	r3
 80046d8:	e000      	b.n	80046dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d03e      	beq.n	8004764 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d112      	bne.n	800471a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d112      	bne.n	800474e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f843 	bl	80047f8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004772:	e039      	b.n	80047e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b2a      	cmp	r3, #42	; 0x2a
 8004778:	d109      	bne.n	800478e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2228      	movs	r2, #40	; 0x28
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff f889 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b28      	cmp	r3, #40	; 0x28
 8004798:	d111      	bne.n	80047be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <I2C_Slave_STOPF+0x25c>)
 800479e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff f88a 	bl	80038d0 <HAL_I2C_ListenCpltCallback>
}
 80047bc:	e014      	b.n	80047e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	2b22      	cmp	r3, #34	; 0x22
 80047c4:	d002      	beq.n	80047cc <I2C_Slave_STOPF+0x234>
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b22      	cmp	r3, #34	; 0x22
 80047ca:	d10d      	bne.n	80047e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff f85c 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80047e8:	bf00      	nop
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	08004f6d 	.word	0x08004f6d
 80047f4:	ffff0000 	.word	0xffff0000

080047f8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b10      	cmp	r3, #16
 8004812:	d10a      	bne.n	800482a <I2C_ITError+0x32>
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	2b22      	cmp	r3, #34	; 0x22
 8004818:	d107      	bne.n	800482a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004828:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004830:	2b28      	cmp	r3, #40	; 0x28
 8004832:	d107      	bne.n	8004844 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2228      	movs	r2, #40	; 0x28
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004842:	e015      	b.n	8004870 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004852:	d006      	beq.n	8004862 <I2C_ITError+0x6a>
 8004854:	7bfb      	ldrb	r3, [r7, #15]
 8004856:	2b60      	cmp	r3, #96	; 0x60
 8004858:	d003      	beq.n	8004862 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800487a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800487e:	d162      	bne.n	8004946 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800488e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d020      	beq.n	80048e0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <I2C_ITError+0x254>)
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fe54 	bl	8002558 <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 8089 	beq.w	80049ca <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0201 	bic.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048da:	4610      	mov	r0, r2
 80048dc:	4798      	blx	r3
 80048de:	e074      	b.n	80049ca <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	4a59      	ldr	r2, [pc, #356]	; (8004a4c <I2C_ITError+0x254>)
 80048e6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7fd fe33 	bl	8002558 <HAL_DMA_Abort_IT>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d068      	beq.n	80049ca <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d10b      	bne.n	800491e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	691a      	ldr	r2, [r3, #16]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	b2d2      	uxtb	r2, r2
 8004912:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0201 	bic.w	r2, r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004940:	4610      	mov	r0, r2
 8004942:	4798      	blx	r3
 8004944:	e041      	b.n	80049ca <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b60      	cmp	r3, #96	; 0x60
 8004950:	d125      	bne.n	800499e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b40      	cmp	r3, #64	; 0x40
 800496c:	d10b      	bne.n	8004986 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fe ffc2 	bl	8003920 <HAL_I2C_AbortCpltCallback>
 800499c:	e015      	b.n	80049ca <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b40      	cmp	r3, #64	; 0x40
 80049aa:	d10b      	bne.n	80049c4 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691a      	ldr	r2, [r3, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fe ffa1 	bl	800390c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10e      	bne.n	80049f8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d113      	bne.n	8004a44 <I2C_ITError+0x24c>
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b28      	cmp	r3, #40	; 0x28
 8004a20:	d110      	bne.n	8004a44 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a0a      	ldr	r2, [pc, #40]	; (8004a50 <I2C_ITError+0x258>)
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe ff46 	bl	80038d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	08004f6d 	.word	0x08004f6d
 8004a50:	ffff0000 	.word	0xffff0000

08004a54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	4608      	mov	r0, r1
 8004a5e:	4611      	mov	r1, r2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4603      	mov	r3, r0
 8004a64:	817b      	strh	r3, [r7, #10]
 8004a66:	460b      	mov	r3, r1
 8004a68:	813b      	strh	r3, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 faed 	bl	800506a <I2C_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00c      	beq.n	8004ab0 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e05f      	b.n	8004b70 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ab0:	897b      	ldrh	r3, [r7, #10]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004abe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	492c      	ldr	r1, [pc, #176]	; (8004b78 <I2C_RequestMemoryWrite+0x124>)
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 fb26 	bl	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e04c      	b.n	8004b70 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	617b      	str	r3, [r7, #20]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	617b      	str	r3, [r7, #20]
 8004aea:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aee:	6a39      	ldr	r1, [r7, #32]
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 fb90 	bl	8005216 <I2C_WaitOnTXEFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d107      	bne.n	8004b14 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e02b      	b.n	8004b70 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b18:	88fb      	ldrh	r3, [r7, #6]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d105      	bne.n	8004b2a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b1e:	893b      	ldrh	r3, [r7, #8]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]
 8004b28:	e021      	b.n	8004b6e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b2a:	893b      	ldrh	r3, [r7, #8]
 8004b2c:	0a1b      	lsrs	r3, r3, #8
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3a:	6a39      	ldr	r1, [r7, #32]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 fb6a 	bl	8005216 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00d      	beq.n	8004b64 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2b04      	cmp	r3, #4
 8004b4e:	d107      	bne.n	8004b60 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b5e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e005      	b.n	8004b70 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b64:	893b      	ldrh	r3, [r7, #8]
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	00010002 	.word	0x00010002

08004b7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	4608      	mov	r0, r1
 8004b86:	4611      	mov	r1, r2
 8004b88:	461a      	mov	r2, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	817b      	strh	r3, [r7, #10]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	813b      	strh	r3, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 fa51 	bl	800506a <I2C_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00c      	beq.n	8004be8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0a9      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004be8:	897b      	ldrh	r3, [r7, #10]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bf6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	6a3a      	ldr	r2, [r7, #32]
 8004bfc:	4951      	ldr	r1, [pc, #324]	; (8004d44 <I2C_RequestMemoryRead+0x1c8>)
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa8a 	bl	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e096      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	6a39      	ldr	r1, [r7, #32]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 faf4 	bl	8005216 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d107      	bne.n	8004c4c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e075      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d105      	bne.n	8004c62 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c56:	893b      	ldrh	r3, [r7, #8]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]
 8004c60:	e021      	b.n	8004ca6 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	0a1b      	lsrs	r3, r3, #8
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c72:	6a39      	ldr	r1, [r7, #32]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 face 	bl	8005216 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d107      	bne.n	8004c98 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e04f      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9c:	893b      	ldrh	r3, [r7, #8]
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca8:	6a39      	ldr	r1, [r7, #32]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fab3 	bl	8005216 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00d      	beq.n	8004cd2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d107      	bne.n	8004cce <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ccc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e034      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ce0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f9bb 	bl	800506a <I2C_WaitOnFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e013      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d14:	897b      	ldrh	r3, [r7, #10]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	4906      	ldr	r1, [pc, #24]	; (8004d44 <I2C_RequestMemoryRead+0x1c8>)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f9f4 	bl	8005118 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	00010002 	.word	0x00010002

08004d48 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d64:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d7a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	2200      	movs	r2, #0
 8004d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004da2:	2b21      	cmp	r3, #33	; 0x21
 8004da4:	d007      	beq.n	8004db6 <I2C_DMAXferCplt+0x6e>
 8004da6:	7cfb      	ldrb	r3, [r7, #19]
 8004da8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004dac:	2b22      	cmp	r3, #34	; 0x22
 8004dae:	d131      	bne.n	8004e14 <I2C_DMAXferCplt+0xcc>
 8004db0:	7cbb      	ldrb	r3, [r7, #18]
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d12e      	bne.n	8004e14 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dc4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	2b29      	cmp	r3, #41	; 0x29
 8004dd0:	d10a      	bne.n	8004de8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2221      	movs	r2, #33	; 0x21
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2228      	movs	r2, #40	; 0x28
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004de0:	6978      	ldr	r0, [r7, #20]
 8004de2:	f7fe fd53 	bl	800388c <HAL_I2C_SlaveTxCpltCallback>
 8004de6:	e00c      	b.n	8004e02 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b2a      	cmp	r3, #42	; 0x2a
 8004dec:	d109      	bne.n	8004e02 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2222      	movs	r2, #34	; 0x22
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2228      	movs	r2, #40	; 0x28
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f7fe fd4f 	bl	80038a0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e10:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e12:	e06a      	b.n	8004eea <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d064      	beq.n	8004eea <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e38:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e48:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e50:	d009      	beq.n	8004e66 <I2C_DMAXferCplt+0x11e>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d006      	beq.n	8004e66 <I2C_DMAXferCplt+0x11e>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e5e:	d002      	beq.n	8004e66 <I2C_DMAXferCplt+0x11e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	d107      	bne.n	8004e76 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e74:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e84:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e94:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004ea4:	6978      	ldr	r0, [r7, #20]
 8004ea6:	f7fe fd31 	bl	800390c <HAL_I2C_ErrorCallback>
}
 8004eaa:	e01e      	b.n	8004eea <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d10a      	bne.n	8004ed6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004ece:	6978      	ldr	r0, [r7, #20]
 8004ed0:	f7fe fd12 	bl	80038f8 <HAL_I2C_MemRxCpltCallback>
}
 8004ed4:	e009      	b.n	8004eea <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2212      	movs	r2, #18
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004ee4:	6978      	ldr	r0, [r7, #20]
 8004ee6:	f7fe fcc7 	bl	8003878 <HAL_I2C_MasterRxCpltCallback>
}
 8004eea:	bf00      	nop
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7fd fcd3 	bl	80028cc <HAL_DMA_GetError>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d01b      	beq.n	8004f64 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f3a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	f043 0210 	orr.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f7fe fcd4 	bl	800390c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8e:	2200      	movs	r2, #0
 8004f90:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d10e      	bne.n	8005012 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7fe fc88 	bl	8003920 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005010:	e027      	b.n	8005062 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005012:	7afb      	ldrb	r3, [r7, #11]
 8005014:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005018:	2b28      	cmp	r3, #40	; 0x28
 800501a:	d117      	bne.n	800504c <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800503a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2228      	movs	r2, #40	; 0x28
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800504a:	e007      	b.n	800505c <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f7fe fc55 	bl	800390c <HAL_I2C_ErrorCallback>
}
 8005062:	bf00      	nop
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	603b      	str	r3, [r7, #0]
 8005076:	4613      	mov	r3, r2
 8005078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800507a:	e025      	b.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005082:	d021      	beq.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005084:	f7fd f814 	bl	80020b0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d302      	bcc.n	800509a <I2C_WaitOnFlagUntilTimeout+0x30>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d116      	bne.n	80050c8 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2220      	movs	r2, #32
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	f043 0220 	orr.w	r2, r3, #32
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e023      	b.n	8005110 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0c1b      	lsrs	r3, r3, #16
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10d      	bne.n	80050ee <I2C_WaitOnFlagUntilTimeout+0x84>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	43da      	mvns	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4013      	ands	r3, r2
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	bf0c      	ite	eq
 80050e4:	2301      	moveq	r3, #1
 80050e6:	2300      	movne	r3, #0
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	461a      	mov	r2, r3
 80050ec:	e00c      	b.n	8005108 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	43da      	mvns	r2, r3
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4013      	ands	r3, r2
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	429a      	cmp	r2, r3
 800510c:	d0b6      	beq.n	800507c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005126:	e051      	b.n	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005136:	d123      	bne.n	8005180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005146:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005150:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	f043 0204 	orr.w	r2, r3, #4
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e046      	b.n	800520e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005186:	d021      	beq.n	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005188:	f7fc ff92 	bl	80020b0 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d116      	bne.n	80051cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e020      	b.n	800520e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d10c      	bne.n	80051f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	43da      	mvns	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	e00b      	b.n	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	43da      	mvns	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d18d      	bne.n	8005128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005222:	e02d      	b.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f878 	bl	800531a <I2C_IsAcknowledgeFailed>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e02d      	b.n	8005290 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523a:	d021      	beq.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523c:	f7fc ff38 	bl	80020b0 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d116      	bne.n	8005280 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e007      	b.n	8005290 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d1ca      	bne.n	8005224 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052a4:	e02d      	b.n	8005302 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f837 	bl	800531a <I2C_IsAcknowledgeFailed>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e02d      	b.n	8005312 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052bc:	d021      	beq.n	8005302 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052be:	f7fc fef7 	bl	80020b0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d302      	bcc.n	80052d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d116      	bne.n	8005302 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	f043 0220 	orr.w	r2, r3, #32
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e007      	b.n	8005312 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b04      	cmp	r3, #4
 800530e:	d1ca      	bne.n	80052a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005330:	d11b      	bne.n	800536a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800533a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0204 	orr.w	r2, r3, #4
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005388:	d103      	bne.n	8005392 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005390:	e007      	b.n	80053a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800539a:	d102      	bne.n	80053a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2208      	movs	r2, #8
 80053a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e25b      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d075      	beq.n	80054ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053ce:	4ba3      	ldr	r3, [pc, #652]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d00c      	beq.n	80053f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053da:	4ba0      	ldr	r3, [pc, #640]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d112      	bne.n	800540c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053e6:	4b9d      	ldr	r3, [pc, #628]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d10b      	bne.n	800540c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f4:	4b99      	ldr	r3, [pc, #612]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d05b      	beq.n	80054b8 <HAL_RCC_OscConfig+0x108>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d157      	bne.n	80054b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e236      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005414:	d106      	bne.n	8005424 <HAL_RCC_OscConfig+0x74>
 8005416:	4b91      	ldr	r3, [pc, #580]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a90      	ldr	r2, [pc, #576]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	e01d      	b.n	8005460 <HAL_RCC_OscConfig+0xb0>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800542c:	d10c      	bne.n	8005448 <HAL_RCC_OscConfig+0x98>
 800542e:	4b8b      	ldr	r3, [pc, #556]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a8a      	ldr	r2, [pc, #552]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	4b88      	ldr	r3, [pc, #544]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a87      	ldr	r2, [pc, #540]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	e00b      	b.n	8005460 <HAL_RCC_OscConfig+0xb0>
 8005448:	4b84      	ldr	r3, [pc, #528]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a83      	ldr	r2, [pc, #524]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800544e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	4b81      	ldr	r3, [pc, #516]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a80      	ldr	r2, [pc, #512]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800545a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800545e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d013      	beq.n	8005490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fc fe22 	bl	80020b0 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005470:	f7fc fe1e 	bl	80020b0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e1fb      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005482:	4b76      	ldr	r3, [pc, #472]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCC_OscConfig+0xc0>
 800548e:	e014      	b.n	80054ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fc fe0e 	bl	80020b0 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005498:	f7fc fe0a 	bl	80020b0 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	; 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e1e7      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054aa:	4b6c      	ldr	r3, [pc, #432]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f0      	bne.n	8005498 <HAL_RCC_OscConfig+0xe8>
 80054b6:	e000      	b.n	80054ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d063      	beq.n	800558e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054c6:	4b65      	ldr	r3, [pc, #404]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d2:	4b62      	ldr	r3, [pc, #392]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d11c      	bne.n	8005518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054de:	4b5f      	ldr	r3, [pc, #380]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d116      	bne.n	8005518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ea:	4b5c      	ldr	r3, [pc, #368]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d005      	beq.n	8005502 <HAL_RCC_OscConfig+0x152>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e1bb      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005502:	4b56      	ldr	r3, [pc, #344]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	00db      	lsls	r3, r3, #3
 8005510:	4952      	ldr	r1, [pc, #328]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005512:	4313      	orrs	r3, r2
 8005514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005516:	e03a      	b.n	800558e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d020      	beq.n	8005562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005520:	4b4f      	ldr	r3, [pc, #316]	; (8005660 <HAL_RCC_OscConfig+0x2b0>)
 8005522:	2201      	movs	r2, #1
 8005524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005526:	f7fc fdc3 	bl	80020b0 <HAL_GetTick>
 800552a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800552c:	e008      	b.n	8005540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800552e:	f7fc fdbf 	bl	80020b0 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e19c      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005540:	4b46      	ldr	r3, [pc, #280]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d0f0      	beq.n	800552e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800554c:	4b43      	ldr	r3, [pc, #268]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	4940      	ldr	r1, [pc, #256]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800555c:	4313      	orrs	r3, r2
 800555e:	600b      	str	r3, [r1, #0]
 8005560:	e015      	b.n	800558e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005562:	4b3f      	ldr	r3, [pc, #252]	; (8005660 <HAL_RCC_OscConfig+0x2b0>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005568:	f7fc fda2 	bl	80020b0 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005570:	f7fc fd9e 	bl	80020b0 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b02      	cmp	r3, #2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e17b      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005582:	4b36      	ldr	r3, [pc, #216]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1f0      	bne.n	8005570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d030      	beq.n	80055fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d016      	beq.n	80055d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055a2:	4b30      	ldr	r3, [pc, #192]	; (8005664 <HAL_RCC_OscConfig+0x2b4>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a8:	f7fc fd82 	bl	80020b0 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b0:	f7fc fd7e 	bl	80020b0 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e15b      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c2:	4b26      	ldr	r3, [pc, #152]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d0f0      	beq.n	80055b0 <HAL_RCC_OscConfig+0x200>
 80055ce:	e015      	b.n	80055fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d0:	4b24      	ldr	r3, [pc, #144]	; (8005664 <HAL_RCC_OscConfig+0x2b4>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d6:	f7fc fd6b 	bl	80020b0 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055de:	f7fc fd67 	bl	80020b0 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e144      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	4b1a      	ldr	r3, [pc, #104]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a0 	beq.w	800574a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560e:	4b13      	ldr	r3, [pc, #76]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	4b0f      	ldr	r3, [pc, #60]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a0e      	ldr	r2, [pc, #56]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <HAL_RCC_OscConfig+0x2ac>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <HAL_RCC_OscConfig+0x2b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d121      	bne.n	800568a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005646:	4b08      	ldr	r3, [pc, #32]	; (8005668 <HAL_RCC_OscConfig+0x2b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a07      	ldr	r2, [pc, #28]	; (8005668 <HAL_RCC_OscConfig+0x2b8>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005652:	f7fc fd2d 	bl	80020b0 <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	e011      	b.n	800567e <HAL_RCC_OscConfig+0x2ce>
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800
 8005660:	42470000 	.word	0x42470000
 8005664:	42470e80 	.word	0x42470e80
 8005668:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800566c:	f7fc fd20 	bl	80020b0 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e0fd      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567e:	4b81      	ldr	r3, [pc, #516]	; (8005884 <HAL_RCC_OscConfig+0x4d4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d106      	bne.n	80056a0 <HAL_RCC_OscConfig+0x2f0>
 8005692:	4b7d      	ldr	r3, [pc, #500]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a7c      	ldr	r2, [pc, #496]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6713      	str	r3, [r2, #112]	; 0x70
 800569e:	e01c      	b.n	80056da <HAL_RCC_OscConfig+0x32a>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b05      	cmp	r3, #5
 80056a6:	d10c      	bne.n	80056c2 <HAL_RCC_OscConfig+0x312>
 80056a8:	4b77      	ldr	r3, [pc, #476]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a76      	ldr	r2, [pc, #472]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056ae:	f043 0304 	orr.w	r3, r3, #4
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
 80056b4:	4b74      	ldr	r3, [pc, #464]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	4a73      	ldr	r2, [pc, #460]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	6713      	str	r3, [r2, #112]	; 0x70
 80056c0:	e00b      	b.n	80056da <HAL_RCC_OscConfig+0x32a>
 80056c2:	4b71      	ldr	r3, [pc, #452]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	4a70      	ldr	r2, [pc, #448]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056c8:	f023 0301 	bic.w	r3, r3, #1
 80056cc:	6713      	str	r3, [r2, #112]	; 0x70
 80056ce:	4b6e      	ldr	r3, [pc, #440]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d2:	4a6d      	ldr	r2, [pc, #436]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80056d4:	f023 0304 	bic.w	r3, r3, #4
 80056d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d015      	beq.n	800570e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056e2:	f7fc fce5 	bl	80020b0 <HAL_GetTick>
 80056e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e8:	e00a      	b.n	8005700 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ea:	f7fc fce1 	bl	80020b0 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e0bc      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005700:	4b61      	ldr	r3, [pc, #388]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ee      	beq.n	80056ea <HAL_RCC_OscConfig+0x33a>
 800570c:	e014      	b.n	8005738 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800570e:	f7fc fccf 	bl	80020b0 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005714:	e00a      	b.n	800572c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005716:	f7fc fccb 	bl	80020b0 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f241 3288 	movw	r2, #5000	; 0x1388
 8005724:	4293      	cmp	r3, r2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0a6      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800572c:	4b56      	ldr	r3, [pc, #344]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ee      	bne.n	8005716 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d105      	bne.n	800574a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800573e:	4b52      	ldr	r3, [pc, #328]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	4a51      	ldr	r2, [pc, #324]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 8092 	beq.w	8005878 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005754:	4b4c      	ldr	r3, [pc, #304]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 030c 	and.w	r3, r3, #12
 800575c:	2b08      	cmp	r3, #8
 800575e:	d05c      	beq.n	800581a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d141      	bne.n	80057ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_RCC_OscConfig+0x4dc>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576e:	f7fc fc9f 	bl	80020b0 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005774:	e008      	b.n	8005788 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005776:	f7fc fc9b 	bl	80020b0 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e078      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005788:	4b3f      	ldr	r3, [pc, #252]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69da      	ldr	r2, [r3, #28]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a2:	019b      	lsls	r3, r3, #6
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	3b01      	subs	r3, #1
 80057ae:	041b      	lsls	r3, r3, #16
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	4933      	ldr	r1, [pc, #204]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057be:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCC_OscConfig+0x4dc>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fc fc74 	bl	80020b0 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fc fc70 	bl	80020b0 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e04d      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057de:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x41c>
 80057ea:	e045      	b.n	8005878 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ec:	4b27      	ldr	r3, [pc, #156]	; (800588c <HAL_RCC_OscConfig+0x4dc>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f2:	f7fc fc5d 	bl	80020b0 <HAL_GetTick>
 80057f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fa:	f7fc fc59 	bl	80020b0 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b02      	cmp	r3, #2
 8005806:	d901      	bls.n	800580c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e036      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1f0      	bne.n	80057fa <HAL_RCC_OscConfig+0x44a>
 8005818:	e02e      	b.n	8005878 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e029      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005826:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_RCC_OscConfig+0x4d8>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	429a      	cmp	r2, r3
 8005838:	d11c      	bne.n	8005874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005844:	429a      	cmp	r2, r3
 8005846:	d115      	bne.n	8005874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800584e:	4013      	ands	r3, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005854:	4293      	cmp	r3, r2
 8005856:	d10d      	bne.n	8005874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d106      	bne.n	8005874 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40007000 	.word	0x40007000
 8005888:	40023800 	.word	0x40023800
 800588c:	42470060 	.word	0x42470060

08005890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0cc      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d90c      	bls.n	80058cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b65      	ldr	r3, [pc, #404]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ba:	4b63      	ldr	r3, [pc, #396]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d001      	beq.n	80058cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0b8      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d020      	beq.n	800591a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e4:	4b59      	ldr	r3, [pc, #356]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4a58      	ldr	r2, [pc, #352]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058fc:	4b53      	ldr	r3, [pc, #332]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	4a52      	ldr	r2, [pc, #328]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005908:	4b50      	ldr	r3, [pc, #320]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	494d      	ldr	r1, [pc, #308]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	4313      	orrs	r3, r2
 8005918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d044      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592e:	4b47      	ldr	r3, [pc, #284]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d119      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e07f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d003      	beq.n	800594e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800594a:	2b03      	cmp	r3, #3
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	4b3f      	ldr	r3, [pc, #252]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e06f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595e:	4b3b      	ldr	r3, [pc, #236]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e067      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b37      	ldr	r3, [pc, #220]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4934      	ldr	r1, [pc, #208]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005980:	f7fc fb96 	bl	80020b0 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fc fb92 	bl	80020b0 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e04f      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b2b      	ldr	r3, [pc, #172]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b0:	4b25      	ldr	r3, [pc, #148]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d20c      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b22      	ldr	r3, [pc, #136]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b20      	ldr	r3, [pc, #128]	; (8005a48 <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e032      	b.n	8005a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e4:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	4916      	ldr	r1, [pc, #88]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a02:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	490e      	ldr	r1, [pc, #56]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a16:	f000 f821 	bl	8005a5c <HAL_RCC_GetSysClockFreq>
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	091b      	lsrs	r3, r3, #4
 8005a22:	f003 030f 	and.w	r3, r3, #15
 8005a26:	4a0a      	ldr	r2, [pc, #40]	; (8005a50 <HAL_RCC_ClockConfig+0x1c0>)
 8005a28:	5cd3      	ldrb	r3, [r2, r3]
 8005a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a2e:	4a09      	ldr	r2, [pc, #36]	; (8005a54 <HAL_RCC_ClockConfig+0x1c4>)
 8005a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a32:	4b09      	ldr	r3, [pc, #36]	; (8005a58 <HAL_RCC_ClockConfig+0x1c8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fc faf6 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40023c00 	.word	0x40023c00
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	080089a4 	.word	0x080089a4
 8005a54:	20000000 	.word	0x20000000
 8005a58:	20000004 	.word	0x20000004

08005a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	607b      	str	r3, [r7, #4]
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a72:	4b63      	ldr	r3, [pc, #396]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d007      	beq.n	8005a8e <HAL_RCC_GetSysClockFreq+0x32>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d008      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x38>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f040 80b4 	bne.w	8005bf0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a88:	4b5e      	ldr	r3, [pc, #376]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005a8a:	60bb      	str	r3, [r7, #8]
       break;
 8005a8c:	e0b3      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8e:	4b5e      	ldr	r3, [pc, #376]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005a90:	60bb      	str	r3, [r7, #8]
      break;
 8005a92:	e0b0      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a94:	4b5a      	ldr	r3, [pc, #360]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a9c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a9e:	4b58      	ldr	r3, [pc, #352]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d04a      	beq.n	8005b40 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aaa:	4b55      	ldr	r3, [pc, #340]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	f04f 0400 	mov.w	r4, #0
 8005ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	ea03 0501 	and.w	r5, r3, r1
 8005ac0:	ea04 0602 	and.w	r6, r4, r2
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	f04f 0400 	mov.w	r4, #0
 8005ad0:	0154      	lsls	r4, r2, #5
 8005ad2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005ad6:	014b      	lsls	r3, r1, #5
 8005ad8:	4619      	mov	r1, r3
 8005ada:	4622      	mov	r2, r4
 8005adc:	1b49      	subs	r1, r1, r5
 8005ade:	eb62 0206 	sbc.w	r2, r2, r6
 8005ae2:	f04f 0300 	mov.w	r3, #0
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	0194      	lsls	r4, r2, #6
 8005aec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005af0:	018b      	lsls	r3, r1, #6
 8005af2:	1a5b      	subs	r3, r3, r1
 8005af4:	eb64 0402 	sbc.w	r4, r4, r2
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	00e2      	lsls	r2, r4, #3
 8005b02:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b06:	00d9      	lsls	r1, r3, #3
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4614      	mov	r4, r2
 8005b0c:	195b      	adds	r3, r3, r5
 8005b0e:	eb44 0406 	adc.w	r4, r4, r6
 8005b12:	f04f 0100 	mov.w	r1, #0
 8005b16:	f04f 0200 	mov.w	r2, #0
 8005b1a:	0262      	lsls	r2, r4, #9
 8005b1c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005b20:	0259      	lsls	r1, r3, #9
 8005b22:	460b      	mov	r3, r1
 8005b24:	4614      	mov	r4, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	4621      	mov	r1, r4
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f04f 0400 	mov.w	r4, #0
 8005b30:	461a      	mov	r2, r3
 8005b32:	4623      	mov	r3, r4
 8005b34:	f7fa fb9c 	bl	8000270 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	e049      	b.n	8005bd4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b40:	4b2f      	ldr	r3, [pc, #188]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	099b      	lsrs	r3, r3, #6
 8005b46:	f04f 0400 	mov.w	r4, #0
 8005b4a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	ea03 0501 	and.w	r5, r3, r1
 8005b56:	ea04 0602 	and.w	r6, r4, r2
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	4632      	mov	r2, r6
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	f04f 0400 	mov.w	r4, #0
 8005b66:	0154      	lsls	r4, r2, #5
 8005b68:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b6c:	014b      	lsls	r3, r1, #5
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4622      	mov	r2, r4
 8005b72:	1b49      	subs	r1, r1, r5
 8005b74:	eb62 0206 	sbc.w	r2, r2, r6
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f04f 0400 	mov.w	r4, #0
 8005b80:	0194      	lsls	r4, r2, #6
 8005b82:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b86:	018b      	lsls	r3, r1, #6
 8005b88:	1a5b      	subs	r3, r3, r1
 8005b8a:	eb64 0402 	sbc.w	r4, r4, r2
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	00e2      	lsls	r2, r4, #3
 8005b98:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b9c:	00d9      	lsls	r1, r3, #3
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	195b      	adds	r3, r3, r5
 8005ba4:	eb44 0406 	adc.w	r4, r4, r6
 8005ba8:	f04f 0100 	mov.w	r1, #0
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	02a2      	lsls	r2, r4, #10
 8005bb2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005bb6:	0299      	lsls	r1, r3, #10
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4614      	mov	r4, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4623      	mov	r3, r4
 8005bca:	f7fa fb51 	bl	8000270 <__aeabi_uldivmod>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	0c1b      	lsrs	r3, r3, #16
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	3301      	adds	r3, #1
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bec:	60bb      	str	r3, [r7, #8]
      break;
 8005bee:	e002      	b.n	8005bf6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005bf2:	60bb      	str	r3, [r7, #8]
      break;
 8005bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c00:	40023800 	.word	0x40023800
 8005c04:	00f42400 	.word	0x00f42400
 8005c08:	007a1200 	.word	0x007a1200

08005c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c10:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000000 	.word	0x20000000

08005c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c28:	f7ff fff0 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	0a9b      	lsrs	r3, r3, #10
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c3a:	5cd3      	ldrb	r3, [r2, r3]
 8005c3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40023800 	.word	0x40023800
 8005c48:	080089b4 	.word	0x080089b4

08005c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c50:	f7ff ffdc 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c54:	4601      	mov	r1, r0
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	0b5b      	lsrs	r3, r3, #13
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	4a03      	ldr	r2, [pc, #12]	; (8005c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40023800 	.word	0x40023800
 8005c70:	080089b4 	.word	0x080089b4

08005c74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b086      	sub	sp, #24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d035      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c9c:	4b62      	ldr	r3, [pc, #392]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ca2:	f7fc fa05 	bl	80020b0 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005caa:	f7fc fa01 	bl	80020b0 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e0b0      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cbc:	4b5b      	ldr	r3, [pc, #364]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1f0      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	019a      	lsls	r2, r3, #6
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	071b      	lsls	r3, r3, #28
 8005cd4:	4955      	ldr	r1, [pc, #340]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005cdc:	4b52      	ldr	r3, [pc, #328]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ce2:	f7fc f9e5 	bl	80020b0 <HAL_GetTick>
 8005ce6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ce8:	e008      	b.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cea:	f7fc f9e1 	bl	80020b0 <HAL_GetTick>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e090      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cfc:	4b4b      	ldr	r3, [pc, #300]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f0      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8083 	beq.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	4b44      	ldr	r3, [pc, #272]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	4a43      	ldr	r2, [pc, #268]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6413      	str	r3, [r2, #64]	; 0x40
 8005d26:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	60fb      	str	r3, [r7, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d32:	4b3f      	ldr	r3, [pc, #252]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a3e      	ldr	r2, [pc, #248]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d3e:	f7fc f9b7 	bl	80020b0 <HAL_GetTick>
 8005d42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005d46:	f7fc f9b3 	bl	80020b0 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e062      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d58:	4b35      	ldr	r3, [pc, #212]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d64:	4b31      	ldr	r3, [pc, #196]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d02f      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d028      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d82:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d8c:	4b29      	ldr	r3, [pc, #164]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d8e:	2201      	movs	r2, #1
 8005d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d92:	4b28      	ldr	r3, [pc, #160]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005d98:	4a24      	ldr	r2, [pc, #144]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005d9e:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d114      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fc f981 	bl	80020b0 <HAL_GetTick>
 8005dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005db0:	e00a      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7fc f97d 	bl	80020b0 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e02a      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dc8:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0ee      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005de0:	d10d      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df6:	490d      	ldr	r1, [pc, #52]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	608b      	str	r3, [r1, #8]
 8005dfc:	e005      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e08:	6093      	str	r3, [r2, #8]
 8005e0a:	4b08      	ldr	r3, [pc, #32]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	4905      	ldr	r1, [pc, #20]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	42470068 	.word	0x42470068
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40007000 	.word	0x40007000
 8005e34:	42470e40 	.word	0x42470e40

08005e38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e083      	b.n	8005f52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	7f5b      	ldrb	r3, [r3, #29]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d105      	bne.n	8005e60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7fb fcea 	bl	8001834 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	22ca      	movs	r2, #202	; 0xca
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2253      	movs	r2, #83	; 0x53
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f897 	bl	8005faa <RTC_EnterInitMode>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d008      	beq.n	8005e94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	22ff      	movs	r2, #255	; 0xff
 8005e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e05e      	b.n	8005f52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6899      	ldr	r1, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68d2      	ldr	r2, [r2, #12]
 8005ece:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6919      	ldr	r1, [r3, #16]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	041a      	lsls	r2, r3, #16
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10e      	bne.n	8005f20 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f829 	bl	8005f5a <HAL_RTC_WaitForSynchro>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d008      	beq.n	8005f20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	22ff      	movs	r2, #255	; 0xff
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e018      	b.n	8005f52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	22ff      	movs	r2, #255	; 0xff
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
  }
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f76:	f7fc f89b 	bl	80020b0 <HAL_GetTick>
 8005f7a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f7c:	e009      	b.n	8005f92 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005f7e:	f7fc f897 	bl	80020b0 <HAL_GetTick>
 8005f82:	4602      	mov	r2, r0
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f8c:	d901      	bls.n	8005f92 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e007      	b.n	8005fa2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0320 	and.w	r3, r3, #32
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ee      	beq.n	8005f7e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d119      	bne.n	8005ff8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005fce:	f7fc f86f 	bl	80020b0 <HAL_GetTick>
 8005fd2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005fd4:	e009      	b.n	8005fea <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005fd6:	f7fc f86b 	bl	80020b0 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe4:	d901      	bls.n	8005fea <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e007      	b.n	8005ffa <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0ee      	beq.n	8005fd6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b082      	sub	sp, #8
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e01d      	b.n	8006050 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7fb fc19 	bl	8001860 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2202      	movs	r2, #2
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3304      	adds	r3, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 fc45 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e01d      	b.n	80060a6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f815 	bl	80060ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f000 fc1a 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2201      	movs	r2, #1
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fee4 	bl	8006ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a15      	ldr	r2, [pc, #84]	; (8006138 <HAL_TIM_OC_Start+0x74>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_TIM_OC_Start+0x2c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a14      	ldr	r2, [pc, #80]	; (800613c <HAL_TIM_OC_Start+0x78>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d101      	bne.n	80060f4 <HAL_TIM_OC_Start+0x30>
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_TIM_OC_Start+0x32>
 80060f4:	2300      	movs	r3, #0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006108:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0307 	and.w	r3, r3, #7
 8006114:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b06      	cmp	r3, #6
 800611a:	d007      	beq.n	800612c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40010000 	.word	0x40010000
 800613c:	40010400 	.word	0x40010400

08006140 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d841      	bhi.n	80061d4 <HAL_TIM_OC_Start_IT+0x94>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <HAL_TIM_OC_Start_IT+0x18>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	0800618d 	.word	0x0800618d
 800615c:	080061d5 	.word	0x080061d5
 8006160:	080061d5 	.word	0x080061d5
 8006164:	080061d5 	.word	0x080061d5
 8006168:	0800619f 	.word	0x0800619f
 800616c:	080061d5 	.word	0x080061d5
 8006170:	080061d5 	.word	0x080061d5
 8006174:	080061d5 	.word	0x080061d5
 8006178:	080061b1 	.word	0x080061b1
 800617c:	080061d5 	.word	0x080061d5
 8006180:	080061d5 	.word	0x080061d5
 8006184:	080061d5 	.word	0x080061d5
 8006188:	080061c3 	.word	0x080061c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0202 	orr.w	r2, r2, #2
 800619a:	60da      	str	r2, [r3, #12]
      break;
 800619c:	e01b      	b.n	80061d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0204 	orr.w	r2, r2, #4
 80061ac:	60da      	str	r2, [r3, #12]
      break;
 80061ae:	e012      	b.n	80061d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0208 	orr.w	r2, r2, #8
 80061be:	60da      	str	r2, [r3, #12]
      break;
 80061c0:	e009      	b.n	80061d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0210 	orr.w	r2, r2, #16
 80061d0:	60da      	str	r2, [r3, #12]
      break;
 80061d2:	e000      	b.n	80061d6 <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80061d4:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2201      	movs	r2, #1
 80061dc:	6839      	ldr	r1, [r7, #0]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fe60 	bl	8006ea4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a15      	ldr	r2, [pc, #84]	; (8006240 <HAL_TIM_OC_Start_IT+0x100>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d004      	beq.n	80061f8 <HAL_TIM_OC_Start_IT+0xb8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a14      	ldr	r2, [pc, #80]	; (8006244 <HAL_TIM_OC_Start_IT+0x104>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d101      	bne.n	80061fc <HAL_TIM_OC_Start_IT+0xbc>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <HAL_TIM_OC_Start_IT+0xbe>
 80061fc:	2300      	movs	r3, #0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b06      	cmp	r3, #6
 8006222:	d007      	beq.n	8006234 <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40010000 	.word	0x40010000
 8006244:	40010400 	.word	0x40010400

08006248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e01d      	b.n	8006296 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f815 	bl	800629e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3304      	adds	r3, #4
 8006284:	4619      	mov	r1, r3
 8006286:	4610      	mov	r0, r2
 8006288:	f000 fb22 	bl	80068d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b082      	sub	sp, #8
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d122      	bne.n	800630e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d11b      	bne.n	800630e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f06f 0202 	mvn.w	r2, #2
 80062de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 facc 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 80062fa:	e005      	b.n	8006308 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fa faa1 	bl	8000844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 facf 	bl	80068a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b04      	cmp	r3, #4
 800631a:	d122      	bne.n	8006362 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	2b04      	cmp	r3, #4
 8006328:	d11b      	bne.n	8006362 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f06f 0204 	mvn.w	r2, #4
 8006332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 faa2 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 800634e:	e005      	b.n	800635c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f7fa fa77 	bl	8000844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 faa5 	bl	80068a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b08      	cmp	r3, #8
 800636e:	d122      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b08      	cmp	r3, #8
 800637c:	d11b      	bne.n	80063b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f06f 0208 	mvn.w	r2, #8
 8006386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2204      	movs	r2, #4
 800638c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f003 0303 	and.w	r3, r3, #3
 8006398:	2b00      	cmp	r3, #0
 800639a:	d003      	beq.n	80063a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fa78 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 80063a2:	e005      	b.n	80063b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fa fa4d 	bl	8000844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa7b 	bl	80068a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b10      	cmp	r3, #16
 80063c2:	d122      	bne.n	800640a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b10      	cmp	r3, #16
 80063d0:	d11b      	bne.n	800640a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f06f 0210 	mvn.w	r2, #16
 80063da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2208      	movs	r2, #8
 80063e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa4e 	bl	8006892 <HAL_TIM_IC_CaptureCallback>
 80063f6:	e005      	b.n	8006404 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fa fa23 	bl	8000844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa51 	bl	80068a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b01      	cmp	r3, #1
 8006416:	d10e      	bne.n	8006436 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b01      	cmp	r3, #1
 8006424:	d107      	bne.n	8006436 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f06f 0201 	mvn.w	r2, #1
 800642e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa24 	bl	800687e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d10e      	bne.n	8006462 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d107      	bne.n	8006462 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fe1f 	bl	80070a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800646c:	2b40      	cmp	r3, #64	; 0x40
 800646e:	d10e      	bne.n	800648e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800647a:	2b40      	cmp	r3, #64	; 0x40
 800647c:	d107      	bne.n	800648e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fa16 	bl	80068ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b20      	cmp	r3, #32
 800649a:	d10e      	bne.n	80064ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d107      	bne.n	80064ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f06f 0220 	mvn.w	r2, #32
 80064b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fde9 	bl	800708c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d101      	bne.n	80064de <HAL_TIM_OC_ConfigChannel+0x1a>
 80064da:	2302      	movs	r3, #2
 80064dc:	e04e      	b.n	800657c <HAL_TIM_OC_ConfigChannel+0xb8>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2202      	movs	r2, #2
 80064ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b0c      	cmp	r3, #12
 80064f2:	d839      	bhi.n	8006568 <HAL_TIM_OC_ConfigChannel+0xa4>
 80064f4:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HAL_TIM_OC_ConfigChannel+0x38>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006531 	.word	0x08006531
 8006500:	08006569 	.word	0x08006569
 8006504:	08006569 	.word	0x08006569
 8006508:	08006569 	.word	0x08006569
 800650c:	0800653f 	.word	0x0800653f
 8006510:	08006569 	.word	0x08006569
 8006514:	08006569 	.word	0x08006569
 8006518:	08006569 	.word	0x08006569
 800651c:	0800654d 	.word	0x0800654d
 8006520:	08006569 	.word	0x08006569
 8006524:	08006569 	.word	0x08006569
 8006528:	08006569 	.word	0x08006569
 800652c:	0800655b 	.word	0x0800655b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fa6a 	bl	8006a10 <TIM_OC1_SetConfig>
      break;
 800653c:	e015      	b.n	800656a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f000 fad3 	bl	8006af0 <TIM_OC2_SetConfig>
      break;
 800654a:	e00e      	b.n	800656a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fb42 	bl	8006bdc <TIM_OC3_SetConfig>
      break;
 8006558:	e007      	b.n	800656a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 fbaf 	bl	8006cc4 <TIM_OC4_SetConfig>
      break;
 8006566:	e000      	b.n	800656a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006568:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800659a:	2302      	movs	r3, #2
 800659c:	e0b4      	b.n	8006708 <HAL_TIM_PWM_ConfigChannel+0x184>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b0c      	cmp	r3, #12
 80065b2:	f200 809f 	bhi.w	80066f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80065b6:	a201      	add	r2, pc, #4	; (adr r2, 80065bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80065b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065bc:	080065f1 	.word	0x080065f1
 80065c0:	080066f5 	.word	0x080066f5
 80065c4:	080066f5 	.word	0x080066f5
 80065c8:	080066f5 	.word	0x080066f5
 80065cc:	08006631 	.word	0x08006631
 80065d0:	080066f5 	.word	0x080066f5
 80065d4:	080066f5 	.word	0x080066f5
 80065d8:	080066f5 	.word	0x080066f5
 80065dc:	08006673 	.word	0x08006673
 80065e0:	080066f5 	.word	0x080066f5
 80065e4:	080066f5 	.word	0x080066f5
 80065e8:	080066f5 	.word	0x080066f5
 80065ec:	080066b3 	.word	0x080066b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68b9      	ldr	r1, [r7, #8]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fa0a 	bl	8006a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699a      	ldr	r2, [r3, #24]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0208 	orr.w	r2, r2, #8
 800660a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0204 	bic.w	r2, r2, #4
 800661a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6999      	ldr	r1, [r3, #24]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	691a      	ldr	r2, [r3, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	619a      	str	r2, [r3, #24]
      break;
 800662e:	e062      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fa5a 	bl	8006af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800664a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6999      	ldr	r1, [r3, #24]
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	021a      	lsls	r2, r3, #8
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	619a      	str	r2, [r3, #24]
      break;
 8006670:	e041      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	4618      	mov	r0, r3
 800667a:	f000 faaf 	bl	8006bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	69da      	ldr	r2, [r3, #28]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f042 0208 	orr.w	r2, r2, #8
 800668c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0204 	bic.w	r2, r2, #4
 800669c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69d9      	ldr	r1, [r3, #28]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	61da      	str	r2, [r3, #28]
      break;
 80066b0:	e021      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fb03 	bl	8006cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69da      	ldr	r2, [r3, #28]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69d9      	ldr	r1, [r3, #28]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	021a      	lsls	r2, r3, #8
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	61da      	str	r2, [r3, #28]
      break;
 80066f2:	e000      	b.n	80066f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80066f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d101      	bne.n	8006728 <HAL_TIM_ConfigClockSource+0x18>
 8006724:	2302      	movs	r3, #2
 8006726:	e0a6      	b.n	8006876 <HAL_TIM_ConfigClockSource+0x166>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800674e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	d067      	beq.n	8006830 <HAL_TIM_ConfigClockSource+0x120>
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d80b      	bhi.n	800677c <HAL_TIM_ConfigClockSource+0x6c>
 8006764:	2b10      	cmp	r3, #16
 8006766:	d073      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x140>
 8006768:	2b10      	cmp	r3, #16
 800676a:	d802      	bhi.n	8006772 <HAL_TIM_ConfigClockSource+0x62>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d06f      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006770:	e078      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006772:	2b20      	cmp	r3, #32
 8006774:	d06c      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x140>
 8006776:	2b30      	cmp	r3, #48	; 0x30
 8006778:	d06a      	beq.n	8006850 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800677a:	e073      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800677c:	2b70      	cmp	r3, #112	; 0x70
 800677e:	d00d      	beq.n	800679c <HAL_TIM_ConfigClockSource+0x8c>
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d804      	bhi.n	800678e <HAL_TIM_ConfigClockSource+0x7e>
 8006784:	2b50      	cmp	r3, #80	; 0x50
 8006786:	d033      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0xe0>
 8006788:	2b60      	cmp	r3, #96	; 0x60
 800678a:	d041      	beq.n	8006810 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800678c:	e06a      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d066      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x152>
 8006794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006798:	d017      	beq.n	80067ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800679a:	e063      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6818      	ldr	r0, [r3, #0]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	6899      	ldr	r1, [r3, #8]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685a      	ldr	r2, [r3, #4]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f000 fb5a 	bl	8006e64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	609a      	str	r2, [r3, #8]
      break;
 80067c8:	e04c      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6899      	ldr	r1, [r3, #8]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f000 fb43 	bl	8006e64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689a      	ldr	r2, [r3, #8]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067ec:	609a      	str	r2, [r3, #8]
      break;
 80067ee:	e039      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6859      	ldr	r1, [r3, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	461a      	mov	r2, r3
 80067fe:	f000 fab7 	bl	8006d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2150      	movs	r1, #80	; 0x50
 8006808:	4618      	mov	r0, r3
 800680a:	f000 fb10 	bl	8006e2e <TIM_ITRx_SetConfig>
      break;
 800680e:	e029      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	461a      	mov	r2, r3
 800681e:	f000 fad6 	bl	8006dce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2160      	movs	r1, #96	; 0x60
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fb00 	bl	8006e2e <TIM_ITRx_SetConfig>
      break;
 800682e:	e019      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	6859      	ldr	r1, [r3, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	461a      	mov	r2, r3
 800683e:	f000 fa97 	bl	8006d70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2140      	movs	r1, #64	; 0x40
 8006848:	4618      	mov	r0, r3
 800684a:	f000 faf0 	bl	8006e2e <TIM_ITRx_SetConfig>
      break;
 800684e:	e009      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f000 fae7 	bl	8006e2e <TIM_ITRx_SetConfig>
      break;
 8006860:	e000      	b.n	8006864 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a40      	ldr	r2, [pc, #256]	; (80069e4 <TIM_Base_SetConfig+0x114>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d013      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ee:	d00f      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3d      	ldr	r2, [pc, #244]	; (80069e8 <TIM_Base_SetConfig+0x118>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00b      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a3c      	ldr	r2, [pc, #240]	; (80069ec <TIM_Base_SetConfig+0x11c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d007      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3b      	ldr	r2, [pc, #236]	; (80069f0 <TIM_Base_SetConfig+0x120>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d003      	beq.n	8006910 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a3a      	ldr	r2, [pc, #232]	; (80069f4 <TIM_Base_SetConfig+0x124>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d108      	bne.n	8006922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a2f      	ldr	r2, [pc, #188]	; (80069e4 <TIM_Base_SetConfig+0x114>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d02b      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006930:	d027      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <TIM_Base_SetConfig+0x118>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d023      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2b      	ldr	r2, [pc, #172]	; (80069ec <TIM_Base_SetConfig+0x11c>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01f      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2a      	ldr	r2, [pc, #168]	; (80069f0 <TIM_Base_SetConfig+0x120>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01b      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <TIM_Base_SetConfig+0x124>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d017      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <TIM_Base_SetConfig+0x128>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a27      	ldr	r2, [pc, #156]	; (80069fc <TIM_Base_SetConfig+0x12c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00f      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <TIM_Base_SetConfig+0x130>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00b      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a25      	ldr	r2, [pc, #148]	; (8006a04 <TIM_Base_SetConfig+0x134>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d007      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a24      	ldr	r2, [pc, #144]	; (8006a08 <TIM_Base_SetConfig+0x138>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d003      	beq.n	8006982 <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <TIM_Base_SetConfig+0x13c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d108      	bne.n	8006994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a0a      	ldr	r2, [pc, #40]	; (80069e4 <TIM_Base_SetConfig+0x114>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_Base_SetConfig+0xf8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <TIM_Base_SetConfig+0x124>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d103      	bne.n	80069d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	691a      	ldr	r2, [r3, #16]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	615a      	str	r2, [r3, #20]
}
 80069d6:	bf00      	nop
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40010000 	.word	0x40010000
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40010400 	.word	0x40010400
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400
 8006a00:	40014800 	.word	0x40014800
 8006a04:	40001800 	.word	0x40001800
 8006a08:	40001c00 	.word	0x40001c00
 8006a0c:	40002000 	.word	0x40002000

08006a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	f023 0201 	bic.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a1b      	ldr	r3, [r3, #32]
 8006a2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0303 	bic.w	r3, r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	f023 0302 	bic.w	r3, r3, #2
 8006a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a20      	ldr	r2, [pc, #128]	; (8006ae8 <TIM_OC1_SetConfig+0xd8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC1_SetConfig+0x64>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <TIM_OC1_SetConfig+0xdc>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10c      	bne.n	8006a8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0308 	bic.w	r3, r3, #8
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 0304 	bic.w	r3, r3, #4
 8006a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a15      	ldr	r2, [pc, #84]	; (8006ae8 <TIM_OC1_SetConfig+0xd8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_OC1_SetConfig+0x8e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a14      	ldr	r2, [pc, #80]	; (8006aec <TIM_OC1_SetConfig+0xdc>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d111      	bne.n	8006ac2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	621a      	str	r2, [r3, #32]
}
 8006adc:	bf00      	nop
 8006ade:	371c      	adds	r7, #28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40010400 	.word	0x40010400

08006af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f023 0210 	bic.w	r2, r3, #16
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	699b      	ldr	r3, [r3, #24]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0320 	bic.w	r3, r3, #32
 8006b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	011b      	lsls	r3, r3, #4
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <TIM_OC2_SetConfig+0xe4>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d003      	beq.n	8006b58 <TIM_OC2_SetConfig+0x68>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a21      	ldr	r2, [pc, #132]	; (8006bd8 <TIM_OC2_SetConfig+0xe8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d10d      	bne.n	8006b74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a17      	ldr	r2, [pc, #92]	; (8006bd4 <TIM_OC2_SetConfig+0xe4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d003      	beq.n	8006b84 <TIM_OC2_SetConfig+0x94>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a16      	ldr	r2, [pc, #88]	; (8006bd8 <TIM_OC2_SetConfig+0xe8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d113      	bne.n	8006bac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	621a      	str	r2, [r3, #32]
}
 8006bc6:	bf00      	nop
 8006bc8:	371c      	adds	r7, #28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40010400 	.word	0x40010400

08006bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f023 0303 	bic.w	r3, r3, #3
 8006c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	021b      	lsls	r3, r3, #8
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <TIM_OC3_SetConfig+0xe0>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d003      	beq.n	8006c42 <TIM_OC3_SetConfig+0x66>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a20      	ldr	r2, [pc, #128]	; (8006cc0 <TIM_OC3_SetConfig+0xe4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d10d      	bne.n	8006c5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a16      	ldr	r2, [pc, #88]	; (8006cbc <TIM_OC3_SetConfig+0xe0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d003      	beq.n	8006c6e <TIM_OC3_SetConfig+0x92>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a15      	ldr	r2, [pc, #84]	; (8006cc0 <TIM_OC3_SetConfig+0xe4>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d113      	bne.n	8006c96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	695b      	ldr	r3, [r3, #20]
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	621a      	str	r2, [r3, #32]
}
 8006cb0:	bf00      	nop
 8006cb2:	371c      	adds	r7, #28
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a12      	ldr	r2, [pc, #72]	; (8006d68 <TIM_OC4_SetConfig+0xa4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_OC4_SetConfig+0x68>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <TIM_OC4_SetConfig+0xa8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d109      	bne.n	8006d40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	019b      	lsls	r3, r3, #6
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40010000 	.word	0x40010000
 8006d6c:	40010400 	.word	0x40010400

08006d70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6a1b      	ldr	r3, [r3, #32]
 8006d86:	f023 0201 	bic.w	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	011b      	lsls	r3, r3, #4
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 030a 	bic.w	r3, r3, #10
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b087      	sub	sp, #28
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	f023 0210 	bic.w	r2, r3, #16
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a1b      	ldr	r3, [r3, #32]
 8006df0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	031b      	lsls	r3, r3, #12
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	011b      	lsls	r3, r3, #4
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	621a      	str	r2, [r3, #32]
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	f043 0307 	orr.w	r3, r3, #7
 8006e50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68fa      	ldr	r2, [r7, #12]
 8006e56:	609a      	str	r2, [r3, #8]
}
 8006e58:	bf00      	nop
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	021a      	lsls	r2, r3, #8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	609a      	str	r2, [r3, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 031f 	and.w	r3, r3, #31
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a1a      	ldr	r2, [r3, #32]
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	401a      	ands	r2, r3
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1a      	ldr	r2, [r3, #32]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8006edc:	431a      	orrs	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	621a      	str	r2, [r3, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	371c      	adds	r7, #28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
	...

08006ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d101      	bne.n	8006f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e05a      	b.n	8006fbe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a21      	ldr	r2, [pc, #132]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d022      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d01d      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d018      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1b      	ldr	r2, [pc, #108]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d013      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1a      	ldr	r2, [pc, #104]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d00e      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a18      	ldr	r2, [pc, #96]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d009      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a17      	ldr	r2, [pc, #92]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10c      	bne.n	8006fac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40010000 	.word	0x40010000
 8006fd0:	40000400 	.word	0x40000400
 8006fd4:	40000800 	.word	0x40000800
 8006fd8:	40000c00 	.word	0x40000c00
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40001800 	.word	0x40001800

08006fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007000:	2302      	movs	r3, #2
 8007002:	e03d      	b.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4313      	orrs	r3, r2
 8007034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e03f      	b.n	8007146 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa fd02 	bl	8001ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2224      	movs	r2, #36	; 0x24
 80070e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fc37 	bl	800796c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691a      	ldr	r2, [r3, #16]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800710c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	695a      	ldr	r2, [r3, #20]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800711c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800712c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2220      	movs	r2, #32
 8007140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b20      	cmp	r3, #32
 8007168:	d153      	bne.n	8007212 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_UART_Transmit_DMA+0x26>
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e04c      	b.n	8007214 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_UART_Transmit_DMA+0x38>
 8007184:	2302      	movs	r3, #2
 8007186:	e045      	b.n	8007214 <HAL_UART_Transmit_DMA+0xc4>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	88fa      	ldrh	r2, [r7, #6]
 80071a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2221      	movs	r2, #33	; 0x21
 80071ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	4a19      	ldr	r2, [pc, #100]	; (800721c <HAL_UART_Transmit_DMA+0xcc>)
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	4a18      	ldr	r2, [pc, #96]	; (8007220 <HAL_UART_Transmit_DMA+0xd0>)
 80071be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	4a17      	ldr	r2, [pc, #92]	; (8007224 <HAL_UART_Transmit_DMA+0xd4>)
 80071c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071cc:	2200      	movs	r2, #0
 80071ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3304      	adds	r3, #4
 80071e4:	461a      	mov	r2, r3
 80071e6:	88fb      	ldrh	r3, [r7, #6]
 80071e8:	f7fb f95e 	bl	80024a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800720c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	08007579 	.word	0x08007579
 8007220:	080075cb 	.word	0x080075cb
 8007224:	0800766b 	.word	0x0800766b

08007228 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b20      	cmp	r3, #32
 8007240:	d166      	bne.n	8007310 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_UART_Receive_DMA+0x26>
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e05f      	b.n	8007312 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_UART_Receive_DMA+0x38>
 800725c:	2302      	movs	r3, #2
 800725e:	e058      	b.n	8007312 <HAL_UART_Receive_DMA+0xea>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	88fa      	ldrh	r2, [r7, #6]
 8007272:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2222      	movs	r2, #34	; 0x22
 800727e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_UART_Receive_DMA+0xf4>)
 8007288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	4a24      	ldr	r2, [pc, #144]	; (8007320 <HAL_UART_Receive_DMA+0xf8>)
 8007290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	4a23      	ldr	r2, [pc, #140]	; (8007324 <HAL_UART_Receive_DMA+0xfc>)
 8007298:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729e:	2200      	movs	r2, #0
 80072a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80072a2:	f107 0308 	add.w	r3, r7, #8
 80072a6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	f7fb f8f5 	bl	80024a8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	695a      	ldr	r2, [r3, #20]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	695a      	ldr	r2, [r3, #20]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800730a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e000      	b.n	8007312 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	080075e7 	.word	0x080075e7
 8007320:	0800764f 	.word	0x0800764f
 8007324:	0800766b 	.word	0x0800766b

08007328 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007348:	2300      	movs	r3, #0
 800734a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f003 030f 	and.w	r3, r3, #15
 8007356:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10d      	bne.n	800737a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <HAL_UART_IRQHandler+0x52>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fa79 	bl	800786a <UART_Receive_IT>
      return;
 8007378:	e0d1      	b.n	800751e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80b0 	beq.w	80074e2 <HAL_UART_IRQHandler+0x1ba>
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <HAL_UART_IRQHandler+0x70>
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 80a5 	beq.w	80074e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <HAL_UART_IRQHandler+0x90>
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	f043 0201 	orr.w	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f003 0304 	and.w	r3, r3, #4
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_UART_IRQHandler+0xb0>
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d0:	f043 0202 	orr.w	r2, r3, #2
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_UART_IRQHandler+0xd0>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d005      	beq.n	80073f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f0:	f043 0204 	orr.w	r2, r3, #4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <HAL_UART_IRQHandler+0xfa>
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <HAL_UART_IRQHandler+0xee>
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	f043 0208 	orr.w	r2, r3, #8
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d078      	beq.n	800751c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <HAL_UART_IRQHandler+0x11c>
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fa13 	bl	800786a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	bf0c      	ite	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	2300      	movne	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d102      	bne.n	800746c <HAL_UART_IRQHandler+0x144>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d031      	beq.n	80074d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f95c 	bl	800772a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d123      	bne.n	80074c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	695a      	ldr	r2, [r3, #20]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007494:	2b00      	cmp	r3, #0
 8007496:	d013      	beq.n	80074c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800749c:	4a21      	ldr	r2, [pc, #132]	; (8007524 <HAL_UART_IRQHandler+0x1fc>)
 800749e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fb f857 	bl	8002558 <HAL_DMA_Abort_IT>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d016      	beq.n	80074de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80074ba:	4610      	mov	r0, r2
 80074bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074be:	e00e      	b.n	80074de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f84f 	bl	8007564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074c6:	e00a      	b.n	80074de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f84b 	bl	8007564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ce:	e006      	b.n	80074de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f847 	bl	8007564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80074dc:	e01e      	b.n	800751c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074de:	bf00      	nop
    return;
 80074e0:	e01c      	b.n	800751c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d008      	beq.n	80074fe <HAL_UART_IRQHandler+0x1d6>
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f949 	bl	800778e <UART_Transmit_IT>
    return;
 80074fc:	e00f      	b.n	800751e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <HAL_UART_IRQHandler+0x1f6>
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	d005      	beq.n	800751e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f991 	bl	800783a <UART_EndTransmit_IT>
    return;
 8007518:	bf00      	nop
 800751a:	e000      	b.n	800751e <HAL_UART_IRQHandler+0x1f6>
    return;
 800751c:	bf00      	nop
  }
}
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	08007767 	.word	0x08007767

08007528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d113      	bne.n	80075bc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	695a      	ldr	r2, [r3, #20]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075a8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075ba:	e002      	b.n	80075c2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7ff ffb3 	bl	8007528 <HAL_UART_TxCpltCallback>
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff ffaf 	bl	800753c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11e      	bne.n	8007640 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007616:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f022 0201 	bic.w	r2, r2, #1
 8007626:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695a      	ldr	r2, [r3, #20]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007636:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7f9 f997 	bl	8000974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007646:	bf00      	nop
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff ff77 	bl	8007550 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007662:	bf00      	nop
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007686:	2b80      	cmp	r3, #128	; 0x80
 8007688:	bf0c      	ite	eq
 800768a:	2301      	moveq	r3, #1
 800768c:	2300      	movne	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b21      	cmp	r3, #33	; 0x21
 800769c:	d108      	bne.n	80076b0 <UART_DMAError+0x46>
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076aa:	68b8      	ldr	r0, [r7, #8]
 80076ac:	f000 f827 	bl	80076fe <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	bf0c      	ite	eq
 80076be:	2301      	moveq	r3, #1
 80076c0:	2300      	movne	r3, #0
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b22      	cmp	r3, #34	; 0x22
 80076d0:	d108      	bne.n	80076e4 <UART_DMAError+0x7a>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2200      	movs	r2, #0
 80076dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076de:	68b8      	ldr	r0, [r7, #8]
 80076e0:	f000 f823 	bl	800772a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	f043 0210 	orr.w	r2, r3, #16
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076f0:	68b8      	ldr	r0, [r7, #8]
 80076f2:	f7ff ff37 	bl	8007564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f6:	bf00      	nop
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007714:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68da      	ldr	r2, [r3, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007740:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	695a      	ldr	r2, [r3, #20]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0201 	bic.w	r2, r2, #1
 8007750:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2220      	movs	r2, #32
 8007756:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800775a:	bf00      	nop
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff feef 	bl	8007564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800779c:	b2db      	uxtb	r3, r3
 800779e:	2b21      	cmp	r3, #33	; 0x21
 80077a0:	d144      	bne.n	800782c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077aa:	d11a      	bne.n	80077e2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	881b      	ldrh	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077c0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d105      	bne.n	80077d6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	621a      	str	r2, [r3, #32]
 80077d4:	e00e      	b.n	80077f4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	621a      	str	r2, [r3, #32]
 80077e0:	e008      	b.n	80077f4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	1c59      	adds	r1, r3, #1
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6211      	str	r1, [r2, #32]
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4619      	mov	r1, r3
 8007802:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10f      	bne.n	8007828 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007816:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007826:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007828:	2300      	movs	r3, #0
 800782a:	e000      	b.n	800782e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800782c:	2302      	movs	r3, #2
  }
}
 800782e:	4618      	mov	r0, r3
 8007830:	3714      	adds	r7, #20
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007850:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7ff fe64 	bl	8007528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b22      	cmp	r3, #34	; 0x22
 800787c:	d171      	bne.n	8007962 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007886:	d123      	bne.n	80078d0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10e      	bne.n	80078b4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	1c9a      	adds	r2, r3, #2
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	629a      	str	r2, [r3, #40]	; 0x28
 80078b2:	e029      	b.n	8007908 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c8:	1c5a      	adds	r2, r3, #1
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	629a      	str	r2, [r3, #40]	; 0x28
 80078ce:	e01b      	b.n	8007908 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6858      	ldr	r0, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e2:	1c59      	adds	r1, r3, #1
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	6291      	str	r1, [r2, #40]	; 0x28
 80078e8:	b2c2      	uxtb	r2, r0
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e00c      	b.n	8007908 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fa:	1c58      	adds	r0, r3, #1
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	6288      	str	r0, [r1, #40]	; 0x28
 8007900:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4619      	mov	r1, r3
 8007916:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007918:	2b00      	cmp	r3, #0
 800791a:	d120      	bne.n	800795e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0220 	bic.w	r2, r2, #32
 800792a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800793a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0201 	bic.w	r2, r2, #1
 800794a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2220      	movs	r2, #32
 8007950:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f7f9 f80d 	bl	8000974 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e002      	b.n	8007964 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e000      	b.n	8007964 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007962:	2302      	movs	r3, #2
  }
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800796c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68da      	ldr	r2, [r3, #12]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	430a      	orrs	r2, r1
 800798a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	69db      	ldr	r3, [r3, #28]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80079ae:	f023 030c 	bic.w	r3, r3, #12
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	68f9      	ldr	r1, [r7, #12]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	699a      	ldr	r2, [r3, #24]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079da:	f040 818b 	bne.w	8007cf4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4ac1      	ldr	r2, [pc, #772]	; (8007ce8 <UART_SetConfig+0x37c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d005      	beq.n	80079f4 <UART_SetConfig+0x88>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4abf      	ldr	r2, [pc, #764]	; (8007cec <UART_SetConfig+0x380>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	f040 80bd 	bne.w	8007b6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079f4:	f7fe f92a 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 80079f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	461d      	mov	r5, r3
 80079fe:	f04f 0600 	mov.w	r6, #0
 8007a02:	46a8      	mov	r8, r5
 8007a04:	46b1      	mov	r9, r6
 8007a06:	eb18 0308 	adds.w	r3, r8, r8
 8007a0a:	eb49 0409 	adc.w	r4, r9, r9
 8007a0e:	4698      	mov	r8, r3
 8007a10:	46a1      	mov	r9, r4
 8007a12:	eb18 0805 	adds.w	r8, r8, r5
 8007a16:	eb49 0906 	adc.w	r9, r9, r6
 8007a1a:	f04f 0100 	mov.w	r1, #0
 8007a1e:	f04f 0200 	mov.w	r2, #0
 8007a22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a2e:	4688      	mov	r8, r1
 8007a30:	4691      	mov	r9, r2
 8007a32:	eb18 0005 	adds.w	r0, r8, r5
 8007a36:	eb49 0106 	adc.w	r1, r9, r6
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	461d      	mov	r5, r3
 8007a40:	f04f 0600 	mov.w	r6, #0
 8007a44:	196b      	adds	r3, r5, r5
 8007a46:	eb46 0406 	adc.w	r4, r6, r6
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	4623      	mov	r3, r4
 8007a4e:	f7f8 fc0f 	bl	8000270 <__aeabi_uldivmod>
 8007a52:	4603      	mov	r3, r0
 8007a54:	460c      	mov	r4, r1
 8007a56:	461a      	mov	r2, r3
 8007a58:	4ba5      	ldr	r3, [pc, #660]	; (8007cf0 <UART_SetConfig+0x384>)
 8007a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a5e:	095b      	lsrs	r3, r3, #5
 8007a60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	461d      	mov	r5, r3
 8007a68:	f04f 0600 	mov.w	r6, #0
 8007a6c:	46a9      	mov	r9, r5
 8007a6e:	46b2      	mov	sl, r6
 8007a70:	eb19 0309 	adds.w	r3, r9, r9
 8007a74:	eb4a 040a 	adc.w	r4, sl, sl
 8007a78:	4699      	mov	r9, r3
 8007a7a:	46a2      	mov	sl, r4
 8007a7c:	eb19 0905 	adds.w	r9, r9, r5
 8007a80:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a98:	4689      	mov	r9, r1
 8007a9a:	4692      	mov	sl, r2
 8007a9c:	eb19 0005 	adds.w	r0, r9, r5
 8007aa0:	eb4a 0106 	adc.w	r1, sl, r6
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	461d      	mov	r5, r3
 8007aaa:	f04f 0600 	mov.w	r6, #0
 8007aae:	196b      	adds	r3, r5, r5
 8007ab0:	eb46 0406 	adc.w	r4, r6, r6
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	f7f8 fbda 	bl	8000270 <__aeabi_uldivmod>
 8007abc:	4603      	mov	r3, r0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4b8b      	ldr	r3, [pc, #556]	; (8007cf0 <UART_SetConfig+0x384>)
 8007ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ac8:	095b      	lsrs	r3, r3, #5
 8007aca:	2164      	movs	r1, #100	; 0x64
 8007acc:	fb01 f303 	mul.w	r3, r1, r3
 8007ad0:	1ad3      	subs	r3, r2, r3
 8007ad2:	00db      	lsls	r3, r3, #3
 8007ad4:	3332      	adds	r3, #50	; 0x32
 8007ad6:	4a86      	ldr	r2, [pc, #536]	; (8007cf0 <UART_SetConfig+0x384>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	095b      	lsrs	r3, r3, #5
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ae4:	4498      	add	r8, r3
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	461d      	mov	r5, r3
 8007aea:	f04f 0600 	mov.w	r6, #0
 8007aee:	46a9      	mov	r9, r5
 8007af0:	46b2      	mov	sl, r6
 8007af2:	eb19 0309 	adds.w	r3, r9, r9
 8007af6:	eb4a 040a 	adc.w	r4, sl, sl
 8007afa:	4699      	mov	r9, r3
 8007afc:	46a2      	mov	sl, r4
 8007afe:	eb19 0905 	adds.w	r9, r9, r5
 8007b02:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b06:	f04f 0100 	mov.w	r1, #0
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b1a:	4689      	mov	r9, r1
 8007b1c:	4692      	mov	sl, r2
 8007b1e:	eb19 0005 	adds.w	r0, r9, r5
 8007b22:	eb4a 0106 	adc.w	r1, sl, r6
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	461d      	mov	r5, r3
 8007b2c:	f04f 0600 	mov.w	r6, #0
 8007b30:	196b      	adds	r3, r5, r5
 8007b32:	eb46 0406 	adc.w	r4, r6, r6
 8007b36:	461a      	mov	r2, r3
 8007b38:	4623      	mov	r3, r4
 8007b3a:	f7f8 fb99 	bl	8000270 <__aeabi_uldivmod>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	461a      	mov	r2, r3
 8007b44:	4b6a      	ldr	r3, [pc, #424]	; (8007cf0 <UART_SetConfig+0x384>)
 8007b46:	fba3 1302 	umull	r1, r3, r3, r2
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2164      	movs	r1, #100	; 0x64
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	3332      	adds	r3, #50	; 0x32
 8007b58:	4a65      	ldr	r2, [pc, #404]	; (8007cf0 <UART_SetConfig+0x384>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f003 0207 	and.w	r2, r3, #7
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4442      	add	r2, r8
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	e26f      	b.n	800804e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b6e:	f7fe f859 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8007b72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	461d      	mov	r5, r3
 8007b78:	f04f 0600 	mov.w	r6, #0
 8007b7c:	46a8      	mov	r8, r5
 8007b7e:	46b1      	mov	r9, r6
 8007b80:	eb18 0308 	adds.w	r3, r8, r8
 8007b84:	eb49 0409 	adc.w	r4, r9, r9
 8007b88:	4698      	mov	r8, r3
 8007b8a:	46a1      	mov	r9, r4
 8007b8c:	eb18 0805 	adds.w	r8, r8, r5
 8007b90:	eb49 0906 	adc.w	r9, r9, r6
 8007b94:	f04f 0100 	mov.w	r1, #0
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ba0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ba4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ba8:	4688      	mov	r8, r1
 8007baa:	4691      	mov	r9, r2
 8007bac:	eb18 0005 	adds.w	r0, r8, r5
 8007bb0:	eb49 0106 	adc.w	r1, r9, r6
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	461d      	mov	r5, r3
 8007bba:	f04f 0600 	mov.w	r6, #0
 8007bbe:	196b      	adds	r3, r5, r5
 8007bc0:	eb46 0406 	adc.w	r4, r6, r6
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	4623      	mov	r3, r4
 8007bc8:	f7f8 fb52 	bl	8000270 <__aeabi_uldivmod>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <UART_SetConfig+0x384>)
 8007bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8007bd8:	095b      	lsrs	r3, r3, #5
 8007bda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	461d      	mov	r5, r3
 8007be2:	f04f 0600 	mov.w	r6, #0
 8007be6:	46a9      	mov	r9, r5
 8007be8:	46b2      	mov	sl, r6
 8007bea:	eb19 0309 	adds.w	r3, r9, r9
 8007bee:	eb4a 040a 	adc.w	r4, sl, sl
 8007bf2:	4699      	mov	r9, r3
 8007bf4:	46a2      	mov	sl, r4
 8007bf6:	eb19 0905 	adds.w	r9, r9, r5
 8007bfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8007bfe:	f04f 0100 	mov.w	r1, #0
 8007c02:	f04f 0200 	mov.w	r2, #0
 8007c06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c12:	4689      	mov	r9, r1
 8007c14:	4692      	mov	sl, r2
 8007c16:	eb19 0005 	adds.w	r0, r9, r5
 8007c1a:	eb4a 0106 	adc.w	r1, sl, r6
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	461d      	mov	r5, r3
 8007c24:	f04f 0600 	mov.w	r6, #0
 8007c28:	196b      	adds	r3, r5, r5
 8007c2a:	eb46 0406 	adc.w	r4, r6, r6
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4623      	mov	r3, r4
 8007c32:	f7f8 fb1d 	bl	8000270 <__aeabi_uldivmod>
 8007c36:	4603      	mov	r3, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4b2c      	ldr	r3, [pc, #176]	; (8007cf0 <UART_SetConfig+0x384>)
 8007c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	2164      	movs	r1, #100	; 0x64
 8007c46:	fb01 f303 	mul.w	r3, r1, r3
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	00db      	lsls	r3, r3, #3
 8007c4e:	3332      	adds	r3, #50	; 0x32
 8007c50:	4a27      	ldr	r2, [pc, #156]	; (8007cf0 <UART_SetConfig+0x384>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c5e:	4498      	add	r8, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	461d      	mov	r5, r3
 8007c64:	f04f 0600 	mov.w	r6, #0
 8007c68:	46a9      	mov	r9, r5
 8007c6a:	46b2      	mov	sl, r6
 8007c6c:	eb19 0309 	adds.w	r3, r9, r9
 8007c70:	eb4a 040a 	adc.w	r4, sl, sl
 8007c74:	4699      	mov	r9, r3
 8007c76:	46a2      	mov	sl, r4
 8007c78:	eb19 0905 	adds.w	r9, r9, r5
 8007c7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c80:	f04f 0100 	mov.w	r1, #0
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c94:	4689      	mov	r9, r1
 8007c96:	4692      	mov	sl, r2
 8007c98:	eb19 0005 	adds.w	r0, r9, r5
 8007c9c:	eb4a 0106 	adc.w	r1, sl, r6
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	461d      	mov	r5, r3
 8007ca6:	f04f 0600 	mov.w	r6, #0
 8007caa:	196b      	adds	r3, r5, r5
 8007cac:	eb46 0406 	adc.w	r4, r6, r6
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	f7f8 fadc 	bl	8000270 <__aeabi_uldivmod>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <UART_SetConfig+0x384>)
 8007cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8007cc4:	095b      	lsrs	r3, r3, #5
 8007cc6:	2164      	movs	r1, #100	; 0x64
 8007cc8:	fb01 f303 	mul.w	r3, r1, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	3332      	adds	r3, #50	; 0x32
 8007cd2:	4a07      	ldr	r2, [pc, #28]	; (8007cf0 <UART_SetConfig+0x384>)
 8007cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd8:	095b      	lsrs	r3, r3, #5
 8007cda:	f003 0207 	and.w	r2, r3, #7
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4442      	add	r2, r8
 8007ce4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007ce6:	e1b2      	b.n	800804e <UART_SetConfig+0x6e2>
 8007ce8:	40011000 	.word	0x40011000
 8007cec:	40011400 	.word	0x40011400
 8007cf0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4ad7      	ldr	r2, [pc, #860]	; (8008058 <UART_SetConfig+0x6ec>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d005      	beq.n	8007d0a <UART_SetConfig+0x39e>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4ad6      	ldr	r2, [pc, #856]	; (800805c <UART_SetConfig+0x6f0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	f040 80d1 	bne.w	8007eac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d0a:	f7fd ff9f 	bl	8005c4c <HAL_RCC_GetPCLK2Freq>
 8007d0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	469a      	mov	sl, r3
 8007d14:	f04f 0b00 	mov.w	fp, #0
 8007d18:	46d0      	mov	r8, sl
 8007d1a:	46d9      	mov	r9, fp
 8007d1c:	eb18 0308 	adds.w	r3, r8, r8
 8007d20:	eb49 0409 	adc.w	r4, r9, r9
 8007d24:	4698      	mov	r8, r3
 8007d26:	46a1      	mov	r9, r4
 8007d28:	eb18 080a 	adds.w	r8, r8, sl
 8007d2c:	eb49 090b 	adc.w	r9, r9, fp
 8007d30:	f04f 0100 	mov.w	r1, #0
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d44:	4688      	mov	r8, r1
 8007d46:	4691      	mov	r9, r2
 8007d48:	eb1a 0508 	adds.w	r5, sl, r8
 8007d4c:	eb4b 0609 	adc.w	r6, fp, r9
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	4619      	mov	r1, r3
 8007d56:	f04f 0200 	mov.w	r2, #0
 8007d5a:	f04f 0300 	mov.w	r3, #0
 8007d5e:	f04f 0400 	mov.w	r4, #0
 8007d62:	0094      	lsls	r4, r2, #2
 8007d64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d68:	008b      	lsls	r3, r1, #2
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	4631      	mov	r1, r6
 8007d72:	f7f8 fa7d 	bl	8000270 <__aeabi_uldivmod>
 8007d76:	4603      	mov	r3, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	4bb8      	ldr	r3, [pc, #736]	; (8008060 <UART_SetConfig+0x6f4>)
 8007d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	469b      	mov	fp, r3
 8007d8c:	f04f 0c00 	mov.w	ip, #0
 8007d90:	46d9      	mov	r9, fp
 8007d92:	46e2      	mov	sl, ip
 8007d94:	eb19 0309 	adds.w	r3, r9, r9
 8007d98:	eb4a 040a 	adc.w	r4, sl, sl
 8007d9c:	4699      	mov	r9, r3
 8007d9e:	46a2      	mov	sl, r4
 8007da0:	eb19 090b 	adds.w	r9, r9, fp
 8007da4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007da8:	f04f 0100 	mov.w	r1, #0
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007db4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007db8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	4692      	mov	sl, r2
 8007dc0:	eb1b 0509 	adds.w	r5, fp, r9
 8007dc4:	eb4c 060a 	adc.w	r6, ip, sl
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f04f 0200 	mov.w	r2, #0
 8007dd2:	f04f 0300 	mov.w	r3, #0
 8007dd6:	f04f 0400 	mov.w	r4, #0
 8007dda:	0094      	lsls	r4, r2, #2
 8007ddc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007de0:	008b      	lsls	r3, r1, #2
 8007de2:	461a      	mov	r2, r3
 8007de4:	4623      	mov	r3, r4
 8007de6:	4628      	mov	r0, r5
 8007de8:	4631      	mov	r1, r6
 8007dea:	f7f8 fa41 	bl	8000270 <__aeabi_uldivmod>
 8007dee:	4603      	mov	r3, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	461a      	mov	r2, r3
 8007df4:	4b9a      	ldr	r3, [pc, #616]	; (8008060 <UART_SetConfig+0x6f4>)
 8007df6:	fba3 1302 	umull	r1, r3, r3, r2
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2164      	movs	r1, #100	; 0x64
 8007dfe:	fb01 f303 	mul.w	r3, r1, r3
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	3332      	adds	r3, #50	; 0x32
 8007e08:	4a95      	ldr	r2, [pc, #596]	; (8008060 <UART_SetConfig+0x6f4>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e14:	4498      	add	r8, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	469b      	mov	fp, r3
 8007e1a:	f04f 0c00 	mov.w	ip, #0
 8007e1e:	46d9      	mov	r9, fp
 8007e20:	46e2      	mov	sl, ip
 8007e22:	eb19 0309 	adds.w	r3, r9, r9
 8007e26:	eb4a 040a 	adc.w	r4, sl, sl
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	46a2      	mov	sl, r4
 8007e2e:	eb19 090b 	adds.w	r9, r9, fp
 8007e32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e4a:	4689      	mov	r9, r1
 8007e4c:	4692      	mov	sl, r2
 8007e4e:	eb1b 0509 	adds.w	r5, fp, r9
 8007e52:	eb4c 060a 	adc.w	r6, ip, sl
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	f04f 0400 	mov.w	r4, #0
 8007e68:	0094      	lsls	r4, r2, #2
 8007e6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e6e:	008b      	lsls	r3, r1, #2
 8007e70:	461a      	mov	r2, r3
 8007e72:	4623      	mov	r3, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	4631      	mov	r1, r6
 8007e78:	f7f8 f9fa 	bl	8000270 <__aeabi_uldivmod>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b77      	ldr	r3, [pc, #476]	; (8008060 <UART_SetConfig+0x6f4>)
 8007e84:	fba3 1302 	umull	r1, r3, r3, r2
 8007e88:	095b      	lsrs	r3, r3, #5
 8007e8a:	2164      	movs	r1, #100	; 0x64
 8007e8c:	fb01 f303 	mul.w	r3, r1, r3
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	3332      	adds	r3, #50	; 0x32
 8007e96:	4a72      	ldr	r2, [pc, #456]	; (8008060 <UART_SetConfig+0x6f4>)
 8007e98:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	f003 020f 	and.w	r2, r3, #15
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4442      	add	r2, r8
 8007ea8:	609a      	str	r2, [r3, #8]
 8007eaa:	e0d0      	b.n	800804e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fd feba 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	469a      	mov	sl, r3
 8007eb6:	f04f 0b00 	mov.w	fp, #0
 8007eba:	46d0      	mov	r8, sl
 8007ebc:	46d9      	mov	r9, fp
 8007ebe:	eb18 0308 	adds.w	r3, r8, r8
 8007ec2:	eb49 0409 	adc.w	r4, r9, r9
 8007ec6:	4698      	mov	r8, r3
 8007ec8:	46a1      	mov	r9, r4
 8007eca:	eb18 080a 	adds.w	r8, r8, sl
 8007ece:	eb49 090b 	adc.w	r9, r9, fp
 8007ed2:	f04f 0100 	mov.w	r1, #0
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ede:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007ee2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ee6:	4688      	mov	r8, r1
 8007ee8:	4691      	mov	r9, r2
 8007eea:	eb1a 0508 	adds.w	r5, sl, r8
 8007eee:	eb4b 0609 	adc.w	r6, fp, r9
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	f04f 0400 	mov.w	r4, #0
 8007f04:	0094      	lsls	r4, r2, #2
 8007f06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f0a:	008b      	lsls	r3, r1, #2
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	4623      	mov	r3, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	4631      	mov	r1, r6
 8007f14:	f7f8 f9ac 	bl	8000270 <__aeabi_uldivmod>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	4b50      	ldr	r3, [pc, #320]	; (8008060 <UART_SetConfig+0x6f4>)
 8007f20:	fba3 2302 	umull	r2, r3, r3, r2
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	469b      	mov	fp, r3
 8007f2e:	f04f 0c00 	mov.w	ip, #0
 8007f32:	46d9      	mov	r9, fp
 8007f34:	46e2      	mov	sl, ip
 8007f36:	eb19 0309 	adds.w	r3, r9, r9
 8007f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8007f3e:	4699      	mov	r9, r3
 8007f40:	46a2      	mov	sl, r4
 8007f42:	eb19 090b 	adds.w	r9, r9, fp
 8007f46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f4a:	f04f 0100 	mov.w	r1, #0
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f5e:	4689      	mov	r9, r1
 8007f60:	4692      	mov	sl, r2
 8007f62:	eb1b 0509 	adds.w	r5, fp, r9
 8007f66:	eb4c 060a 	adc.w	r6, ip, sl
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	f04f 0400 	mov.w	r4, #0
 8007f7c:	0094      	lsls	r4, r2, #2
 8007f7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f82:	008b      	lsls	r3, r1, #2
 8007f84:	461a      	mov	r2, r3
 8007f86:	4623      	mov	r3, r4
 8007f88:	4628      	mov	r0, r5
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	f7f8 f970 	bl	8000270 <__aeabi_uldivmod>
 8007f90:	4603      	mov	r3, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	461a      	mov	r2, r3
 8007f96:	4b32      	ldr	r3, [pc, #200]	; (8008060 <UART_SetConfig+0x6f4>)
 8007f98:	fba3 1302 	umull	r1, r3, r3, r2
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	2164      	movs	r1, #100	; 0x64
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	3332      	adds	r3, #50	; 0x32
 8007faa:	4a2d      	ldr	r2, [pc, #180]	; (8008060 <UART_SetConfig+0x6f4>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	095b      	lsrs	r3, r3, #5
 8007fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fb6:	4498      	add	r8, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	469b      	mov	fp, r3
 8007fbc:	f04f 0c00 	mov.w	ip, #0
 8007fc0:	46d9      	mov	r9, fp
 8007fc2:	46e2      	mov	sl, ip
 8007fc4:	eb19 0309 	adds.w	r3, r9, r9
 8007fc8:	eb4a 040a 	adc.w	r4, sl, sl
 8007fcc:	4699      	mov	r9, r3
 8007fce:	46a2      	mov	sl, r4
 8007fd0:	eb19 090b 	adds.w	r9, r9, fp
 8007fd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fd8:	f04f 0100 	mov.w	r1, #0
 8007fdc:	f04f 0200 	mov.w	r2, #0
 8007fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fe4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fe8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fec:	4689      	mov	r9, r1
 8007fee:	4692      	mov	sl, r2
 8007ff0:	eb1b 0509 	adds.w	r5, fp, r9
 8007ff4:	eb4c 060a 	adc.w	r6, ip, sl
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	f04f 0400 	mov.w	r4, #0
 800800a:	0094      	lsls	r4, r2, #2
 800800c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008010:	008b      	lsls	r3, r1, #2
 8008012:	461a      	mov	r2, r3
 8008014:	4623      	mov	r3, r4
 8008016:	4628      	mov	r0, r5
 8008018:	4631      	mov	r1, r6
 800801a:	f7f8 f929 	bl	8000270 <__aeabi_uldivmod>
 800801e:	4603      	mov	r3, r0
 8008020:	460c      	mov	r4, r1
 8008022:	461a      	mov	r2, r3
 8008024:	4b0e      	ldr	r3, [pc, #56]	; (8008060 <UART_SetConfig+0x6f4>)
 8008026:	fba3 1302 	umull	r1, r3, r3, r2
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	2164      	movs	r1, #100	; 0x64
 800802e:	fb01 f303 	mul.w	r3, r1, r3
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	3332      	adds	r3, #50	; 0x32
 8008038:	4a09      	ldr	r2, [pc, #36]	; (8008060 <UART_SetConfig+0x6f4>)
 800803a:	fba2 2303 	umull	r2, r3, r2, r3
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	f003 020f 	and.w	r2, r3, #15
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4442      	add	r2, r8
 800804a:	609a      	str	r2, [r3, #8]
}
 800804c:	e7ff      	b.n	800804e <UART_SetConfig+0x6e2>
 800804e:	bf00      	nop
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	40011000 	.word	0x40011000
 800805c:	40011400 	.word	0x40011400
 8008060:	51eb851f 	.word	0x51eb851f

08008064 <__errno>:
 8008064:	4b01      	ldr	r3, [pc, #4]	; (800806c <__errno+0x8>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	2000000c 	.word	0x2000000c

08008070 <__libc_init_array>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	4e0d      	ldr	r6, [pc, #52]	; (80080a8 <__libc_init_array+0x38>)
 8008074:	4c0d      	ldr	r4, [pc, #52]	; (80080ac <__libc_init_array+0x3c>)
 8008076:	1ba4      	subs	r4, r4, r6
 8008078:	10a4      	asrs	r4, r4, #2
 800807a:	2500      	movs	r5, #0
 800807c:	42a5      	cmp	r5, r4
 800807e:	d109      	bne.n	8008094 <__libc_init_array+0x24>
 8008080:	4e0b      	ldr	r6, [pc, #44]	; (80080b0 <__libc_init_array+0x40>)
 8008082:	4c0c      	ldr	r4, [pc, #48]	; (80080b4 <__libc_init_array+0x44>)
 8008084:	f000 fc26 	bl	80088d4 <_init>
 8008088:	1ba4      	subs	r4, r4, r6
 800808a:	10a4      	asrs	r4, r4, #2
 800808c:	2500      	movs	r5, #0
 800808e:	42a5      	cmp	r5, r4
 8008090:	d105      	bne.n	800809e <__libc_init_array+0x2e>
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008098:	4798      	blx	r3
 800809a:	3501      	adds	r5, #1
 800809c:	e7ee      	b.n	800807c <__libc_init_array+0xc>
 800809e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080a2:	4798      	blx	r3
 80080a4:	3501      	adds	r5, #1
 80080a6:	e7f2      	b.n	800808e <__libc_init_array+0x1e>
 80080a8:	08008a00 	.word	0x08008a00
 80080ac:	08008a00 	.word	0x08008a00
 80080b0:	08008a00 	.word	0x08008a00
 80080b4:	08008a04 	.word	0x08008a04

080080b8 <memset>:
 80080b8:	4402      	add	r2, r0
 80080ba:	4603      	mov	r3, r0
 80080bc:	4293      	cmp	r3, r2
 80080be:	d100      	bne.n	80080c2 <memset+0xa>
 80080c0:	4770      	bx	lr
 80080c2:	f803 1b01 	strb.w	r1, [r3], #1
 80080c6:	e7f9      	b.n	80080bc <memset+0x4>

080080c8 <siprintf>:
 80080c8:	b40e      	push	{r1, r2, r3}
 80080ca:	b500      	push	{lr}
 80080cc:	b09c      	sub	sp, #112	; 0x70
 80080ce:	ab1d      	add	r3, sp, #116	; 0x74
 80080d0:	9002      	str	r0, [sp, #8]
 80080d2:	9006      	str	r0, [sp, #24]
 80080d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080d8:	4809      	ldr	r0, [pc, #36]	; (8008100 <siprintf+0x38>)
 80080da:	9107      	str	r1, [sp, #28]
 80080dc:	9104      	str	r1, [sp, #16]
 80080de:	4909      	ldr	r1, [pc, #36]	; (8008104 <siprintf+0x3c>)
 80080e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080e4:	9105      	str	r1, [sp, #20]
 80080e6:	6800      	ldr	r0, [r0, #0]
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	a902      	add	r1, sp, #8
 80080ec:	f000 f866 	bl	80081bc <_svfiprintf_r>
 80080f0:	9b02      	ldr	r3, [sp, #8]
 80080f2:	2200      	movs	r2, #0
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	b01c      	add	sp, #112	; 0x70
 80080f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080fc:	b003      	add	sp, #12
 80080fe:	4770      	bx	lr
 8008100:	2000000c 	.word	0x2000000c
 8008104:	ffff0208 	.word	0xffff0208

08008108 <__ssputs_r>:
 8008108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800810c:	688e      	ldr	r6, [r1, #8]
 800810e:	429e      	cmp	r6, r3
 8008110:	4682      	mov	sl, r0
 8008112:	460c      	mov	r4, r1
 8008114:	4690      	mov	r8, r2
 8008116:	4699      	mov	r9, r3
 8008118:	d837      	bhi.n	800818a <__ssputs_r+0x82>
 800811a:	898a      	ldrh	r2, [r1, #12]
 800811c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008120:	d031      	beq.n	8008186 <__ssputs_r+0x7e>
 8008122:	6825      	ldr	r5, [r4, #0]
 8008124:	6909      	ldr	r1, [r1, #16]
 8008126:	1a6f      	subs	r7, r5, r1
 8008128:	6965      	ldr	r5, [r4, #20]
 800812a:	2302      	movs	r3, #2
 800812c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008130:	fb95 f5f3 	sdiv	r5, r5, r3
 8008134:	f109 0301 	add.w	r3, r9, #1
 8008138:	443b      	add	r3, r7
 800813a:	429d      	cmp	r5, r3
 800813c:	bf38      	it	cc
 800813e:	461d      	movcc	r5, r3
 8008140:	0553      	lsls	r3, r2, #21
 8008142:	d530      	bpl.n	80081a6 <__ssputs_r+0x9e>
 8008144:	4629      	mov	r1, r5
 8008146:	f000 fb2b 	bl	80087a0 <_malloc_r>
 800814a:	4606      	mov	r6, r0
 800814c:	b950      	cbnz	r0, 8008164 <__ssputs_r+0x5c>
 800814e:	230c      	movs	r3, #12
 8008150:	f8ca 3000 	str.w	r3, [sl]
 8008154:	89a3      	ldrh	r3, [r4, #12]
 8008156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008164:	463a      	mov	r2, r7
 8008166:	6921      	ldr	r1, [r4, #16]
 8008168:	f000 faa8 	bl	80086bc <memcpy>
 800816c:	89a3      	ldrh	r3, [r4, #12]
 800816e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	6126      	str	r6, [r4, #16]
 800817a:	6165      	str	r5, [r4, #20]
 800817c:	443e      	add	r6, r7
 800817e:	1bed      	subs	r5, r5, r7
 8008180:	6026      	str	r6, [r4, #0]
 8008182:	60a5      	str	r5, [r4, #8]
 8008184:	464e      	mov	r6, r9
 8008186:	454e      	cmp	r6, r9
 8008188:	d900      	bls.n	800818c <__ssputs_r+0x84>
 800818a:	464e      	mov	r6, r9
 800818c:	4632      	mov	r2, r6
 800818e:	4641      	mov	r1, r8
 8008190:	6820      	ldr	r0, [r4, #0]
 8008192:	f000 fa9e 	bl	80086d2 <memmove>
 8008196:	68a3      	ldr	r3, [r4, #8]
 8008198:	1b9b      	subs	r3, r3, r6
 800819a:	60a3      	str	r3, [r4, #8]
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	441e      	add	r6, r3
 80081a0:	6026      	str	r6, [r4, #0]
 80081a2:	2000      	movs	r0, #0
 80081a4:	e7dc      	b.n	8008160 <__ssputs_r+0x58>
 80081a6:	462a      	mov	r2, r5
 80081a8:	f000 fb54 	bl	8008854 <_realloc_r>
 80081ac:	4606      	mov	r6, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d1e2      	bne.n	8008178 <__ssputs_r+0x70>
 80081b2:	6921      	ldr	r1, [r4, #16]
 80081b4:	4650      	mov	r0, sl
 80081b6:	f000 faa5 	bl	8008704 <_free_r>
 80081ba:	e7c8      	b.n	800814e <__ssputs_r+0x46>

080081bc <_svfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	461d      	mov	r5, r3
 80081c2:	898b      	ldrh	r3, [r1, #12]
 80081c4:	061f      	lsls	r7, r3, #24
 80081c6:	b09d      	sub	sp, #116	; 0x74
 80081c8:	4680      	mov	r8, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	4616      	mov	r6, r2
 80081ce:	d50f      	bpl.n	80081f0 <_svfiprintf_r+0x34>
 80081d0:	690b      	ldr	r3, [r1, #16]
 80081d2:	b96b      	cbnz	r3, 80081f0 <_svfiprintf_r+0x34>
 80081d4:	2140      	movs	r1, #64	; 0x40
 80081d6:	f000 fae3 	bl	80087a0 <_malloc_r>
 80081da:	6020      	str	r0, [r4, #0]
 80081dc:	6120      	str	r0, [r4, #16]
 80081de:	b928      	cbnz	r0, 80081ec <_svfiprintf_r+0x30>
 80081e0:	230c      	movs	r3, #12
 80081e2:	f8c8 3000 	str.w	r3, [r8]
 80081e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081ea:	e0c8      	b.n	800837e <_svfiprintf_r+0x1c2>
 80081ec:	2340      	movs	r3, #64	; 0x40
 80081ee:	6163      	str	r3, [r4, #20]
 80081f0:	2300      	movs	r3, #0
 80081f2:	9309      	str	r3, [sp, #36]	; 0x24
 80081f4:	2320      	movs	r3, #32
 80081f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081fa:	2330      	movs	r3, #48	; 0x30
 80081fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008200:	9503      	str	r5, [sp, #12]
 8008202:	f04f 0b01 	mov.w	fp, #1
 8008206:	4637      	mov	r7, r6
 8008208:	463d      	mov	r5, r7
 800820a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800820e:	b10b      	cbz	r3, 8008214 <_svfiprintf_r+0x58>
 8008210:	2b25      	cmp	r3, #37	; 0x25
 8008212:	d13e      	bne.n	8008292 <_svfiprintf_r+0xd6>
 8008214:	ebb7 0a06 	subs.w	sl, r7, r6
 8008218:	d00b      	beq.n	8008232 <_svfiprintf_r+0x76>
 800821a:	4653      	mov	r3, sl
 800821c:	4632      	mov	r2, r6
 800821e:	4621      	mov	r1, r4
 8008220:	4640      	mov	r0, r8
 8008222:	f7ff ff71 	bl	8008108 <__ssputs_r>
 8008226:	3001      	adds	r0, #1
 8008228:	f000 80a4 	beq.w	8008374 <_svfiprintf_r+0x1b8>
 800822c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822e:	4453      	add	r3, sl
 8008230:	9309      	str	r3, [sp, #36]	; 0x24
 8008232:	783b      	ldrb	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 809d 	beq.w	8008374 <_svfiprintf_r+0x1b8>
 800823a:	2300      	movs	r3, #0
 800823c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	9307      	str	r3, [sp, #28]
 8008248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800824c:	931a      	str	r3, [sp, #104]	; 0x68
 800824e:	462f      	mov	r7, r5
 8008250:	2205      	movs	r2, #5
 8008252:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008256:	4850      	ldr	r0, [pc, #320]	; (8008398 <_svfiprintf_r+0x1dc>)
 8008258:	f7f7 ffba 	bl	80001d0 <memchr>
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	b9d0      	cbnz	r0, 8008296 <_svfiprintf_r+0xda>
 8008260:	06d9      	lsls	r1, r3, #27
 8008262:	bf44      	itt	mi
 8008264:	2220      	movmi	r2, #32
 8008266:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800826a:	071a      	lsls	r2, r3, #28
 800826c:	bf44      	itt	mi
 800826e:	222b      	movmi	r2, #43	; 0x2b
 8008270:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008274:	782a      	ldrb	r2, [r5, #0]
 8008276:	2a2a      	cmp	r2, #42	; 0x2a
 8008278:	d015      	beq.n	80082a6 <_svfiprintf_r+0xea>
 800827a:	9a07      	ldr	r2, [sp, #28]
 800827c:	462f      	mov	r7, r5
 800827e:	2000      	movs	r0, #0
 8008280:	250a      	movs	r5, #10
 8008282:	4639      	mov	r1, r7
 8008284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008288:	3b30      	subs	r3, #48	; 0x30
 800828a:	2b09      	cmp	r3, #9
 800828c:	d94d      	bls.n	800832a <_svfiprintf_r+0x16e>
 800828e:	b1b8      	cbz	r0, 80082c0 <_svfiprintf_r+0x104>
 8008290:	e00f      	b.n	80082b2 <_svfiprintf_r+0xf6>
 8008292:	462f      	mov	r7, r5
 8008294:	e7b8      	b.n	8008208 <_svfiprintf_r+0x4c>
 8008296:	4a40      	ldr	r2, [pc, #256]	; (8008398 <_svfiprintf_r+0x1dc>)
 8008298:	1a80      	subs	r0, r0, r2
 800829a:	fa0b f000 	lsl.w	r0, fp, r0
 800829e:	4318      	orrs	r0, r3
 80082a0:	9004      	str	r0, [sp, #16]
 80082a2:	463d      	mov	r5, r7
 80082a4:	e7d3      	b.n	800824e <_svfiprintf_r+0x92>
 80082a6:	9a03      	ldr	r2, [sp, #12]
 80082a8:	1d11      	adds	r1, r2, #4
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	9103      	str	r1, [sp, #12]
 80082ae:	2a00      	cmp	r2, #0
 80082b0:	db01      	blt.n	80082b6 <_svfiprintf_r+0xfa>
 80082b2:	9207      	str	r2, [sp, #28]
 80082b4:	e004      	b.n	80082c0 <_svfiprintf_r+0x104>
 80082b6:	4252      	negs	r2, r2
 80082b8:	f043 0302 	orr.w	r3, r3, #2
 80082bc:	9207      	str	r2, [sp, #28]
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	783b      	ldrb	r3, [r7, #0]
 80082c2:	2b2e      	cmp	r3, #46	; 0x2e
 80082c4:	d10c      	bne.n	80082e0 <_svfiprintf_r+0x124>
 80082c6:	787b      	ldrb	r3, [r7, #1]
 80082c8:	2b2a      	cmp	r3, #42	; 0x2a
 80082ca:	d133      	bne.n	8008334 <_svfiprintf_r+0x178>
 80082cc:	9b03      	ldr	r3, [sp, #12]
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	9203      	str	r2, [sp, #12]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	bfb8      	it	lt
 80082d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082dc:	3702      	adds	r7, #2
 80082de:	9305      	str	r3, [sp, #20]
 80082e0:	4d2e      	ldr	r5, [pc, #184]	; (800839c <_svfiprintf_r+0x1e0>)
 80082e2:	7839      	ldrb	r1, [r7, #0]
 80082e4:	2203      	movs	r2, #3
 80082e6:	4628      	mov	r0, r5
 80082e8:	f7f7 ff72 	bl	80001d0 <memchr>
 80082ec:	b138      	cbz	r0, 80082fe <_svfiprintf_r+0x142>
 80082ee:	2340      	movs	r3, #64	; 0x40
 80082f0:	1b40      	subs	r0, r0, r5
 80082f2:	fa03 f000 	lsl.w	r0, r3, r0
 80082f6:	9b04      	ldr	r3, [sp, #16]
 80082f8:	4303      	orrs	r3, r0
 80082fa:	3701      	adds	r7, #1
 80082fc:	9304      	str	r3, [sp, #16]
 80082fe:	7839      	ldrb	r1, [r7, #0]
 8008300:	4827      	ldr	r0, [pc, #156]	; (80083a0 <_svfiprintf_r+0x1e4>)
 8008302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008306:	2206      	movs	r2, #6
 8008308:	1c7e      	adds	r6, r7, #1
 800830a:	f7f7 ff61 	bl	80001d0 <memchr>
 800830e:	2800      	cmp	r0, #0
 8008310:	d038      	beq.n	8008384 <_svfiprintf_r+0x1c8>
 8008312:	4b24      	ldr	r3, [pc, #144]	; (80083a4 <_svfiprintf_r+0x1e8>)
 8008314:	bb13      	cbnz	r3, 800835c <_svfiprintf_r+0x1a0>
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	3307      	adds	r3, #7
 800831a:	f023 0307 	bic.w	r3, r3, #7
 800831e:	3308      	adds	r3, #8
 8008320:	9303      	str	r3, [sp, #12]
 8008322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008324:	444b      	add	r3, r9
 8008326:	9309      	str	r3, [sp, #36]	; 0x24
 8008328:	e76d      	b.n	8008206 <_svfiprintf_r+0x4a>
 800832a:	fb05 3202 	mla	r2, r5, r2, r3
 800832e:	2001      	movs	r0, #1
 8008330:	460f      	mov	r7, r1
 8008332:	e7a6      	b.n	8008282 <_svfiprintf_r+0xc6>
 8008334:	2300      	movs	r3, #0
 8008336:	3701      	adds	r7, #1
 8008338:	9305      	str	r3, [sp, #20]
 800833a:	4619      	mov	r1, r3
 800833c:	250a      	movs	r5, #10
 800833e:	4638      	mov	r0, r7
 8008340:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008344:	3a30      	subs	r2, #48	; 0x30
 8008346:	2a09      	cmp	r2, #9
 8008348:	d903      	bls.n	8008352 <_svfiprintf_r+0x196>
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0c8      	beq.n	80082e0 <_svfiprintf_r+0x124>
 800834e:	9105      	str	r1, [sp, #20]
 8008350:	e7c6      	b.n	80082e0 <_svfiprintf_r+0x124>
 8008352:	fb05 2101 	mla	r1, r5, r1, r2
 8008356:	2301      	movs	r3, #1
 8008358:	4607      	mov	r7, r0
 800835a:	e7f0      	b.n	800833e <_svfiprintf_r+0x182>
 800835c:	ab03      	add	r3, sp, #12
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	4622      	mov	r2, r4
 8008362:	4b11      	ldr	r3, [pc, #68]	; (80083a8 <_svfiprintf_r+0x1ec>)
 8008364:	a904      	add	r1, sp, #16
 8008366:	4640      	mov	r0, r8
 8008368:	f3af 8000 	nop.w
 800836c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008370:	4681      	mov	r9, r0
 8008372:	d1d6      	bne.n	8008322 <_svfiprintf_r+0x166>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	065b      	lsls	r3, r3, #25
 8008378:	f53f af35 	bmi.w	80081e6 <_svfiprintf_r+0x2a>
 800837c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800837e:	b01d      	add	sp, #116	; 0x74
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	ab03      	add	r3, sp, #12
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4622      	mov	r2, r4
 800838a:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <_svfiprintf_r+0x1ec>)
 800838c:	a904      	add	r1, sp, #16
 800838e:	4640      	mov	r0, r8
 8008390:	f000 f882 	bl	8008498 <_printf_i>
 8008394:	e7ea      	b.n	800836c <_svfiprintf_r+0x1b0>
 8008396:	bf00      	nop
 8008398:	080089c4 	.word	0x080089c4
 800839c:	080089ca 	.word	0x080089ca
 80083a0:	080089ce 	.word	0x080089ce
 80083a4:	00000000 	.word	0x00000000
 80083a8:	08008109 	.word	0x08008109

080083ac <_printf_common>:
 80083ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b0:	4691      	mov	r9, r2
 80083b2:	461f      	mov	r7, r3
 80083b4:	688a      	ldr	r2, [r1, #8]
 80083b6:	690b      	ldr	r3, [r1, #16]
 80083b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083bc:	4293      	cmp	r3, r2
 80083be:	bfb8      	it	lt
 80083c0:	4613      	movlt	r3, r2
 80083c2:	f8c9 3000 	str.w	r3, [r9]
 80083c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083ca:	4606      	mov	r6, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	b112      	cbz	r2, 80083d6 <_printf_common+0x2a>
 80083d0:	3301      	adds	r3, #1
 80083d2:	f8c9 3000 	str.w	r3, [r9]
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	0699      	lsls	r1, r3, #26
 80083da:	bf42      	ittt	mi
 80083dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80083e0:	3302      	addmi	r3, #2
 80083e2:	f8c9 3000 	strmi.w	r3, [r9]
 80083e6:	6825      	ldr	r5, [r4, #0]
 80083e8:	f015 0506 	ands.w	r5, r5, #6
 80083ec:	d107      	bne.n	80083fe <_printf_common+0x52>
 80083ee:	f104 0a19 	add.w	sl, r4, #25
 80083f2:	68e3      	ldr	r3, [r4, #12]
 80083f4:	f8d9 2000 	ldr.w	r2, [r9]
 80083f8:	1a9b      	subs	r3, r3, r2
 80083fa:	42ab      	cmp	r3, r5
 80083fc:	dc28      	bgt.n	8008450 <_printf_common+0xa4>
 80083fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	3300      	adds	r3, #0
 8008406:	bf18      	it	ne
 8008408:	2301      	movne	r3, #1
 800840a:	0692      	lsls	r2, r2, #26
 800840c:	d42d      	bmi.n	800846a <_printf_common+0xbe>
 800840e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008412:	4639      	mov	r1, r7
 8008414:	4630      	mov	r0, r6
 8008416:	47c0      	blx	r8
 8008418:	3001      	adds	r0, #1
 800841a:	d020      	beq.n	800845e <_printf_common+0xb2>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	68e5      	ldr	r5, [r4, #12]
 8008420:	f8d9 2000 	ldr.w	r2, [r9]
 8008424:	f003 0306 	and.w	r3, r3, #6
 8008428:	2b04      	cmp	r3, #4
 800842a:	bf08      	it	eq
 800842c:	1aad      	subeq	r5, r5, r2
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	6922      	ldr	r2, [r4, #16]
 8008432:	bf0c      	ite	eq
 8008434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008438:	2500      	movne	r5, #0
 800843a:	4293      	cmp	r3, r2
 800843c:	bfc4      	itt	gt
 800843e:	1a9b      	subgt	r3, r3, r2
 8008440:	18ed      	addgt	r5, r5, r3
 8008442:	f04f 0900 	mov.w	r9, #0
 8008446:	341a      	adds	r4, #26
 8008448:	454d      	cmp	r5, r9
 800844a:	d11a      	bne.n	8008482 <_printf_common+0xd6>
 800844c:	2000      	movs	r0, #0
 800844e:	e008      	b.n	8008462 <_printf_common+0xb6>
 8008450:	2301      	movs	r3, #1
 8008452:	4652      	mov	r2, sl
 8008454:	4639      	mov	r1, r7
 8008456:	4630      	mov	r0, r6
 8008458:	47c0      	blx	r8
 800845a:	3001      	adds	r0, #1
 800845c:	d103      	bne.n	8008466 <_printf_common+0xba>
 800845e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008466:	3501      	adds	r5, #1
 8008468:	e7c3      	b.n	80083f2 <_printf_common+0x46>
 800846a:	18e1      	adds	r1, r4, r3
 800846c:	1c5a      	adds	r2, r3, #1
 800846e:	2030      	movs	r0, #48	; 0x30
 8008470:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008474:	4422      	add	r2, r4
 8008476:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800847a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800847e:	3302      	adds	r3, #2
 8008480:	e7c5      	b.n	800840e <_printf_common+0x62>
 8008482:	2301      	movs	r3, #1
 8008484:	4622      	mov	r2, r4
 8008486:	4639      	mov	r1, r7
 8008488:	4630      	mov	r0, r6
 800848a:	47c0      	blx	r8
 800848c:	3001      	adds	r0, #1
 800848e:	d0e6      	beq.n	800845e <_printf_common+0xb2>
 8008490:	f109 0901 	add.w	r9, r9, #1
 8008494:	e7d8      	b.n	8008448 <_printf_common+0x9c>
	...

08008498 <_printf_i>:
 8008498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800849c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084a0:	460c      	mov	r4, r1
 80084a2:	7e09      	ldrb	r1, [r1, #24]
 80084a4:	b085      	sub	sp, #20
 80084a6:	296e      	cmp	r1, #110	; 0x6e
 80084a8:	4617      	mov	r7, r2
 80084aa:	4606      	mov	r6, r0
 80084ac:	4698      	mov	r8, r3
 80084ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b0:	f000 80b3 	beq.w	800861a <_printf_i+0x182>
 80084b4:	d822      	bhi.n	80084fc <_printf_i+0x64>
 80084b6:	2963      	cmp	r1, #99	; 0x63
 80084b8:	d036      	beq.n	8008528 <_printf_i+0x90>
 80084ba:	d80a      	bhi.n	80084d2 <_printf_i+0x3a>
 80084bc:	2900      	cmp	r1, #0
 80084be:	f000 80b9 	beq.w	8008634 <_printf_i+0x19c>
 80084c2:	2958      	cmp	r1, #88	; 0x58
 80084c4:	f000 8083 	beq.w	80085ce <_printf_i+0x136>
 80084c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80084d0:	e032      	b.n	8008538 <_printf_i+0xa0>
 80084d2:	2964      	cmp	r1, #100	; 0x64
 80084d4:	d001      	beq.n	80084da <_printf_i+0x42>
 80084d6:	2969      	cmp	r1, #105	; 0x69
 80084d8:	d1f6      	bne.n	80084c8 <_printf_i+0x30>
 80084da:	6820      	ldr	r0, [r4, #0]
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	0605      	lsls	r5, r0, #24
 80084e0:	f103 0104 	add.w	r1, r3, #4
 80084e4:	d52a      	bpl.n	800853c <_printf_i+0xa4>
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	da03      	bge.n	80084f6 <_printf_i+0x5e>
 80084ee:	222d      	movs	r2, #45	; 0x2d
 80084f0:	425b      	negs	r3, r3
 80084f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80084f6:	486f      	ldr	r0, [pc, #444]	; (80086b4 <_printf_i+0x21c>)
 80084f8:	220a      	movs	r2, #10
 80084fa:	e039      	b.n	8008570 <_printf_i+0xd8>
 80084fc:	2973      	cmp	r1, #115	; 0x73
 80084fe:	f000 809d 	beq.w	800863c <_printf_i+0x1a4>
 8008502:	d808      	bhi.n	8008516 <_printf_i+0x7e>
 8008504:	296f      	cmp	r1, #111	; 0x6f
 8008506:	d020      	beq.n	800854a <_printf_i+0xb2>
 8008508:	2970      	cmp	r1, #112	; 0x70
 800850a:	d1dd      	bne.n	80084c8 <_printf_i+0x30>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	f043 0320 	orr.w	r3, r3, #32
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	e003      	b.n	800851e <_printf_i+0x86>
 8008516:	2975      	cmp	r1, #117	; 0x75
 8008518:	d017      	beq.n	800854a <_printf_i+0xb2>
 800851a:	2978      	cmp	r1, #120	; 0x78
 800851c:	d1d4      	bne.n	80084c8 <_printf_i+0x30>
 800851e:	2378      	movs	r3, #120	; 0x78
 8008520:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008524:	4864      	ldr	r0, [pc, #400]	; (80086b8 <_printf_i+0x220>)
 8008526:	e055      	b.n	80085d4 <_printf_i+0x13c>
 8008528:	6813      	ldr	r3, [r2, #0]
 800852a:	1d19      	adds	r1, r3, #4
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	6011      	str	r1, [r2, #0]
 8008530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008534:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008538:	2301      	movs	r3, #1
 800853a:	e08c      	b.n	8008656 <_printf_i+0x1be>
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	6011      	str	r1, [r2, #0]
 8008540:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008544:	bf18      	it	ne
 8008546:	b21b      	sxthne	r3, r3
 8008548:	e7cf      	b.n	80084ea <_printf_i+0x52>
 800854a:	6813      	ldr	r3, [r2, #0]
 800854c:	6825      	ldr	r5, [r4, #0]
 800854e:	1d18      	adds	r0, r3, #4
 8008550:	6010      	str	r0, [r2, #0]
 8008552:	0628      	lsls	r0, r5, #24
 8008554:	d501      	bpl.n	800855a <_printf_i+0xc2>
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	e002      	b.n	8008560 <_printf_i+0xc8>
 800855a:	0668      	lsls	r0, r5, #25
 800855c:	d5fb      	bpl.n	8008556 <_printf_i+0xbe>
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	4854      	ldr	r0, [pc, #336]	; (80086b4 <_printf_i+0x21c>)
 8008562:	296f      	cmp	r1, #111	; 0x6f
 8008564:	bf14      	ite	ne
 8008566:	220a      	movne	r2, #10
 8008568:	2208      	moveq	r2, #8
 800856a:	2100      	movs	r1, #0
 800856c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008570:	6865      	ldr	r5, [r4, #4]
 8008572:	60a5      	str	r5, [r4, #8]
 8008574:	2d00      	cmp	r5, #0
 8008576:	f2c0 8095 	blt.w	80086a4 <_printf_i+0x20c>
 800857a:	6821      	ldr	r1, [r4, #0]
 800857c:	f021 0104 	bic.w	r1, r1, #4
 8008580:	6021      	str	r1, [r4, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d13d      	bne.n	8008602 <_printf_i+0x16a>
 8008586:	2d00      	cmp	r5, #0
 8008588:	f040 808e 	bne.w	80086a8 <_printf_i+0x210>
 800858c:	4665      	mov	r5, ip
 800858e:	2a08      	cmp	r2, #8
 8008590:	d10b      	bne.n	80085aa <_printf_i+0x112>
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	07db      	lsls	r3, r3, #31
 8008596:	d508      	bpl.n	80085aa <_printf_i+0x112>
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	6862      	ldr	r2, [r4, #4]
 800859c:	429a      	cmp	r2, r3
 800859e:	bfde      	ittt	le
 80085a0:	2330      	movle	r3, #48	; 0x30
 80085a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085a6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80085aa:	ebac 0305 	sub.w	r3, ip, r5
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	f8cd 8000 	str.w	r8, [sp]
 80085b4:	463b      	mov	r3, r7
 80085b6:	aa03      	add	r2, sp, #12
 80085b8:	4621      	mov	r1, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7ff fef6 	bl	80083ac <_printf_common>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d14d      	bne.n	8008660 <_printf_i+0x1c8>
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085c8:	b005      	add	sp, #20
 80085ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085ce:	4839      	ldr	r0, [pc, #228]	; (80086b4 <_printf_i+0x21c>)
 80085d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80085d4:	6813      	ldr	r3, [r2, #0]
 80085d6:	6821      	ldr	r1, [r4, #0]
 80085d8:	1d1d      	adds	r5, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6015      	str	r5, [r2, #0]
 80085de:	060a      	lsls	r2, r1, #24
 80085e0:	d50b      	bpl.n	80085fa <_printf_i+0x162>
 80085e2:	07ca      	lsls	r2, r1, #31
 80085e4:	bf44      	itt	mi
 80085e6:	f041 0120 	orrmi.w	r1, r1, #32
 80085ea:	6021      	strmi	r1, [r4, #0]
 80085ec:	b91b      	cbnz	r3, 80085f6 <_printf_i+0x15e>
 80085ee:	6822      	ldr	r2, [r4, #0]
 80085f0:	f022 0220 	bic.w	r2, r2, #32
 80085f4:	6022      	str	r2, [r4, #0]
 80085f6:	2210      	movs	r2, #16
 80085f8:	e7b7      	b.n	800856a <_printf_i+0xd2>
 80085fa:	064d      	lsls	r5, r1, #25
 80085fc:	bf48      	it	mi
 80085fe:	b29b      	uxthmi	r3, r3
 8008600:	e7ef      	b.n	80085e2 <_printf_i+0x14a>
 8008602:	4665      	mov	r5, ip
 8008604:	fbb3 f1f2 	udiv	r1, r3, r2
 8008608:	fb02 3311 	mls	r3, r2, r1, r3
 800860c:	5cc3      	ldrb	r3, [r0, r3]
 800860e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008612:	460b      	mov	r3, r1
 8008614:	2900      	cmp	r1, #0
 8008616:	d1f5      	bne.n	8008604 <_printf_i+0x16c>
 8008618:	e7b9      	b.n	800858e <_printf_i+0xf6>
 800861a:	6813      	ldr	r3, [r2, #0]
 800861c:	6825      	ldr	r5, [r4, #0]
 800861e:	6961      	ldr	r1, [r4, #20]
 8008620:	1d18      	adds	r0, r3, #4
 8008622:	6010      	str	r0, [r2, #0]
 8008624:	0628      	lsls	r0, r5, #24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	d501      	bpl.n	800862e <_printf_i+0x196>
 800862a:	6019      	str	r1, [r3, #0]
 800862c:	e002      	b.n	8008634 <_printf_i+0x19c>
 800862e:	066a      	lsls	r2, r5, #25
 8008630:	d5fb      	bpl.n	800862a <_printf_i+0x192>
 8008632:	8019      	strh	r1, [r3, #0]
 8008634:	2300      	movs	r3, #0
 8008636:	6123      	str	r3, [r4, #16]
 8008638:	4665      	mov	r5, ip
 800863a:	e7b9      	b.n	80085b0 <_printf_i+0x118>
 800863c:	6813      	ldr	r3, [r2, #0]
 800863e:	1d19      	adds	r1, r3, #4
 8008640:	6011      	str	r1, [r2, #0]
 8008642:	681d      	ldr	r5, [r3, #0]
 8008644:	6862      	ldr	r2, [r4, #4]
 8008646:	2100      	movs	r1, #0
 8008648:	4628      	mov	r0, r5
 800864a:	f7f7 fdc1 	bl	80001d0 <memchr>
 800864e:	b108      	cbz	r0, 8008654 <_printf_i+0x1bc>
 8008650:	1b40      	subs	r0, r0, r5
 8008652:	6060      	str	r0, [r4, #4]
 8008654:	6863      	ldr	r3, [r4, #4]
 8008656:	6123      	str	r3, [r4, #16]
 8008658:	2300      	movs	r3, #0
 800865a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800865e:	e7a7      	b.n	80085b0 <_printf_i+0x118>
 8008660:	6923      	ldr	r3, [r4, #16]
 8008662:	462a      	mov	r2, r5
 8008664:	4639      	mov	r1, r7
 8008666:	4630      	mov	r0, r6
 8008668:	47c0      	blx	r8
 800866a:	3001      	adds	r0, #1
 800866c:	d0aa      	beq.n	80085c4 <_printf_i+0x12c>
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	079b      	lsls	r3, r3, #30
 8008672:	d413      	bmi.n	800869c <_printf_i+0x204>
 8008674:	68e0      	ldr	r0, [r4, #12]
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	4298      	cmp	r0, r3
 800867a:	bfb8      	it	lt
 800867c:	4618      	movlt	r0, r3
 800867e:	e7a3      	b.n	80085c8 <_printf_i+0x130>
 8008680:	2301      	movs	r3, #1
 8008682:	464a      	mov	r2, r9
 8008684:	4639      	mov	r1, r7
 8008686:	4630      	mov	r0, r6
 8008688:	47c0      	blx	r8
 800868a:	3001      	adds	r0, #1
 800868c:	d09a      	beq.n	80085c4 <_printf_i+0x12c>
 800868e:	3501      	adds	r5, #1
 8008690:	68e3      	ldr	r3, [r4, #12]
 8008692:	9a03      	ldr	r2, [sp, #12]
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	42ab      	cmp	r3, r5
 8008698:	dcf2      	bgt.n	8008680 <_printf_i+0x1e8>
 800869a:	e7eb      	b.n	8008674 <_printf_i+0x1dc>
 800869c:	2500      	movs	r5, #0
 800869e:	f104 0919 	add.w	r9, r4, #25
 80086a2:	e7f5      	b.n	8008690 <_printf_i+0x1f8>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1ac      	bne.n	8008602 <_printf_i+0x16a>
 80086a8:	7803      	ldrb	r3, [r0, #0]
 80086aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b2:	e76c      	b.n	800858e <_printf_i+0xf6>
 80086b4:	080089d5 	.word	0x080089d5
 80086b8:	080089e6 	.word	0x080089e6

080086bc <memcpy>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	1e43      	subs	r3, r0, #1
 80086c0:	440a      	add	r2, r1
 80086c2:	4291      	cmp	r1, r2
 80086c4:	d100      	bne.n	80086c8 <memcpy+0xc>
 80086c6:	bd10      	pop	{r4, pc}
 80086c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d0:	e7f7      	b.n	80086c2 <memcpy+0x6>

080086d2 <memmove>:
 80086d2:	4288      	cmp	r0, r1
 80086d4:	b510      	push	{r4, lr}
 80086d6:	eb01 0302 	add.w	r3, r1, r2
 80086da:	d807      	bhi.n	80086ec <memmove+0x1a>
 80086dc:	1e42      	subs	r2, r0, #1
 80086de:	4299      	cmp	r1, r3
 80086e0:	d00a      	beq.n	80086f8 <memmove+0x26>
 80086e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80086ea:	e7f8      	b.n	80086de <memmove+0xc>
 80086ec:	4283      	cmp	r3, r0
 80086ee:	d9f5      	bls.n	80086dc <memmove+0xa>
 80086f0:	1881      	adds	r1, r0, r2
 80086f2:	1ad2      	subs	r2, r2, r3
 80086f4:	42d3      	cmn	r3, r2
 80086f6:	d100      	bne.n	80086fa <memmove+0x28>
 80086f8:	bd10      	pop	{r4, pc}
 80086fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008702:	e7f7      	b.n	80086f4 <memmove+0x22>

08008704 <_free_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4605      	mov	r5, r0
 8008708:	2900      	cmp	r1, #0
 800870a:	d045      	beq.n	8008798 <_free_r+0x94>
 800870c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008710:	1f0c      	subs	r4, r1, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	bfb8      	it	lt
 8008716:	18e4      	addlt	r4, r4, r3
 8008718:	f000 f8d2 	bl	80088c0 <__malloc_lock>
 800871c:	4a1f      	ldr	r2, [pc, #124]	; (800879c <_free_r+0x98>)
 800871e:	6813      	ldr	r3, [r2, #0]
 8008720:	4610      	mov	r0, r2
 8008722:	b933      	cbnz	r3, 8008732 <_free_r+0x2e>
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	6014      	str	r4, [r2, #0]
 8008728:	4628      	mov	r0, r5
 800872a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800872e:	f000 b8c8 	b.w	80088c2 <__malloc_unlock>
 8008732:	42a3      	cmp	r3, r4
 8008734:	d90c      	bls.n	8008750 <_free_r+0x4c>
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	1862      	adds	r2, r4, r1
 800873a:	4293      	cmp	r3, r2
 800873c:	bf04      	itt	eq
 800873e:	681a      	ldreq	r2, [r3, #0]
 8008740:	685b      	ldreq	r3, [r3, #4]
 8008742:	6063      	str	r3, [r4, #4]
 8008744:	bf04      	itt	eq
 8008746:	1852      	addeq	r2, r2, r1
 8008748:	6022      	streq	r2, [r4, #0]
 800874a:	6004      	str	r4, [r0, #0]
 800874c:	e7ec      	b.n	8008728 <_free_r+0x24>
 800874e:	4613      	mov	r3, r2
 8008750:	685a      	ldr	r2, [r3, #4]
 8008752:	b10a      	cbz	r2, 8008758 <_free_r+0x54>
 8008754:	42a2      	cmp	r2, r4
 8008756:	d9fa      	bls.n	800874e <_free_r+0x4a>
 8008758:	6819      	ldr	r1, [r3, #0]
 800875a:	1858      	adds	r0, r3, r1
 800875c:	42a0      	cmp	r0, r4
 800875e:	d10b      	bne.n	8008778 <_free_r+0x74>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	4401      	add	r1, r0
 8008764:	1858      	adds	r0, r3, r1
 8008766:	4282      	cmp	r2, r0
 8008768:	6019      	str	r1, [r3, #0]
 800876a:	d1dd      	bne.n	8008728 <_free_r+0x24>
 800876c:	6810      	ldr	r0, [r2, #0]
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	605a      	str	r2, [r3, #4]
 8008772:	4401      	add	r1, r0
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	e7d7      	b.n	8008728 <_free_r+0x24>
 8008778:	d902      	bls.n	8008780 <_free_r+0x7c>
 800877a:	230c      	movs	r3, #12
 800877c:	602b      	str	r3, [r5, #0]
 800877e:	e7d3      	b.n	8008728 <_free_r+0x24>
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	1821      	adds	r1, r4, r0
 8008784:	428a      	cmp	r2, r1
 8008786:	bf04      	itt	eq
 8008788:	6811      	ldreq	r1, [r2, #0]
 800878a:	6852      	ldreq	r2, [r2, #4]
 800878c:	6062      	str	r2, [r4, #4]
 800878e:	bf04      	itt	eq
 8008790:	1809      	addeq	r1, r1, r0
 8008792:	6021      	streq	r1, [r4, #0]
 8008794:	605c      	str	r4, [r3, #4]
 8008796:	e7c7      	b.n	8008728 <_free_r+0x24>
 8008798:	bd38      	pop	{r3, r4, r5, pc}
 800879a:	bf00      	nop
 800879c:	200000c0 	.word	0x200000c0

080087a0 <_malloc_r>:
 80087a0:	b570      	push	{r4, r5, r6, lr}
 80087a2:	1ccd      	adds	r5, r1, #3
 80087a4:	f025 0503 	bic.w	r5, r5, #3
 80087a8:	3508      	adds	r5, #8
 80087aa:	2d0c      	cmp	r5, #12
 80087ac:	bf38      	it	cc
 80087ae:	250c      	movcc	r5, #12
 80087b0:	2d00      	cmp	r5, #0
 80087b2:	4606      	mov	r6, r0
 80087b4:	db01      	blt.n	80087ba <_malloc_r+0x1a>
 80087b6:	42a9      	cmp	r1, r5
 80087b8:	d903      	bls.n	80087c2 <_malloc_r+0x22>
 80087ba:	230c      	movs	r3, #12
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	2000      	movs	r0, #0
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
 80087c2:	f000 f87d 	bl	80088c0 <__malloc_lock>
 80087c6:	4a21      	ldr	r2, [pc, #132]	; (800884c <_malloc_r+0xac>)
 80087c8:	6814      	ldr	r4, [r2, #0]
 80087ca:	4621      	mov	r1, r4
 80087cc:	b991      	cbnz	r1, 80087f4 <_malloc_r+0x54>
 80087ce:	4c20      	ldr	r4, [pc, #128]	; (8008850 <_malloc_r+0xb0>)
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	b91b      	cbnz	r3, 80087dc <_malloc_r+0x3c>
 80087d4:	4630      	mov	r0, r6
 80087d6:	f000 f863 	bl	80088a0 <_sbrk_r>
 80087da:	6020      	str	r0, [r4, #0]
 80087dc:	4629      	mov	r1, r5
 80087de:	4630      	mov	r0, r6
 80087e0:	f000 f85e 	bl	80088a0 <_sbrk_r>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d124      	bne.n	8008832 <_malloc_r+0x92>
 80087e8:	230c      	movs	r3, #12
 80087ea:	6033      	str	r3, [r6, #0]
 80087ec:	4630      	mov	r0, r6
 80087ee:	f000 f868 	bl	80088c2 <__malloc_unlock>
 80087f2:	e7e4      	b.n	80087be <_malloc_r+0x1e>
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	1b5b      	subs	r3, r3, r5
 80087f8:	d418      	bmi.n	800882c <_malloc_r+0x8c>
 80087fa:	2b0b      	cmp	r3, #11
 80087fc:	d90f      	bls.n	800881e <_malloc_r+0x7e>
 80087fe:	600b      	str	r3, [r1, #0]
 8008800:	50cd      	str	r5, [r1, r3]
 8008802:	18cc      	adds	r4, r1, r3
 8008804:	4630      	mov	r0, r6
 8008806:	f000 f85c 	bl	80088c2 <__malloc_unlock>
 800880a:	f104 000b 	add.w	r0, r4, #11
 800880e:	1d23      	adds	r3, r4, #4
 8008810:	f020 0007 	bic.w	r0, r0, #7
 8008814:	1ac3      	subs	r3, r0, r3
 8008816:	d0d3      	beq.n	80087c0 <_malloc_r+0x20>
 8008818:	425a      	negs	r2, r3
 800881a:	50e2      	str	r2, [r4, r3]
 800881c:	e7d0      	b.n	80087c0 <_malloc_r+0x20>
 800881e:	428c      	cmp	r4, r1
 8008820:	684b      	ldr	r3, [r1, #4]
 8008822:	bf16      	itet	ne
 8008824:	6063      	strne	r3, [r4, #4]
 8008826:	6013      	streq	r3, [r2, #0]
 8008828:	460c      	movne	r4, r1
 800882a:	e7eb      	b.n	8008804 <_malloc_r+0x64>
 800882c:	460c      	mov	r4, r1
 800882e:	6849      	ldr	r1, [r1, #4]
 8008830:	e7cc      	b.n	80087cc <_malloc_r+0x2c>
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d005      	beq.n	8008848 <_malloc_r+0xa8>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4630      	mov	r0, r6
 8008840:	f000 f82e 	bl	80088a0 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d0cf      	beq.n	80087e8 <_malloc_r+0x48>
 8008848:	6025      	str	r5, [r4, #0]
 800884a:	e7db      	b.n	8008804 <_malloc_r+0x64>
 800884c:	200000c0 	.word	0x200000c0
 8008850:	200000c4 	.word	0x200000c4

08008854 <_realloc_r>:
 8008854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008856:	4607      	mov	r7, r0
 8008858:	4614      	mov	r4, r2
 800885a:	460e      	mov	r6, r1
 800885c:	b921      	cbnz	r1, 8008868 <_realloc_r+0x14>
 800885e:	4611      	mov	r1, r2
 8008860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008864:	f7ff bf9c 	b.w	80087a0 <_malloc_r>
 8008868:	b922      	cbnz	r2, 8008874 <_realloc_r+0x20>
 800886a:	f7ff ff4b 	bl	8008704 <_free_r>
 800886e:	4625      	mov	r5, r4
 8008870:	4628      	mov	r0, r5
 8008872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008874:	f000 f826 	bl	80088c4 <_malloc_usable_size_r>
 8008878:	42a0      	cmp	r0, r4
 800887a:	d20f      	bcs.n	800889c <_realloc_r+0x48>
 800887c:	4621      	mov	r1, r4
 800887e:	4638      	mov	r0, r7
 8008880:	f7ff ff8e 	bl	80087a0 <_malloc_r>
 8008884:	4605      	mov	r5, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	d0f2      	beq.n	8008870 <_realloc_r+0x1c>
 800888a:	4631      	mov	r1, r6
 800888c:	4622      	mov	r2, r4
 800888e:	f7ff ff15 	bl	80086bc <memcpy>
 8008892:	4631      	mov	r1, r6
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff ff35 	bl	8008704 <_free_r>
 800889a:	e7e9      	b.n	8008870 <_realloc_r+0x1c>
 800889c:	4635      	mov	r5, r6
 800889e:	e7e7      	b.n	8008870 <_realloc_r+0x1c>

080088a0 <_sbrk_r>:
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4c06      	ldr	r4, [pc, #24]	; (80088bc <_sbrk_r+0x1c>)
 80088a4:	2300      	movs	r3, #0
 80088a6:	4605      	mov	r5, r0
 80088a8:	4608      	mov	r0, r1
 80088aa:	6023      	str	r3, [r4, #0]
 80088ac:	f7f9 fb2e 	bl	8001f0c <_sbrk>
 80088b0:	1c43      	adds	r3, r0, #1
 80088b2:	d102      	bne.n	80088ba <_sbrk_r+0x1a>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	b103      	cbz	r3, 80088ba <_sbrk_r+0x1a>
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	bd38      	pop	{r3, r4, r5, pc}
 80088bc:	2000062c 	.word	0x2000062c

080088c0 <__malloc_lock>:
 80088c0:	4770      	bx	lr

080088c2 <__malloc_unlock>:
 80088c2:	4770      	bx	lr

080088c4 <_malloc_usable_size_r>:
 80088c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c8:	1f18      	subs	r0, r3, #4
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfbc      	itt	lt
 80088ce:	580b      	ldrlt	r3, [r1, r0]
 80088d0:	18c0      	addlt	r0, r0, r3
 80088d2:	4770      	bx	lr

080088d4 <_init>:
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	bf00      	nop
 80088d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088da:	bc08      	pop	{r3}
 80088dc:	469e      	mov	lr, r3
 80088de:	4770      	bx	lr

080088e0 <_fini>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr


imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000846c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e4  080086e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086ec  080086ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086ec  080086ec  000186ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080086f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000428  20000074  08008768  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08008768  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5ad  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d3c  00000000  00000000  0002e651  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef0  00000000  00000000  00030390  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e28  00000000  00000000  00031280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208f3  00000000  00000000  000320a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a5f7  00000000  00000000  0005299b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc226  00000000  00000000  0005cf92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001291b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004318  00000000  00000000  00129234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e4 	.word	0x080085e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080085e4 	.word	0x080085e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setup_mpu>:
		soft_rtc_imu_m = soft_rtc_m;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  }*/
//}

void setup_mpu(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af04      	add	r7, sp, #16
	uint8_t dat[] = {5, 16, 1, 1, 8, 8};
 8000576:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <setup_mpu+0x74>)
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	6018      	str	r0, [r3, #0]
 8000582:	3304      	adds	r3, #4
 8000584:	8019      	strh	r1, [r3, #0]
	uint8_t adds[] = {107, 55, 26, 56, 27, 28};
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <setup_mpu+0x78>)
 8000588:	463b      	mov	r3, r7
 800058a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058e:	6018      	str	r0, [r3, #0]
 8000590:	3304      	adds	r3, #4
 8000592:	8019      	strh	r1, [r3, #0]
	uint8_t n_of_bytes = sizeof(dat) / sizeof(dat[0]);
 8000594:	2306      	movs	r3, #6
 8000596:	73bb      	strb	r3, [r7, #14]
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e019      	b.n	80005d2 <setup_mpu+0x62>
		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[idx], 1, &dat[idx], 1, 1000);
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	4413      	add	r3, r2
 80005a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f107 0208 	add.w	r2, r7, #8
 80005b2:	4413      	add	r3, r2
 80005b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b8:	9202      	str	r2, [sp, #8]
 80005ba:	2201      	movs	r2, #1
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	460a      	mov	r2, r1
 80005c4:	21d0      	movs	r1, #208	; 0xd0
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <setup_mpu+0x7c>)
 80005c8:	f002 fb12 	bl	8002bf0 <HAL_I2C_Mem_Write>
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	3301      	adds	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	7bfa      	ldrb	r2, [r7, #15]
 80005d4:	7bbb      	ldrb	r3, [r7, #14]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3e1      	bcc.n	800059e <setup_mpu+0x2e>
	}
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	080085fc 	.word	0x080085fc
 80005e8:	08008604 	.word	0x08008604
 80005ec:	2000016c 	.word	0x2000016c

080005f0 <make_message>:

void make_message(void) {
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	b097      	sub	sp, #92	; 0x5c
 80005f4:	af0e      	add	r7, sp, #56	; 0x38
	sprintf(str,
 80005f6:	4b73      	ldr	r3, [pc, #460]	; (80007c4 <make_message+0x1d4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	469c      	mov	ip, r3
 80005fc:	4b72      	ldr	r3, [pc, #456]	; (80007c8 <make_message+0x1d8>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	469e      	mov	lr, r3
		"%04x"																			//4
		"\n", 																			//1
																								//=78
		(uint8_t)soft_rtc_imu_m,
		(uint8_t)soft_rtc_imu_s,
		(uint16_t)(soft_rtc_imu_subs>>16),
 8000602:	4b72      	ldr	r3, [pc, #456]	; (80007cc <make_message+0x1dc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	b29b      	uxth	r3, r3
	sprintf(str,
 800060a:	461c      	mov	r4, r3
		(uint16_t)(soft_rtc_imu_subs),
 800060c:	4b6f      	ldr	r3, [pc, #444]	; (80007cc <make_message+0x1dc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
	sprintf(str,
 8000612:	461d      	mov	r5, r3

		(uint16_t)(dat_buf[0]<<8 | dat_buf[1]),
 8000614:	4b6e      	ldr	r3, [pc, #440]	; (80007d0 <make_message+0x1e0>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b6c      	ldr	r3, [pc, #432]	; (80007d0 <make_message+0x1e0>)
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b29b      	uxth	r3, r3
	sprintf(str,
 8000628:	461e      	mov	r6, r3
		(uint16_t)(dat_buf[2]<<8 | dat_buf[3]),
 800062a:	4b69      	ldr	r3, [pc, #420]	; (80007d0 <make_message+0x1e0>)
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21a      	sxth	r2, r3
 8000632:	4b67      	ldr	r3, [pc, #412]	; (80007d0 <make_message+0x1e0>)
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29b      	uxth	r3, r3
	sprintf(str,
 800063e:	61fb      	str	r3, [r7, #28]
		(uint16_t)(dat_buf[4]<<8 | dat_buf[5]),
 8000640:	4b63      	ldr	r3, [pc, #396]	; (80007d0 <make_message+0x1e0>)
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b61      	ldr	r3, [pc, #388]	; (80007d0 <make_message+0x1e0>)
 800064a:	795b      	ldrb	r3, [r3, #5]
 800064c:	b21b      	sxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b21b      	sxth	r3, r3
 8000652:	b29b      	uxth	r3, r3
	sprintf(str,
 8000654:	61bb      	str	r3, [r7, #24]
		(uint16_t)(dat_buf[6]<<8 | dat_buf[7]),
 8000656:	4b5e      	ldr	r3, [pc, #376]	; (80007d0 <make_message+0x1e0>)
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21a      	sxth	r2, r3
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <make_message+0x1e0>)
 8000660:	79db      	ldrb	r3, [r3, #7]
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21b      	sxth	r3, r3
 8000668:	b29b      	uxth	r3, r3
	sprintf(str,
 800066a:	617b      	str	r3, [r7, #20]
		(uint16_t)(dat_buf[8]<<8 | dat_buf[9]),
 800066c:	4b58      	ldr	r3, [pc, #352]	; (80007d0 <make_message+0x1e0>)
 800066e:	7a1b      	ldrb	r3, [r3, #8]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b21a      	sxth	r2, r3
 8000674:	4b56      	ldr	r3, [pc, #344]	; (80007d0 <make_message+0x1e0>)
 8000676:	7a5b      	ldrb	r3, [r3, #9]
 8000678:	b21b      	sxth	r3, r3
 800067a:	4313      	orrs	r3, r2
 800067c:	b21b      	sxth	r3, r3
 800067e:	b29b      	uxth	r3, r3
	sprintf(str,
 8000680:	613b      	str	r3, [r7, #16]
		(uint16_t)(dat_buf[10]<<8 | dat_buf[11]),
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <make_message+0x1e0>)
 8000684:	7a9b      	ldrb	r3, [r3, #10]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <make_message+0x1e0>)
 800068c:	7adb      	ldrb	r3, [r3, #11]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29b      	uxth	r3, r3
	sprintf(str,
 8000696:	60fb      	str	r3, [r7, #12]
		(uint16_t)(dat_buf[12]<<8 | dat_buf[13]),
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <make_message+0x1e0>)
 800069a:	7b1b      	ldrb	r3, [r3, #12]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	4b4b      	ldr	r3, [pc, #300]	; (80007d0 <make_message+0x1e0>)
 80006a2:	7b5b      	ldrb	r3, [r3, #13]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	b29b      	uxth	r3, r3
	sprintf(str,
 80006ac:	60bb      	str	r3, [r7, #8]

		(uint16_t)(dat_[1]<<8 | dat_[0]),
 80006ae:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <make_message+0x1e4>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	4b47      	ldr	r3, [pc, #284]	; (80007d4 <make_message+0x1e4>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29b      	uxth	r3, r3
	sprintf(str,
 80006c2:	607b      	str	r3, [r7, #4]
		(uint16_t)(dat_[3]<<8 | dat_[2]),
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <make_message+0x1e4>)
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <make_message+0x1e4>)
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	b29b      	uxth	r3, r3
	sprintf(str,
 80006d8:	4618      	mov	r0, r3
		(uint16_t)(dat_[5]<<8 | dat_[4]),
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <make_message+0x1e4>)
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <make_message+0x1e4>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	b29b      	uxth	r3, r3
	sprintf(str,
 80006ee:	4619      	mov	r1, r3
		(uint16_t)(dat_[7]<<8 | dat_[6]),
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <make_message+0x1e4>)
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <make_message+0x1e4>)
 80006fa:	799b      	ldrb	r3, [r3, #6]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b21b      	sxth	r3, r3
 8000702:	b29b      	uxth	r3, r3
	sprintf(str,
 8000704:	461a      	mov	r2, r3
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <make_message+0x1e8>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	930d      	str	r3, [sp, #52]	; 0x34
 800070c:	920c      	str	r2, [sp, #48]	; 0x30
 800070e:	910b      	str	r1, [sp, #44]	; 0x2c
 8000710:	900a      	str	r0, [sp, #40]	; 0x28
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	9209      	str	r2, [sp, #36]	; 0x24
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	9208      	str	r2, [sp, #32]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	9207      	str	r2, [sp, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	9206      	str	r2, [sp, #24]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	9205      	str	r2, [sp, #20]
 8000726:	69ba      	ldr	r2, [r7, #24]
 8000728:	9204      	str	r2, [sp, #16]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	9303      	str	r3, [sp, #12]
 800072e:	9602      	str	r6, [sp, #8]
 8000730:	9501      	str	r5, [sp, #4]
 8000732:	9400      	str	r4, [sp, #0]
 8000734:	4673      	mov	r3, lr
 8000736:	4662      	mov	r2, ip
 8000738:	4928      	ldr	r1, [pc, #160]	; (80007dc <make_message+0x1ec>)
 800073a:	4829      	ldr	r0, [pc, #164]	; (80007e0 <make_message+0x1f0>)
 800073c:	f007 fb4c 	bl	8007dd8 <siprintf>

		count
	);
	if (buf_flag_cameras_ts_ready == 1) {
 8000740:	4b28      	ldr	r3, [pc, #160]	; (80007e4 <make_message+0x1f4>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d115      	bne.n	8000774 <make_message+0x184>
		sprintf(str + N_IMU_CHARS,
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <make_message+0x1f8>)
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <make_message+0x1fc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	4b27      	ldr	r3, [pc, #156]	; (80007f0 <make_message+0x200>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461c      	mov	r4, r3
			"%02x %02x %04x %04x"	 										  //15
			"\n", 																			//1
																									//=18
			(uint8_t)soft_rtc_cameras_m,
			(uint8_t)soft_rtc_cameras_s,
			(uint16_t)(soft_rtc_cameras_subs>>16),
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <make_message+0x204>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	b29b      	uxth	r3, r3
		sprintf(str + N_IMU_CHARS,
 800075e:	461a      	mov	r2, r3
			(uint16_t)(soft_rtc_cameras_subs)
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <make_message+0x204>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
		sprintf(str + N_IMU_CHARS,
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	4623      	mov	r3, r4
 800076c:	460a      	mov	r2, r1
 800076e:	4922      	ldr	r1, [pc, #136]	; (80007f8 <make_message+0x208>)
 8000770:	f007 fb32 	bl	8007dd8 <siprintf>
		);
	}
  if (buf_flag_mocap_ts_ready == 1) {
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <make_message+0x20c>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d11e      	bne.n	80007ba <make_message+0x1ca>
		sprintf(str + N_IMU_CHARS + buf_flag_cameras_ts_ready * N_CAMERAS_CHARS,
 800077c:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <make_message+0x1f4>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4613      	mov	r3, r2
 8000784:	00db      	lsls	r3, r3, #3
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	334e      	adds	r3, #78	; 0x4e
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <make_message+0x1f0>)
 800078e:	1898      	adds	r0, r3, r2
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <make_message+0x210>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <make_message+0x214>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	461c      	mov	r4, r3
			"%02x %02x %04x %04x"											  //15
			"\n", 																			//1
																									//=18
			(uint8_t)soft_rtc_mocap_m,
			(uint8_t)soft_rtc_mocap_s,
			(uint16_t)(soft_rtc_mocap_subs>>16),
 800079c:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <make_message+0x218>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	0c1b      	lsrs	r3, r3, #16
 80007a2:	b29b      	uxth	r3, r3
		sprintf(str + N_IMU_CHARS + buf_flag_cameras_ts_ready * N_CAMERAS_CHARS,
 80007a4:	461a      	mov	r2, r3
			(uint16_t)(soft_rtc_mocap_subs)
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <make_message+0x218>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	b29b      	uxth	r3, r3
		sprintf(str + N_IMU_CHARS + buf_flag_cameras_ts_ready * N_CAMERAS_CHARS,
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	9200      	str	r2, [sp, #0]
 80007b0:	4623      	mov	r3, r4
 80007b2:	460a      	mov	r2, r1
 80007b4:	4915      	ldr	r1, [pc, #84]	; (800080c <make_message+0x21c>)
 80007b6:	f007 fb0f 	bl	8007dd8 <siprintf>
		);
	}
}
 80007ba:	bf00      	nop
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000009a 	.word	0x2000009a
 80007c8:	2000009b 	.word	0x2000009b
 80007cc:	2000009c 	.word	0x2000009c
 80007d0:	200003b0 	.word	0x200003b0
 80007d4:	200002b8 	.word	0x200002b8
 80007d8:	20000090 	.word	0x20000090
 80007dc:	0800860c 	.word	0x0800860c
 80007e0:	200003c0 	.word	0x200003c0
 80007e4:	20000095 	.word	0x20000095
 80007e8:	2000040e 	.word	0x2000040e
 80007ec:	200000a0 	.word	0x200000a0
 80007f0:	200000a1 	.word	0x200000a1
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	08008660 	.word	0x08008660
 80007fc:	20000096 	.word	0x20000096
 8000800:	200000a8 	.word	0x200000a8
 8000804:	200000a9 	.word	0x200000a9
 8000808:	200000ac 	.word	0x200000ac
 800080c:	08008678 	.word	0x08008678

08000810 <cp>:
	for (uint16_t i=0; i<n; i++) {
		;
	}
}

void cp() {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_BYTES; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	71fb      	strb	r3, [r7, #7]
 800081a:	e008      	b.n	800082e <cp+0x1e>
		dat_buf[i] = dat[i];
 800081c:	79fa      	ldrb	r2, [r7, #7]
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <cp+0x30>)
 8000822:	5c89      	ldrb	r1, [r1, r2]
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <cp+0x34>)
 8000826:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<N_BYTES; i++) {
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	3301      	adds	r3, #1
 800082c:	71fb      	strb	r3, [r7, #7]
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b0f      	cmp	r3, #15
 8000832:	d9f3      	bls.n	800081c <cp+0xc>
	}
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	200000bc 	.word	0x200000bc
 8000844:	200003b0 	.word	0x200003b0

08000848 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	429a      	cmp	r2, r3
 800085a:	d126      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x62>
		soft_rtc_s ++;
 800085c:	4b17      	ldr	r3, [pc, #92]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000866:	701a      	strb	r2, [r3, #0]
		if (soft_rtc_s == 60) {
 8000868:	4b14      	ldr	r3, [pc, #80]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b3c      	cmp	r3, #60	; 0x3c
 800086e:	d11c      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x62>
			soft_rtc_s = 0;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			soft_rtc_m ++;
 8000876:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000880:	701a      	strb	r2, [r3, #0]
			if (soft_rtc_m == 60) {
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b3c      	cmp	r3, #60	; 0x3c
 8000888:	d10f      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x62>
				soft_rtc_m = 0;
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
				soft_rtc_h ++;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	b2da      	uxtb	r2, r3
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800089a:	701a      	strb	r2, [r3, #0]
				if (soft_rtc_h == 24) {
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b18      	cmp	r3, #24
 80008a2:	d102      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x62>
					soft_rtc_h = 0;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000370 	.word	0x20000370
 80008bc:	20000099 	.word	0x20000099
 80008c0:	20000098 	.word	0x20000098
 80008c4:	20000097 	.word	0x20000097

080008c8 <HAL_UART_RxCpltCallback>:
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		}
	}*/
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <HAL_UART_RxCpltCallback+0x24>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d102      	bne.n	80008e0 <HAL_UART_RxCpltCallback+0x18>
    	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
    	//flag_alignment_received = 1;
    	flag_data_received_from_pc = 1;
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_UART_RxCpltCallback+0x28>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
    }
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40004c00 	.word	0x40004c00
 80008f0:	200001c0 	.word	0x200001c0

080008f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim2.Instance) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	429a      	cmp	r2, r3
 8000906:	d141      	bne.n	800098c <HAL_TIM_IC_CaptureCallback+0x98>
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7f1b      	ldrb	r3, [r3, #28]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d111      	bne.n	8000934 <HAL_TIM_IC_CaptureCallback+0x40>
  		soft_rtc_imu_s = soft_rtc_s;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8000916:	701a      	strb	r2, [r3, #0]
			soft_rtc_imu_m = soft_rtc_m;
 8000918:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800091e:	701a      	strb	r2, [r3, #0]
			soft_rtc_imu_subs = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000920:	2100      	movs	r1, #0
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f005 fc9c 	bl	8006260 <HAL_TIM_ReadCapturedValue>
 8000928:	4602      	mov	r2, r0
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800092c:	601a      	str	r2, [r3, #0]
  		flag_read_imu_values = 1;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  	}
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7f1b      	ldrb	r3, [r3, #28]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d111      	bne.n	8000960 <HAL_TIM_IC_CaptureCallback+0x6c>
			soft_rtc_cameras_s = soft_rtc_s;
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000942:	701a      	strb	r2, [r3, #0]
			soft_rtc_cameras_m = soft_rtc_m;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800094a:	701a      	strb	r2, [r3, #0]
			soft_rtc_cameras_subs = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800094c:	2104      	movs	r1, #4
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f005 fc86 	bl	8006260 <HAL_TIM_ReadCapturedValue>
 8000954:	4602      	mov	r2, r0
 8000956:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000958:	601a      	str	r2, [r3, #0]
			flag_cameras_ts_ready = 1;
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800095c:	2201      	movs	r2, #1
 800095e:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  	}
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	7f1b      	ldrb	r3, [r3, #28]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d111      	bne.n	800098c <HAL_TIM_IC_CaptureCallback+0x98>
			soft_rtc_mocap_s = soft_rtc_s;
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800096a:	781a      	ldrb	r2, [r3, #0]
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800096e:	701a      	strb	r2, [r3, #0]
			soft_rtc_mocap_m = soft_rtc_m;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8000976:	701a      	strb	r2, [r3, #0]
			soft_rtc_mocap_subs = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000978:	2108      	movs	r1, #8
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f005 fc70 	bl	8006260 <HAL_TIM_ReadCapturedValue>
 8000980:	4602      	mov	r2, r0
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8000984:	601a      	str	r2, [r3, #0]
			flag_mocap_ts_ready = 1;
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_TIM_IC_CaptureCallback+0xd8>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  	}
  }
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000370 	.word	0x20000370
 8000998:	20000099 	.word	0x20000099
 800099c:	2000009b 	.word	0x2000009b
 80009a0:	20000098 	.word	0x20000098
 80009a4:	2000009a 	.word	0x2000009a
 80009a8:	2000009c 	.word	0x2000009c
 80009ac:	20000092 	.word	0x20000092
 80009b0:	200000a1 	.word	0x200000a1
 80009b4:	200000a0 	.word	0x200000a0
 80009b8:	200000a4 	.word	0x200000a4
 80009bc:	20000093 	.word	0x20000093
 80009c0:	200000a9 	.word	0x200000a9
 80009c4:	200000a8 	.word	0x200000a8
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	20000094 	.word	0x20000094

080009d0 <receive_from_pc>:

void receive_from_pc(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart4, input_buf, INPUT_PC_DATA_LENGTH);
 80009d4:	2205      	movs	r2, #5
 80009d6:	4903      	ldr	r1, [pc, #12]	; (80009e4 <receive_from_pc+0x14>)
 80009d8:	4803      	ldr	r0, [pc, #12]	; (80009e8 <receive_from_pc+0x18>)
 80009da:	f006 faad 	bl	8006f38 <HAL_UART_Receive_DMA>
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200002c8 	.word	0x200002c8
 80009e8:	20000330 	.word	0x20000330

080009ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f2:	f001 f88f 	bl	8001b14 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f6:	f000 f957 	bl	8000ca8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 80009fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fe:	f001 f8fb 	bl	8001bf8 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a02:	f000 fc05 	bl	8001210 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a06:	f000 fbcb 	bl	80011a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000a0a:	f000 f9bd 	bl	8000d88 <MX_I2C1_Init>
  MX_UART4_Init();
 8000a0e:	f000 fb9d 	bl	800114c <MX_UART4_Init>
  MX_I2C2_Init();
 8000a12:	f000 f9e9 	bl	8000de8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000a16:	f000 fa17 	bl	8000e48 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000a1a:	f000 fb19 	bl	8001050 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000a1e:	f000 fa99 	bl	8000f54 <MX_TIM3_Init>
  //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET);
  //HAL_Delay(1000);
  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, SET);
  //HAL_Delay(1000);
  setup_mpu();
 8000a22:	f7ff fda5 	bl	8000570 <setup_mpu>
	//delay(10);
	//delay(10);
	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a26:	2100      	movs	r1, #0
 8000a28:	488d      	ldr	r0, [pc, #564]	; (8000c60 <main+0x274>)
 8000a2a:	f004 ff81 	bl	8005930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a2e:	2104      	movs	r1, #4
 8000a30:	488c      	ldr	r0, [pc, #560]	; (8000c64 <main+0x278>)
 8000a32:	f004 ff7d 	bl	8005930 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a36:	488c      	ldr	r0, [pc, #560]	; (8000c68 <main+0x27c>)
 8000a38:	f004 ff21 	bl	800587e <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	488a      	ldr	r0, [pc, #552]	; (8000c68 <main+0x27c>)
 8000a40:	f005 f842 	bl	8005ac8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000a44:	2104      	movs	r1, #4
 8000a46:	4888      	ldr	r0, [pc, #544]	; (8000c68 <main+0x27c>)
 8000a48:	f005 f83e 	bl	8005ac8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000a4c:	2108      	movs	r1, #8
 8000a4e:	4886      	ldr	r0, [pc, #536]	; (8000c68 <main+0x27c>)
 8000a50:	f005 f83a 	bl	8005ac8 <HAL_TIM_IC_Start_IT>
|::                      ::|
|::                      ::|
|::             [D5 USB] ::|
--------------------------*/
	//receive_alignment();
	receive_from_pc();
 8000a54:	f7ff ffbc 	bl	80009d0 <receive_from_pc>
	dat_[0] = 0b10000010;
 8000a58:	4b84      	ldr	r3, [pc, #528]	; (8000c6c <main+0x280>)
 8000a5a:	2282      	movs	r2, #130	; 0x82
 8000a5c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x20, 1, dat_, 1, 1000);
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	2301      	movs	r3, #1
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	4b80      	ldr	r3, [pc, #512]	; (8000c6c <main+0x280>)
 8000a6a:	9300      	str	r3, [sp, #0]
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2138      	movs	r1, #56	; 0x38
 8000a72:	487f      	ldr	r0, [pc, #508]	; (8000c70 <main+0x284>)
 8000a74:	f002 f8bc 	bl	8002bf0 <HAL_I2C_Mem_Write>
	dat_[0] = 0b00001100;
 8000a78:	4b7c      	ldr	r3, [pc, #496]	; (8000c6c <main+0x280>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x23, 1, dat_, 1, 1000);
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	9302      	str	r3, [sp, #8]
 8000a84:	2301      	movs	r3, #1
 8000a86:	9301      	str	r3, [sp, #4]
 8000a88:	4b78      	ldr	r3, [pc, #480]	; (8000c6c <main+0x280>)
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	2223      	movs	r2, #35	; 0x23
 8000a90:	2138      	movs	r1, #56	; 0x38
 8000a92:	4877      	ldr	r0, [pc, #476]	; (8000c70 <main+0x284>)
 8000a94:	f002 f8ac 	bl	8002bf0 <HAL_I2C_Mem_Write>
	dat_[0] = 0;
 8000a98:	4b74      	ldr	r3, [pc, #464]	; (8000c6c <main+0x280>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x22, 1, dat_, 1, 1000);
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	9302      	str	r3, [sp, #8]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	4b70      	ldr	r3, [pc, #448]	; (8000c6c <main+0x280>)
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2301      	movs	r3, #1
 8000aae:	2222      	movs	r2, #34	; 0x22
 8000ab0:	2138      	movs	r1, #56	; 0x38
 8000ab2:	486f      	ldr	r0, [pc, #444]	; (8000c70 <main+0x284>)
 8000ab4:	f002 f89c 	bl	8002bf0 <HAL_I2C_Mem_Write>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)); // forward timer output signal to led pin
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)); // forward timer output signal to led pin
 8000ab8:	2102      	movs	r1, #2
 8000aba:	486e      	ldr	r0, [pc, #440]	; (8000c74 <main+0x288>)
 8000abc:	f001 ff14 	bl	80028e8 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac8:	486b      	ldr	r0, [pc, #428]	; (8000c78 <main+0x28c>)
 8000aca:	f001 ff25 	bl	8002918 <HAL_GPIO_WritePin>
  	if (flag_read_imu_values == 1) {
 8000ace:	4b6b      	ldr	r3, [pc, #428]	; (8000c7c <main+0x290>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d1f0      	bne.n	8000ab8 <main+0xcc>
			//HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
			flag_read_imu_values = 0;
 8000ad6:	4b69      	ldr	r3, [pc, #420]	; (8000c7c <main+0x290>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
      buf_flag_cameras_ts_ready = flag_cameras_ts_ready;
 8000adc:	4b68      	ldr	r3, [pc, #416]	; (8000c80 <main+0x294>)
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4b68      	ldr	r3, [pc, #416]	; (8000c84 <main+0x298>)
 8000ae2:	701a      	strb	r2, [r3, #0]
      buf_flag_mocap_ts_ready = flag_mocap_ts_ready;
 8000ae4:	4b68      	ldr	r3, [pc, #416]	; (8000c88 <main+0x29c>)
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	4b68      	ldr	r3, [pc, #416]	; (8000c8c <main+0x2a0>)
 8000aea:	701a      	strb	r2, [r3, #0]
      if (buf_flag_cameras_ts_ready == 1) {
 8000aec:	4b65      	ldr	r3, [pc, #404]	; (8000c84 <main+0x298>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d102      	bne.n	8000afa <main+0x10e>
              flag_cameras_ts_ready = 0;
 8000af4:	4b62      	ldr	r3, [pc, #392]	; (8000c80 <main+0x294>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
      }
      if (buf_flag_mocap_ts_ready == 1) {
 8000afa:	4b64      	ldr	r3, [pc, #400]	; (8000c8c <main+0x2a0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d102      	bne.n	8000b08 <main+0x11c>
              flag_mocap_ts_ready = 0;
 8000b02:	4b61      	ldr	r3, [pc, #388]	; (8000c88 <main+0x29c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
      }
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			count++;
 8000b08:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <main+0x2a4>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	4b5f      	ldr	r3, [pc, #380]	; (8000c90 <main+0x2a4>)
 8000b12:	801a      	strh	r2, [r3, #0]
			cp();
 8000b14:	f7ff fe7c 	bl	8000810 <cp>
			HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat, 14);
 8000b18:	230e      	movs	r3, #14
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	4b5d      	ldr	r3, [pc, #372]	; (8000c94 <main+0x2a8>)
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	223b      	movs	r2, #59	; 0x3b
 8000b24:	21d0      	movs	r1, #208	; 0xd0
 8000b26:	485c      	ldr	r0, [pc, #368]	; (8000c98 <main+0x2ac>)
 8000b28:	f002 f95c 	bl	8002de4 <HAL_I2C_Mem_Read_DMA>
			HAL_I2C_Mem_Read_DMA(&hi2c2, 0b0011100<<1, 0x28, 1, dat_, 8);
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	4b4e      	ldr	r3, [pc, #312]	; (8000c6c <main+0x280>)
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	2301      	movs	r3, #1
 8000b36:	2228      	movs	r2, #40	; 0x28
 8000b38:	2138      	movs	r1, #56	; 0x38
 8000b3a:	484d      	ldr	r0, [pc, #308]	; (8000c70 <main+0x284>)
 8000b3c:	f002 f952 	bl	8002de4 <HAL_I2C_Mem_Read_DMA>
			if (abs((int8_t)dat[0])>THRES || abs((int8_t)dat[2])>THRES || abs((int8_t)dat[4])>THRES ||
 8000b40:	4b54      	ldr	r3, [pc, #336]	; (8000c94 <main+0x2a8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b4e:	dc27      	bgt.n	8000ba0 <main+0x1b4>
 8000b50:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <main+0x2a8>)
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	b25b      	sxtb	r3, r3
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b5e:	dc1f      	bgt.n	8000ba0 <main+0x1b4>
 8000b60:	4b4c      	ldr	r3, [pc, #304]	; (8000c94 <main+0x2a8>)
 8000b62:	791b      	ldrb	r3, [r3, #4]
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b6e:	dc17      	bgt.n	8000ba0 <main+0x1b4>
					abs((int8_t)dat[8])>THRES || abs((int8_t)dat[10])>THRES || abs((int8_t)dat[12])>THRES) {
 8000b70:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <main+0x2a8>)
 8000b72:	7a1b      	ldrb	r3, [r3, #8]
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	bfb8      	it	lt
 8000b7a:	425b      	neglt	r3, r3
			if (abs((int8_t)dat[0])>THRES || abs((int8_t)dat[2])>THRES || abs((int8_t)dat[4])>THRES ||
 8000b7c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b7e:	dc0f      	bgt.n	8000ba0 <main+0x1b4>
					abs((int8_t)dat[8])>THRES || abs((int8_t)dat[10])>THRES || abs((int8_t)dat[12])>THRES) {
 8000b80:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <main+0x2a8>)
 8000b82:	7a9b      	ldrb	r3, [r3, #10]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bfb8      	it	lt
 8000b8a:	425b      	neglt	r3, r3
 8000b8c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b8e:	dc07      	bgt.n	8000ba0 <main+0x1b4>
 8000b90:	4b40      	ldr	r3, [pc, #256]	; (8000c94 <main+0x2a8>)
 8000b92:	7b1b      	ldrb	r3, [r3, #12]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b7e      	cmp	r3, #126	; 0x7e
 8000b9e:	dd0c      	ble.n	8000bba <main+0x1ce>
				//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ba6:	4834      	ldr	r0, [pc, #208]	; (8000c78 <main+0x28c>)
 8000ba8:	f001 feb6 	bl	8002918 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	4831      	ldr	r0, [pc, #196]	; (8000c78 <main+0x28c>)
 8000bb4:	f001 feb0 	bl	8002918 <HAL_GPIO_WritePin>
 8000bb8:	e00b      	b.n	8000bd2 <main+0x1e6>
			}
			else {
				//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc0:	482d      	ldr	r0, [pc, #180]	; (8000c78 <main+0x28c>)
 8000bc2:	f001 fea9 	bl	8002918 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bcc:	482a      	ldr	r0, [pc, #168]	; (8000c78 <main+0x28c>)
 8000bce:	f001 fea3 	bl	8002918 <HAL_GPIO_WritePin>
			}

			uint8_t mes_length = N_IMU_CHARS + buf_flag_cameras_ts_ready * N_CAMERAS_CHARS + buf_flag_mocap_ts_ready * N_MOCAP_CHARS;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <main+0x298>)
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <main+0x2a0>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	461a      	mov	r2, r3
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	4413      	add	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	334e      	adds	r3, #78	; 0x4e
 8000bea:	71fb      	strb	r3, [r7, #7]
			make_message();
 8000bec:	f7ff fd00 	bl	80005f0 <make_message>
			HAL_UART_Transmit_DMA(&huart4, str, mes_length);//, 1000);	//HAL_UART_Transmit_DMA(&huart4, str, N_CHARS);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4929      	ldr	r1, [pc, #164]	; (8000c9c <main+0x2b0>)
 8000bf8:	4829      	ldr	r0, [pc, #164]	; (8000ca0 <main+0x2b4>)
 8000bfa:	f006 f931 	bl	8006e60 <HAL_UART_Transmit_DMA>
				flag_data_received_from_pc = 0;
				receive_from_pc();
			}
		  }*/
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
			if(count & 1024) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);}
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <main+0x2a4>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d004      	beq.n	8000c14 <main+0x228>
 8000c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <main+0x28c>)
 8000c10:	f001 fe9b 	bl	800294a <HAL_GPIO_TogglePin>
			if (flag_pause_triggering == 1) {
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <main+0x2b8>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	f47f af4d 	bne.w	8000ab8 <main+0xcc>
        if (count == 10000) {
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <main+0x2a4>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	f242 7210 	movw	r2, #10000	; 0x2710
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d107      	bne.n	8000c3a <main+0x24e>
          HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	480c      	ldr	r0, [pc, #48]	; (8000c60 <main+0x274>)
 8000c2e:	f004 febd 	bl	80059ac <HAL_TIM_PWM_Stop>
          HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8000c32:	2104      	movs	r1, #4
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <main+0x278>)
 8000c36:	f004 feb9 	bl	80059ac <HAL_TIM_PWM_Stop>
        }
        if (count == 11000) {
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <main+0x2a4>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8000c42:	4293      	cmp	r3, r2
 8000c44:	f47f af38 	bne.w	8000ab8 <main+0xcc>
          HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <main+0x274>)
 8000c4c:	f004 fe70 	bl	8005930 <HAL_TIM_PWM_Start>
          HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c50:	2104      	movs	r1, #4
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <main+0x278>)
 8000c54:	f004 fe6c 	bl	8005930 <HAL_TIM_PWM_Start>
          flag_pause_triggering = 0;
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <main+0x2b8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)); // forward timer output signal to led pin
 8000c5e:	e72b      	b.n	8000ab8 <main+0xcc>
 8000c60:	20000218 	.word	0x20000218
 8000c64:	2000012c 	.word	0x2000012c
 8000c68:	20000370 	.word	0x20000370
 8000c6c:	200002b8 	.word	0x200002b8
 8000c70:	200001c4 	.word	0x200001c4
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020c00 	.word	0x40020c00
 8000c7c:	20000092 	.word	0x20000092
 8000c80:	20000093 	.word	0x20000093
 8000c84:	20000095 	.word	0x20000095
 8000c88:	20000094 	.word	0x20000094
 8000c8c:	20000096 	.word	0x20000096
 8000c90:	20000090 	.word	0x20000090
 8000c94:	200000bc 	.word	0x200000bc
 8000c98:	2000016c 	.word	0x2000016c
 8000c9c:	200003c0 	.word	0x200003c0
 8000ca0:	20000330 	.word	0x20000330
 8000ca4:	20000000 	.word	0x20000000

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b094      	sub	sp, #80	; 0x50
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0320 	add.w	r3, r7, #32
 8000cb2:	2230      	movs	r2, #48	; 0x30
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f007 f886 	bl	8007dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <SystemClock_Config+0xd8>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <SystemClock_Config+0xdc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a24      	ldr	r2, [pc, #144]	; (8000d84 <SystemClock_Config+0xdc>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <SystemClock_Config+0xdc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d18:	2305      	movs	r3, #5
 8000d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000d1c:	2360      	movs	r3, #96	; 0x60
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000d24:	2305      	movs	r3, #5
 8000d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f004 f8b1 	bl	8004e94 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d38:	f000 fb10 	bl	800135c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d40:	2302      	movs	r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	2102      	movs	r1, #2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f004 fb0b 	bl	8005374 <HAL_RCC_ClockConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d64:	f000 fafa 	bl	800135c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000d68:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d6c:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000d70:	2000      	movs	r0, #0
 8000d72:	f004 fbe5 	bl	8005540 <HAL_RCC_MCOConfig>
}
 8000d76:	bf00      	nop
 8000d78:	3750      	adds	r7, #80	; 0x50
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000d8e:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <MX_I2C1_Init+0x58>)
 8000d90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <MX_I2C1_Init+0x5c>)
 8000d96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d9e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000da6:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000da8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_I2C1_Init+0x54>)
 8000dc8:	f001 fdda 	bl	8002980 <HAL_I2C_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000dd2:	f000 fac3 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2000016c 	.word	0x2000016c
 8000de0:	40005400 	.word	0x40005400
 8000de4:	00061a80 	.word	0x00061a80

08000de8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000dee:	4a14      	ldr	r2, [pc, #80]	; (8000e40 <MX_I2C2_Init+0x58>)
 8000df0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000df4:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <MX_I2C2_Init+0x5c>)
 8000df6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfe:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_I2C2_Init+0x54>)
 8000e28:	f001 fdaa 	bl	8002980 <HAL_I2C_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000e32:	f000 fa93 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	200001c4 	.word	0x200001c4
 8000e40:	40005800 	.word	0x40005800
 8000e44:	00061a80 	.word	0x00061a80

08000e48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e72:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3-1;
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25600000-1;
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e88:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <MX_TIM2_Init+0x108>)
 8000e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b2e      	ldr	r3, [pc, #184]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e98:	482c      	ldr	r0, [pc, #176]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000e9a:	f004 fcc5 	bl	8005828 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000ea4:	f000 fa5a 	bl	800135c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4825      	ldr	r0, [pc, #148]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000eb6:	f005 f8d9 	bl	800606c <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f000 fa4c 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ec4:	4821      	ldr	r0, [pc, #132]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000ec6:	f004 fdc9 	bl	8005a5c <HAL_TIM_IC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f000 fa44 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ed4:	2320      	movs	r3, #32
 8000ed6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	481a      	ldr	r0, [pc, #104]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000ee4:	f005 fede 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000eee:	f000 fa35 	bl	800135c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4810      	ldr	r0, [pc, #64]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000f0a:	f004 ff4d 	bl	8005da8 <HAL_TIM_IC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000f14:	f000 fa22 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000f20:	f004 ff42 	bl	8005da8 <HAL_TIM_IC_ConfigChannel>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000f2a:	f000 fa17 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2208      	movs	r2, #8
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_TIM2_Init+0x104>)
 8000f36:	f004 ff37 	bl	8005da8 <HAL_TIM_IC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000f40:	f000 fa0c 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000370 	.word	0x20000370
 8000f50:	01869fff 	.word	0x01869fff

08000f54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08e      	sub	sp, #56	; 0x38
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f74:	463b      	mov	r3, r7
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]
 8000f82:	615a      	str	r2, [r3, #20]
 8000f84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f86:	4b30      	ldr	r3, [pc, #192]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000f88:	4a30      	ldr	r2, [pc, #192]	; (800104c <MX_TIM3_Init+0xf8>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000f98:	4b2b      	ldr	r3, [pc, #172]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000f9a:	2263      	movs	r2, #99	; 0x63
 8000f9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000faa:	4827      	ldr	r0, [pc, #156]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000fac:	f004 fc3c 	bl	8005828 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fb6:	f000 f9d1 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fba:	4823      	ldr	r0, [pc, #140]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000fbc:	f004 fc83 	bl	80058c6 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000fc6:	f000 f9c9 	bl	800135c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000fce:	2370      	movs	r3, #112	; 0x70
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
  sSlaveConfig.TriggerFilter = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4818      	ldr	r0, [pc, #96]	; (8001048 <MX_TIM3_Init+0xf4>)
 8000fe6:	f005 f8f8 	bl	80061da <HAL_TIM_SlaveConfigSynchro>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000ff0:	f000 f9b4 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_TIM3_Init+0xf4>)
 8001004:	f005 fe4e 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 800100e:	f000 f9a5 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001012:	2360      	movs	r3, #96	; 0x60
 8001014:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	4619      	mov	r1, r3
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <MX_TIM3_Init+0xf4>)
 800102a:	f004 ff59 	bl	8005ee0 <HAL_TIM_PWM_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001034:	f000 f992 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <MX_TIM3_Init+0xf4>)
 800103a:	f000 fb73 	bl	8001724 <HAL_TIM_MspPostInit>

}
 800103e:	bf00      	nop
 8001040:	3738      	adds	r7, #56	; 0x38
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000218 	.word	0x20000218
 800104c:	40000400 	.word	0x40000400

08001050 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08e      	sub	sp, #56	; 0x38
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001056:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001082:	4b30      	ldr	r3, [pc, #192]	; (8001144 <MX_TIM4_Init+0xf4>)
 8001084:	4a30      	ldr	r2, [pc, #192]	; (8001148 <MX_TIM4_Init+0xf8>)
 8001086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <MX_TIM4_Init+0xf4>)
 800108a:	2200      	movs	r2, #0
 800108c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b2d      	ldr	r3, [pc, #180]	; (8001144 <MX_TIM4_Init+0xf4>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5-1;
 8001094:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_TIM4_Init+0xf4>)
 8001096:	2204      	movs	r2, #4
 8001098:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b2a      	ldr	r3, [pc, #168]	; (8001144 <MX_TIM4_Init+0xf4>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <MX_TIM4_Init+0xf4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010a6:	4827      	ldr	r0, [pc, #156]	; (8001144 <MX_TIM4_Init+0xf4>)
 80010a8:	f004 fbbe 	bl	8005828 <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010b2:	f000 f953 	bl	800135c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010b6:	4823      	ldr	r0, [pc, #140]	; (8001144 <MX_TIM4_Init+0xf4>)
 80010b8:	f004 fc05 	bl	80058c6 <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80010c2:	f000 f94b 	bl	800135c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80010c6:	2307      	movs	r3, #7
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80010ca:	2370      	movs	r3, #112	; 0x70
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  sSlaveConfig.TriggerFilter = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80010da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010de:	4619      	mov	r1, r3
 80010e0:	4818      	ldr	r0, [pc, #96]	; (8001144 <MX_TIM4_Init+0xf4>)
 80010e2:	f005 f87a 	bl	80061da <HAL_TIM_SlaveConfigSynchro>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80010ec:	f000 f936 	bl	800135c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010f8:	f107 031c 	add.w	r3, r7, #28
 80010fc:	4619      	mov	r1, r3
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_TIM4_Init+0xf4>)
 8001100:	f005 fdd0 	bl	8006ca4 <HAL_TIMEx_MasterConfigSynchronization>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM4_Init+0xbe>
  {
    Error_Handler();
 800110a:	f000 f927 	bl	800135c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800111e:	463b      	mov	r3, r7
 8001120:	2204      	movs	r2, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	; (8001144 <MX_TIM4_Init+0xf4>)
 8001126:	f004 fedb 	bl	8005ee0 <HAL_TIM_PWM_ConfigChannel>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8001130:	f000 f914 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001134:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM4_Init+0xf4>)
 8001136:	f000 faf5 	bl	8001724 <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3738      	adds	r7, #56	; 0x38
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000012c 	.word	0x2000012c
 8001148:	40000800 	.word	0x40000800

0800114c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001150:	4b10      	ldr	r3, [pc, #64]	; (8001194 <MX_UART4_Init+0x48>)
 8001152:	4a11      	ldr	r2, [pc, #68]	; (8001198 <MX_UART4_Init+0x4c>)
 8001154:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <MX_UART4_Init+0x48>)
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <MX_UART4_Init+0x50>)
 800115a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <MX_UART4_Init+0x48>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_UART4_Init+0x48>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_UART4_Init+0x48>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_UART4_Init+0x48>)
 8001170:	220c      	movs	r2, #12
 8001172:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_UART4_Init+0x48>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_UART4_Init+0x48>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_UART4_Init+0x48>)
 8001182:	f005 fe1f 	bl	8006dc4 <HAL_UART_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 800118c:	f000 f8e6 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000330 	.word	0x20000330
 8001198:	40004c00 	.word	0x40004c00
 800119c:	001e8480 	.word	0x001e8480

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_DMA_Init+0x6c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_DMA_Init+0x6c>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_DMA_Init+0x6c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2105      	movs	r1, #5
 80011c6:	200d      	movs	r0, #13
 80011c8:	f000 fe13 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80011cc:	200d      	movs	r0, #13
 80011ce:	f000 fe2c 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	200e      	movs	r0, #14
 80011d8:	f000 fe0b 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011dc:	200e      	movs	r0, #14
 80011de:	f000 fe24 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2105      	movs	r1, #5
 80011e6:	200f      	movs	r0, #15
 80011e8:	f000 fe03 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011ec:	200f      	movs	r0, #15
 80011ee:	f000 fe1c 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2105      	movs	r1, #5
 80011f6:	2010      	movs	r0, #16
 80011f8:	f000 fdfb 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011fc:	2010      	movs	r0, #16
 80011fe:	f000 fe14 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	4b48      	ldr	r3, [pc, #288]	; (800134c <MX_GPIO_Init+0x13c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a47      	ldr	r2, [pc, #284]	; (800134c <MX_GPIO_Init+0x13c>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b45      	ldr	r3, [pc, #276]	; (800134c <MX_GPIO_Init+0x13c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	4b41      	ldr	r3, [pc, #260]	; (800134c <MX_GPIO_Init+0x13c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a40      	ldr	r2, [pc, #256]	; (800134c <MX_GPIO_Init+0x13c>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <MX_GPIO_Init+0x13c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <MX_GPIO_Init+0x13c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a39      	ldr	r2, [pc, #228]	; (800134c <MX_GPIO_Init+0x13c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <MX_GPIO_Init+0x13c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <MX_GPIO_Init+0x13c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a32      	ldr	r2, [pc, #200]	; (800134c <MX_GPIO_Init+0x13c>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_GPIO_Init+0x13c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_GPIO_Init+0x13c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <MX_GPIO_Init+0x13c>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_GPIO_Init+0x13c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_GPIO_Init+0x13c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a24      	ldr	r2, [pc, #144]	; (800134c <MX_GPIO_Init+0x13c>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_GPIO_Init+0x13c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d4:	481e      	ldr	r0, [pc, #120]	; (8001350 <MX_GPIO_Init+0x140>)
 80012d6:	f001 fb1f 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <MX_GPIO_Init+0x144>)
 80012e2:	f001 fb19 	bl	8002918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_GPIO_Init+0x140>)
 8001300:	f001 f958 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8001304:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8001308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130a:	2301      	movs	r3, #1
 800130c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_GPIO_Init+0x144>)
 800131e:	f001 f949 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001326:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001330:	2303      	movs	r3, #3
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_GPIO_Init+0x148>)
 8001340:	f001 f938 	bl	80025b4 <HAL_GPIO_Init>

}
 8001344:	bf00      	nop
 8001346:	3730      	adds	r7, #48	; 0x30
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	40020800 	.word	0x40020800
 8001354:	40020c00 	.word	0x40020c00
 8001358:	40020000 	.word	0x40020000

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_MspInit+0x4c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <HAL_MspInit+0x4c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_I2C_MspInit+0x1b4>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d163      	bne.n	80014a6 <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b64      	ldr	r3, [pc, #400]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a63      	ldr	r2, [pc, #396]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b61      	ldr	r3, [pc, #388]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013fa:	23c0      	movs	r3, #192	; 0xc0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fe:	2312      	movs	r3, #18
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001402:	2301      	movs	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800140a:	2304      	movs	r3, #4
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4858      	ldr	r0, [pc, #352]	; (8001578 <HAL_I2C_MspInit+0x1bc>)
 8001416:	f001 f8cd 	bl	80025b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	4a54      	ldr	r2, [pc, #336]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 8001424:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001428:	6413      	str	r3, [r2, #64]	; 0x40
 800142a:	4b52      	ldr	r3, [pc, #328]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8001436:	4b51      	ldr	r3, [pc, #324]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001438:	4a51      	ldr	r2, [pc, #324]	; (8001580 <HAL_I2C_MspInit+0x1c4>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 800143e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001442:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001444:	4b4d      	ldr	r3, [pc, #308]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001450:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001456:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800145e:	4b47      	ldr	r3, [pc, #284]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001464:	4b45      	ldr	r3, [pc, #276]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 800146c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001470:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001472:	4b42      	ldr	r3, [pc, #264]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001478:	4840      	ldr	r0, [pc, #256]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 800147a:	f000 fcf1 	bl	8001e60 <HAL_DMA_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001484:	f7ff ff6a 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a3c      	ldr	r2, [pc, #240]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 800148c:	639a      	str	r2, [r3, #56]	; 0x38
 800148e:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_I2C_MspInit+0x1c0>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2101      	movs	r1, #1
 8001498:	201f      	movs	r0, #31
 800149a:	f000 fcaa 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800149e:	201f      	movs	r0, #31
 80014a0:	f000 fcc3 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014a4:	e05f      	b.n	8001566 <HAL_I2C_MspInit+0x1aa>
  else if(hi2c->Instance==I2C2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a36      	ldr	r2, [pc, #216]	; (8001584 <HAL_I2C_MspInit+0x1c8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d15a      	bne.n	8001566 <HAL_I2C_MspInit+0x1aa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	6313      	str	r3, [r2, #48]	; 0x30
 80014c0:	4b2c      	ldr	r3, [pc, #176]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014de:	2304      	movs	r3, #4
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4823      	ldr	r0, [pc, #140]	; (8001578 <HAL_I2C_MspInit+0x1bc>)
 80014ea:	f001 f863 	bl	80025b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 80014f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_I2C_MspInit+0x1b8>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 800150c:	4a1f      	ldr	r2, [pc, #124]	; (800158c <HAL_I2C_MspInit+0x1d0>)
 800150e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001510:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001512:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001516:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152a:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152c:	4b16      	ldr	r3, [pc, #88]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800154a:	480f      	ldr	r0, [pc, #60]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 800154c:	f000 fc88 	bl	8001e60 <HAL_DMA_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 8001556:	f7ff ff01 	bl	800135c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
 8001560:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_I2C_MspInit+0x1cc>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001566:	bf00      	nop
 8001568:	3730      	adds	r7, #48	; 0x30
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400
 800157c:	200002d0 	.word	0x200002d0
 8001580:	40026088 	.word	0x40026088
 8001584:	40005800 	.word	0x40005800
 8001588:	20000258 	.word	0x20000258
 800158c:	40026058 	.word	0x40026058

08001590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08e      	sub	sp, #56	; 0x38
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b0:	d144      	bne.n	800163c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
 80015b6:	4b55      	ldr	r3, [pc, #340]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a54      	ldr	r2, [pc, #336]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	4b4e      	ldr	r3, [pc, #312]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a4d      	ldr	r2, [pc, #308]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b4b      	ldr	r3, [pc, #300]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ea:	2303      	movs	r3, #3
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f6:	2303      	movs	r3, #3
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015fa:	2301      	movs	r3, #1
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4842      	ldr	r0, [pc, #264]	; (8001710 <HAL_TIM_Base_MspInit+0x180>)
 8001606:	f000 ffd5 	bl	80025b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800160a:	2304      	movs	r3, #4
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800161a:	2301      	movs	r3, #1
 800161c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	483a      	ldr	r0, [pc, #232]	; (8001710 <HAL_TIM_Base_MspInit+0x180>)
 8001626:	f000 ffc5 	bl	80025b4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2100      	movs	r1, #0
 800162e:	201c      	movs	r0, #28
 8001630:	f000 fbdf 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001634:	201c      	movs	r0, #28
 8001636:	f000 fbf8 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800163a:	e062      	b.n	8001702 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a34      	ldr	r2, [pc, #208]	; (8001714 <HAL_TIM_Base_MspInit+0x184>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12c      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800167e:	2304      	movs	r3, #4
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800168e:	2302      	movs	r3, #2
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	481f      	ldr	r0, [pc, #124]	; (8001718 <HAL_TIM_Base_MspInit+0x188>)
 800169a:	f000 ff8b 	bl	80025b4 <HAL_GPIO_Init>
}
 800169e:	e030      	b.n	8001702 <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_TIM_Base_MspInit+0x18c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12b      	bne.n	8001702 <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a16      	ldr	r2, [pc, #88]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_TIM_Base_MspInit+0x17c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e2:	2301      	movs	r3, #1
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016f2:	2302      	movs	r3, #2
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016fa:	4619      	mov	r1, r3
 80016fc:	4808      	ldr	r0, [pc, #32]	; (8001720 <HAL_TIM_Base_MspInit+0x190>)
 80016fe:	f000 ff59 	bl	80025b4 <HAL_GPIO_Init>
}
 8001702:	bf00      	nop
 8001704:	3738      	adds	r7, #56	; 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40000400 	.word	0x40000400
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40000800 	.word	0x40000800
 8001720:	40021000 	.word	0x40021000

08001724 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_TIM_MspPostInit+0xb0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d11e      	bne.n	8001784 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001762:	2340      	movs	r3, #64	; 0x40
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001772:	2302      	movs	r3, #2
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4817      	ldr	r0, [pc, #92]	; (80017dc <HAL_TIM_MspPostInit+0xb8>)
 800177e:	f000 ff19 	bl	80025b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001782:	e023      	b.n	80017cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_TIM_MspPostInit+0xbc>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d11e      	bne.n	80017cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 8001798:	f043 0308 	orr.w	r3, r3, #8
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_TIM_MspPostInit+0xb4>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017bc:	2302      	movs	r3, #2
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	; (80017e4 <HAL_TIM_MspPostInit+0xc0>)
 80017c8:	f000 fef4 	bl	80025b4 <HAL_GPIO_Init>
}
 80017cc:	bf00      	nop
 80017ce:	3728      	adds	r7, #40	; 0x28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40000400 	.word	0x40000400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40000800 	.word	0x40000800
 80017e4:	40020c00 	.word	0x40020c00

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a4c      	ldr	r2, [pc, #304]	; (8001938 <HAL_UART_MspInit+0x150>)
 8001806:	4293      	cmp	r3, r2
 8001808:	f040 8091 	bne.w	800192e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	4b4a      	ldr	r3, [pc, #296]	; (800193c <HAL_UART_MspInit+0x154>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a49      	ldr	r2, [pc, #292]	; (800193c <HAL_UART_MspInit+0x154>)
 8001816:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_UART_MspInit+0x154>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_UART_MspInit+0x154>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a42      	ldr	r2, [pc, #264]	; (800193c <HAL_UART_MspInit+0x154>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_UART_MspInit+0x154>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001844:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184e:	2301      	movs	r3, #1
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001856:	2308      	movs	r3, #8
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	4837      	ldr	r0, [pc, #220]	; (8001940 <HAL_UART_MspInit+0x158>)
 8001862:	f000 fea7 	bl	80025b4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_UART_MspInit+0x15c>)
 8001868:	4a37      	ldr	r2, [pc, #220]	; (8001948 <HAL_UART_MspInit+0x160>)
 800186a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_UART_MspInit+0x15c>)
 800186e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001872:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001874:	4b33      	ldr	r3, [pc, #204]	; (8001944 <HAL_UART_MspInit+0x15c>)
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_UART_MspInit+0x15c>)
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_UART_MspInit+0x15c>)
 8001882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001886:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001888:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_UART_MspInit+0x15c>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188e:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_UART_MspInit+0x15c>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_UART_MspInit+0x15c>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_UART_MspInit+0x15c>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_UART_MspInit+0x15c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80018a6:	4827      	ldr	r0, [pc, #156]	; (8001944 <HAL_UART_MspInit+0x15c>)
 80018a8:	f000 fada 	bl	8001e60 <HAL_DMA_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80018b2:	f7ff fd53 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_UART_MspInit+0x15c>)
 80018ba:	631a      	str	r2, [r3, #48]	; 0x30
 80018bc:	4a21      	ldr	r2, [pc, #132]	; (8001944 <HAL_UART_MspInit+0x15c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80018c2:	4b22      	ldr	r3, [pc, #136]	; (800194c <HAL_UART_MspInit+0x164>)
 80018c4:	4a22      	ldr	r2, [pc, #136]	; (8001950 <HAL_UART_MspInit+0x168>)
 80018c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_UART_MspInit+0x164>)
 80018ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018ce:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <HAL_UART_MspInit+0x164>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_UART_MspInit+0x164>)
 80018d8:	2200      	movs	r2, #0
 80018da:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_UART_MspInit+0x164>)
 80018de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e2:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_UART_MspInit+0x164>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_UART_MspInit+0x164>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_UART_MspInit+0x164>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HAL_UART_MspInit+0x164>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_UART_MspInit+0x164>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001902:	4812      	ldr	r0, [pc, #72]	; (800194c <HAL_UART_MspInit+0x164>)
 8001904:	f000 faac 	bl	8001e60 <HAL_DMA_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800190e:	f7ff fd25 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_UART_MspInit+0x164>)
 8001916:	635a      	str	r2, [r3, #52]	; 0x34
 8001918:	4a0c      	ldr	r2, [pc, #48]	; (800194c <HAL_UART_MspInit+0x164>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	2034      	movs	r0, #52	; 0x34
 8001924:	f000 fa65 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001928:	2034      	movs	r0, #52	; 0x34
 800192a:	f000 fa7e 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	; 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40004c00 	.word	0x40004c00
 800193c:	40023800 	.word	0x40023800
 8001940:	40020800 	.word	0x40020800
 8001944:	20000434 	.word	0x20000434
 8001948:	40026070 	.word	0x40026070
 800194c:	200000cc 	.word	0x200000cc
 8001950:	40026040 	.word	0x40026040

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <MemManage_Handler+0x4>

0800196e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <BusFault_Handler+0x4>

08001974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <UsageFault_Handler+0x4>

0800197a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a8:	f000 f906 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA1_Stream2_IRQHandler+0x10>)
 80019b6:	f000 fb7b 	bl	80020b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200000cc 	.word	0x200000cc

080019c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <DMA1_Stream3_IRQHandler+0x10>)
 80019ca:	f000 fb71 	bl	80020b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000258 	.word	0x20000258

080019d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA1_Stream4_IRQHandler+0x10>)
 80019de:	f000 fb67 	bl	80020b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000434 	.word	0x20000434

080019ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <DMA1_Stream5_IRQHandler+0x10>)
 80019f2:	f000 fb5d 	bl	80020b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200002d0 	.word	0x200002d0

08001a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <TIM2_IRQHandler+0x10>)
 8001a06:	f004 f8c7 	bl	8005b98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000370 	.word	0x20000370

08001a14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <I2C1_EV_IRQHandler+0x10>)
 8001a1a:	f001 fb2f 	bl	800307c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000016c 	.word	0x2000016c

08001a28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <UART4_IRQHandler+0x10>)
 8001a2e:	f005 fb03 	bl	8007038 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000330 	.word	0x20000330

08001a3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a44:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <_sbrk+0x50>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x16>
		heap_end = &end;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <_sbrk+0x50>)
 8001a4e:	4a10      	ldr	r2, [pc, #64]	; (8001a90 <_sbrk+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <_sbrk+0x50>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <_sbrk+0x50>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4413      	add	r3, r2
 8001a60:	466a      	mov	r2, sp
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d907      	bls.n	8001a76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a66:	f006 f985 	bl	8007d74 <__errno>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	230c      	movs	r3, #12
 8001a6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a74:	e006      	b.n	8001a84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <_sbrk+0x50>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <_sbrk+0x50>)
 8001a80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200000b0 	.word	0x200000b0
 8001a90:	200004a0 	.word	0x200004a0

08001a94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <SystemInit+0x28>)
 8001a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <SystemInit+0x28>)
 8001aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001aa8:	4b04      	ldr	r3, [pc, #16]	; (8001abc <SystemInit+0x28>)
 8001aaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aae:	609a      	str	r2, [r3, #8]
#endif
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ac4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ac6:	e003      	b.n	8001ad0 <LoopCopyDataInit>

08001ac8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001acc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ace:	3104      	adds	r1, #4

08001ad0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ad0:	480b      	ldr	r0, [pc, #44]	; (8001b00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ad4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ad6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ad8:	d3f6      	bcc.n	8001ac8 <CopyDataInit>
  ldr  r2, =_sbss
 8001ada:	4a0b      	ldr	r2, [pc, #44]	; (8001b08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001adc:	e002      	b.n	8001ae4 <LoopFillZerobss>

08001ade <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ade:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ae0:	f842 3b04 	str.w	r3, [r2], #4

08001ae4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ae6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ae8:	d3f9      	bcc.n	8001ade <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aea:	f7ff ffd3 	bl	8001a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aee:	f006 f947 	bl	8007d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af2:	f7fe ff7b 	bl	80009ec <main>
  bx  lr    
 8001af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001afc:	080086f4 	.word	0x080086f4
  ldr  r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b04:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001b08:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001b0c:	2000049c 	.word	0x2000049c

08001b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b10:	e7fe      	b.n	8001b10 <ADC_IRQHandler>
	...

08001b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_Init+0x40>)
 8001b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_Init+0x40>)
 8001b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <HAL_Init+0x40>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3c:	2003      	movs	r0, #3
 8001b3e:	f000 f94d 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f000 f808 	bl	8001b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b48:	f7ff fc10 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x54>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x58>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f965 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b94:	f000 f92d 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x5c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000004 	.word	0x20000004
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	20000008 	.word	0x20000008

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	20000494 	.word	0x20000494

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20000494 	.word	0x20000494

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_Delay+0x40>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2000000c 	.word	0x2000000c

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff feb8 	bl	8001be0 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e099      	b.n	8001fb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2202      	movs	r2, #2
 8001e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e9c:	e00f      	b.n	8001ebe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e9e:	f7ff fe9f 	bl	8001be0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d908      	bls.n	8001ebe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2220      	movs	r2, #32
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2203      	movs	r2, #3
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e078      	b.n	8001fb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e8      	bne.n	8001e9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_DMA_Init+0x158>)
 8001ed8:	4013      	ands	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d107      	bne.n	8001f28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4313      	orrs	r3, r2
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d117      	bne.n	8001f82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 faab 	bl	80024c0 <DMA_CheckFifoParam>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2240      	movs	r2, #64	; 0x40
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e016      	b.n	8001fb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa62 	bl	8002454 <DMA_CalcBaseAndBitshift>
 8001f90:	4603      	mov	r3, r0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	223f      	movs	r2, #63	; 0x3f
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	f010803f 	.word	0xf010803f

08001fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_DMA_Start_IT+0x26>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e040      	b.n	8002064 <HAL_DMA_Start_IT+0xa8>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d12f      	bne.n	8002056 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f9f4 	bl	80023f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002014:	223f      	movs	r2, #63	; 0x3f
 8002016:	409a      	lsls	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0216 	orr.w	r2, r2, #22
 800202a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0208 	orr.w	r2, r2, #8
 8002042:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0201 	orr.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	e005      	b.n	8002062 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800205e:	2302      	movs	r3, #2
 8002060:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002062:	7dfb      	ldrb	r3, [r7, #23]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d004      	beq.n	800208a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e00c      	b.n	80020a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2205      	movs	r2, #5
 800208e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020bc:	4b92      	ldr	r3, [pc, #584]	; (8002308 <HAL_DMA_IRQHandler+0x258>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a92      	ldr	r2, [pc, #584]	; (800230c <HAL_DMA_IRQHandler+0x25c>)
 80020c2:	fba2 2303 	umull	r2, r3, r2, r3
 80020c6:	0a9b      	lsrs	r3, r3, #10
 80020c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020da:	2208      	movs	r2, #8
 80020dc:	409a      	lsls	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d01a      	beq.n	800211c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0204 	bic.w	r2, r2, #4
 8002102:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	2208      	movs	r2, #8
 800210a:	409a      	lsls	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f043 0201 	orr.w	r2, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2201      	movs	r2, #1
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2201      	movs	r2, #1
 8002140:	409a      	lsls	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214a:	f043 0202 	orr.w	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002156:	2204      	movs	r2, #4
 8002158:	409a      	lsls	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002174:	2204      	movs	r2, #4
 8002176:	409a      	lsls	r2, r3
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218c:	2210      	movs	r2, #16
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d043      	beq.n	8002220 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d03c      	beq.n	8002220 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2210      	movs	r2, #16
 80021ac:	409a      	lsls	r2, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d018      	beq.n	80021f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d108      	bne.n	80021e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d024      	beq.n	8002220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	4798      	blx	r3
 80021de:	e01f      	b.n	8002220 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d01b      	beq.n	8002220 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	e016      	b.n	8002220 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0208 	bic.w	r2, r2, #8
 800220e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002224:	2220      	movs	r2, #32
 8002226:	409a      	lsls	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 808e 	beq.w	800234e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8086 	beq.w	800234e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002246:	2220      	movs	r2, #32
 8002248:	409a      	lsls	r2, r3
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b05      	cmp	r3, #5
 8002258:	d136      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_IRQHandler+0x1da>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229e:	223f      	movs	r2, #63	; 0x3f
 80022a0:	409a      	lsls	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d07d      	beq.n	80023ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
        }
        return;
 80022c6:	e078      	b.n	80023ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d01c      	beq.n	8002310 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d030      	beq.n	800234e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4798      	blx	r3
 80022f4:	e02b      	b.n	800234e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d027      	beq.n	800234e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
 8002306:	e022      	b.n	800234e <HAL_DMA_IRQHandler+0x29e>
 8002308:	20000004 	.word	0x20000004
 800230c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0210 	bic.w	r2, r2, #16
 800232c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	2b00      	cmp	r3, #0
 8002354:	d032      	beq.n	80023bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d022      	beq.n	80023a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2205      	movs	r2, #5
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0201 	bic.w	r2, r2, #1
 8002378:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	3301      	adds	r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	429a      	cmp	r2, r3
 8002384:	d307      	bcc.n	8002396 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f2      	bne.n	800237a <HAL_DMA_IRQHandler+0x2ca>
 8002394:	e000      	b.n	8002398 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002396:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	4798      	blx	r3
 80023b8:	e000      	b.n	80023bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80023ba:	bf00      	nop
    }
  }
}
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop

080023c4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d2:	b2db      	uxtb	r3, r3
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002414:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b40      	cmp	r3, #64	; 0x40
 8002424:	d108      	bne.n	8002438 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002436:	e007      	b.n	8002448 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	60da      	str	r2, [r3, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	3b10      	subs	r3, #16
 8002464:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <DMA_CalcBaseAndBitshift+0x68>)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d909      	bls.n	8002496 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	1d1a      	adds	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58
 8002494:	e007      	b.n	80024a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800249e:	f023 0303 	bic.w	r3, r3, #3
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	aaaaaaab 	.word	0xaaaaaaab
 80024bc:	080086a8 	.word	0x080086a8

080024c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d11f      	bne.n	800251a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d855      	bhi.n	800258c <DMA_CheckFifoParam+0xcc>
 80024e0:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <DMA_CheckFifoParam+0x28>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	0800250b 	.word	0x0800250b
 80024f0:	080024f9 	.word	0x080024f9
 80024f4:	0800258d 	.word	0x0800258d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d045      	beq.n	8002590 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002508:	e042      	b.n	8002590 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002512:	d13f      	bne.n	8002594 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002518:	e03c      	b.n	8002594 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002522:	d121      	bne.n	8002568 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b03      	cmp	r3, #3
 8002528:	d836      	bhi.n	8002598 <DMA_CheckFifoParam+0xd8>
 800252a:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x70>)
 800252c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002530:	08002541 	.word	0x08002541
 8002534:	08002547 	.word	0x08002547
 8002538:	08002541 	.word	0x08002541
 800253c:	08002559 	.word	0x08002559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      break;
 8002544:	e02f      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d024      	beq.n	800259c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002556:	e021      	b.n	800259c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002560:	d11e      	bne.n	80025a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002566:	e01b      	b.n	80025a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d902      	bls.n	8002574 <DMA_CheckFifoParam+0xb4>
 800256e:	2b03      	cmp	r3, #3
 8002570:	d003      	beq.n	800257a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002572:	e018      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
      break;
 8002578:	e015      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00e      	beq.n	80025a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	73fb      	strb	r3, [r7, #15]
      break;
 800258a:	e00b      	b.n	80025a4 <DMA_CheckFifoParam+0xe4>
      break;
 800258c:	bf00      	nop
 800258e:	e00a      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002590:	bf00      	nop
 8002592:	e008      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002594:	bf00      	nop
 8002596:	e006      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 8002598:	bf00      	nop
 800259a:	e004      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 800259c:	bf00      	nop
 800259e:	e002      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80025a0:	bf00      	nop
 80025a2:	e000      	b.n	80025a6 <DMA_CheckFifoParam+0xe6>
      break;
 80025a4:	bf00      	nop
    }
  } 
  
  return status; 
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e16b      	b.n	80028a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025d0:	2201      	movs	r2, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 815a 	bne.w	80028a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d00b      	beq.n	800260e <HAL_GPIO_Init+0x5a>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002602:	2b11      	cmp	r3, #17
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b12      	cmp	r3, #18
 800260c:	d130      	bne.n	8002670 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	2203      	movs	r2, #3
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4013      	ands	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 0201 	and.w	r2, r3, #1
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0xfc>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b12      	cmp	r3, #18
 80026ae:	d123      	bne.n	80026f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	08da      	lsrs	r2, r3, #3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3208      	adds	r2, #8
 80026b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	220f      	movs	r2, #15
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	08da      	lsrs	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3208      	adds	r2, #8
 80026f2:	69b9      	ldr	r1, [r7, #24]
 80026f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0203 	and.w	r2, r3, #3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80b4 	beq.w	80028a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	4b5f      	ldr	r3, [pc, #380]	; (80028bc <HAL_GPIO_Init+0x308>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_GPIO_Init+0x308>)
 8002744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_GPIO_Init+0x308>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002756:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_GPIO_Init+0x30c>)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a51      	ldr	r2, [pc, #324]	; (80028c4 <HAL_GPIO_Init+0x310>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d02b      	beq.n	80027da <HAL_GPIO_Init+0x226>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a50      	ldr	r2, [pc, #320]	; (80028c8 <HAL_GPIO_Init+0x314>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d025      	beq.n	80027d6 <HAL_GPIO_Init+0x222>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4f      	ldr	r2, [pc, #316]	; (80028cc <HAL_GPIO_Init+0x318>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d01f      	beq.n	80027d2 <HAL_GPIO_Init+0x21e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4e      	ldr	r2, [pc, #312]	; (80028d0 <HAL_GPIO_Init+0x31c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d019      	beq.n	80027ce <HAL_GPIO_Init+0x21a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4d      	ldr	r2, [pc, #308]	; (80028d4 <HAL_GPIO_Init+0x320>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d013      	beq.n	80027ca <HAL_GPIO_Init+0x216>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_GPIO_Init+0x324>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <HAL_GPIO_Init+0x212>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_GPIO_Init+0x328>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d007      	beq.n	80027c2 <HAL_GPIO_Init+0x20e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_GPIO_Init+0x32c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_GPIO_Init+0x20a>
 80027ba:	2307      	movs	r3, #7
 80027bc:	e00e      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027be:	2308      	movs	r3, #8
 80027c0:	e00c      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027c2:	2306      	movs	r3, #6
 80027c4:	e00a      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027c6:	2305      	movs	r3, #5
 80027c8:	e008      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027ca:	2304      	movs	r3, #4
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x228>
 80027da:	2300      	movs	r3, #0
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ec:	4934      	ldr	r1, [pc, #208]	; (80028c0 <HAL_GPIO_Init+0x30c>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fa:	4b3a      	ldr	r3, [pc, #232]	; (80028e4 <HAL_GPIO_Init+0x330>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281e:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_GPIO_Init+0x330>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_GPIO_Init+0x330>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002848:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <HAL_GPIO_Init+0x330>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800284e:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <HAL_GPIO_Init+0x330>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_GPIO_Init+0x330>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002878:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <HAL_GPIO_Init+0x330>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800289c:	4a11      	ldr	r2, [pc, #68]	; (80028e4 <HAL_GPIO_Init+0x330>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f ae90 	bls.w	80025d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	3724      	adds	r7, #36	; 0x24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40021400 	.word	0x40021400
 80028dc:	40021800 	.word	0x40021800
 80028e0:	40021c00 	.word	0x40021c00
 80028e4:	40013c00 	.word	0x40013c00

080028e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	460b      	mov	r3, r1
 80028f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	887b      	ldrh	r3, [r7, #2]
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
 8002904:	e001      	b.n	800290a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
 8002924:	4613      	mov	r3, r2
 8002926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002928:	787b      	ldrb	r3, [r7, #1]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800292e:	887a      	ldrh	r2, [r7, #2]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002934:	e003      	b.n	800293e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002936:	887b      	ldrh	r3, [r7, #2]
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	619a      	str	r2, [r3, #24]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	401a      	ands	r2, r3
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	429a      	cmp	r2, r3
 8002962:	d104      	bne.n	800296e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	041a      	lsls	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800296c:	e002      	b.n	8002974 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	619a      	str	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e11f      	b.n	8002bd2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe fd08 	bl	80013bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029e4:	f002 fef8 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 80029e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	4a7b      	ldr	r2, [pc, #492]	; (8002bdc <HAL_I2C_Init+0x25c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d807      	bhi.n	8002a04 <HAL_I2C_Init+0x84>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4a7a      	ldr	r2, [pc, #488]	; (8002be0 <HAL_I2C_Init+0x260>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	bf94      	ite	ls
 80029fc:	2301      	movls	r3, #1
 80029fe:	2300      	movhi	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e006      	b.n	8002a12 <HAL_I2C_Init+0x92>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <HAL_I2C_Init+0x264>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0db      	b.n	8002bd2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <HAL_I2C_Init+0x268>)
 8002a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a22:	0c9b      	lsrs	r3, r3, #18
 8002a24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4a64      	ldr	r2, [pc, #400]	; (8002bdc <HAL_I2C_Init+0x25c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d802      	bhi.n	8002a54 <HAL_I2C_Init+0xd4>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	e009      	b.n	8002a68 <HAL_I2C_Init+0xe8>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	4a63      	ldr	r2, [pc, #396]	; (8002bec <HAL_I2C_Init+0x26c>)
 8002a60:	fba2 2303 	umull	r2, r3, r2, r3
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	3301      	adds	r3, #1
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4956      	ldr	r1, [pc, #344]	; (8002bdc <HAL_I2C_Init+0x25c>)
 8002a84:	428b      	cmp	r3, r1
 8002a86:	d80d      	bhi.n	8002aa4 <HAL_I2C_Init+0x124>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e59      	subs	r1, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a96:	3301      	adds	r3, #1
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	bf38      	it	cc
 8002aa0:	2304      	movcc	r3, #4
 8002aa2:	e04f      	b.n	8002b44 <HAL_I2C_Init+0x1c4>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d111      	bne.n	8002ad0 <HAL_I2C_Init+0x150>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	440b      	add	r3, r1
 8002aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf0c      	ite	eq
 8002ac8:	2301      	moveq	r3, #1
 8002aca:	2300      	movne	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e012      	b.n	8002af6 <HAL_I2C_Init+0x176>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	1e58      	subs	r0, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	0099      	lsls	r1, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	bf0c      	ite	eq
 8002af0:	2301      	moveq	r3, #1
 8002af2:	2300      	movne	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Init+0x17e>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e022      	b.n	8002b44 <HAL_I2C_Init+0x1c4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10e      	bne.n	8002b24 <HAL_I2C_Init+0x1a4>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1e58      	subs	r0, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	440b      	add	r3, r1
 8002b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b22:	e00f      	b.n	8002b44 <HAL_I2C_Init+0x1c4>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1e58      	subs	r0, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6859      	ldr	r1, [r3, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	0099      	lsls	r1, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6809      	ldr	r1, [r1, #0]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6911      	ldr	r1, [r2, #16]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68d2      	ldr	r2, [r2, #12]
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	430b      	orrs	r3, r1
 8002b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	000186a0 	.word	0x000186a0
 8002be0:	001e847f 	.word	0x001e847f
 8002be4:	003d08ff 	.word	0x003d08ff
 8002be8:	431bde83 	.word	0x431bde83
 8002bec:	10624dd3 	.word	0x10624dd3

08002bf0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	817b      	strh	r3, [r7, #10]
 8002c02:	460b      	mov	r3, r1
 8002c04:	813b      	strh	r3, [r7, #8]
 8002c06:	4613      	mov	r3, r2
 8002c08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c0a:	f7fe ffe9 	bl	8001be0 <HAL_GetTick>
 8002c0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	f040 80d9 	bne.w	8002dd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	496d      	ldr	r1, [pc, #436]	; (8002ddc <HAL_I2C_Mem_Write+0x1ec>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f001 ff90 	bl	8004b4e <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c34:	2302      	movs	r3, #2
 8002c36:	e0cc      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_I2C_Mem_Write+0x56>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0c5      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d007      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2221      	movs	r2, #33	; 0x21
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2240      	movs	r2, #64	; 0x40
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a4d      	ldr	r2, [pc, #308]	; (8002de0 <HAL_I2C_Mem_Write+0x1f0>)
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	893a      	ldrh	r2, [r7, #8]
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	9301      	str	r3, [sp, #4]
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f001 fc3a 	bl	8004538 <I2C_RequestMemoryWrite>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d052      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e081      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f002 f811 	bl	8004cfa <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e06b      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	781a      	ldrb	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d11b      	bne.n	8002d70 <HAL_I2C_Mem_Write+0x180>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d017      	beq.n	8002d70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1aa      	bne.n	8002cce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f001 fffd 	bl	8004d7c <I2C_WaitOnBTFFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e016      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	e000      	b.n	8002dd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dd0:	2302      	movs	r3, #2
  }
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	00100002 	.word	0x00100002
 8002de0:	ffff0000 	.word	0xffff0000

08002de4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	4608      	mov	r0, r1
 8002dee:	4611      	mov	r1, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	817b      	strh	r3, [r7, #10]
 8002df6:	460b      	mov	r3, r1
 8002df8:	813b      	strh	r3, [r7, #8]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dfe:	f7fe feef 	bl	8001be0 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	f040 8123 	bne.w	800305c <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e16:	4b94      	ldr	r3, [pc, #592]	; (8003068 <HAL_I2C_Mem_Read_DMA+0x284>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	08db      	lsrs	r3, r3, #3
 8002e1c:	4a93      	ldr	r2, [pc, #588]	; (800306c <HAL_I2C_Mem_Read_DMA+0x288>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	0a1a      	lsrs	r2, r3, #8
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009a      	lsls	r2, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d116      	bne.n	8002e6a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0f9      	b.n	800305e <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d0db      	beq.n	8002e30 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2C_Mem_Read_DMA+0xa2>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0eb      	b.n	800305e <HAL_I2C_Mem_Read_DMA+0x27a>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d007      	beq.n	8002eac <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2222      	movs	r2, #34	; 0x22
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002edc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002eec:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8085 	beq.w	8003002 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	4a5d      	ldr	r2, [pc, #372]	; (8003074 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	4a5c      	ldr	r2, [pc, #368]	; (8003078 <HAL_I2C_Mem_Read_DMA+0x294>)
 8002f06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	2200      	movs	r2, #0
 8002f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3310      	adds	r3, #16
 8002f32:	4619      	mov	r1, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	461a      	mov	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	f7ff f83d 	bl	8001fbc <HAL_DMA_Start_IT>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8002f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d144      	bne.n	8002fda <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002f50:	88f8      	ldrh	r0, [r7, #6]
 8002f52:	893a      	ldrh	r2, [r7, #8]
 8002f54:	8979      	ldrh	r1, [r7, #10]
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2323      	movs	r3, #35	; 0x23
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	4603      	mov	r3, r0
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f001 fb7d 	bl	8004660 <I2C_RequestMemoryRead>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e076      	b.n	800305e <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d108      	bne.n	8002f8a <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e007      	b.n	8002f9a <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	61bb      	str	r3, [r7, #24]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	61bb      	str	r3, [r7, #24]
 8002fae:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	e03e      	b.n	8003058 <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0210 	orr.w	r2, r3, #16
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e02d      	b.n	800305e <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003002:	88f8      	ldrh	r0, [r7, #6]
 8003004:	893a      	ldrh	r2, [r7, #8]
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2323      	movs	r3, #35	; 0x23
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	4603      	mov	r3, r0
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f001 fb24 	bl	8004660 <I2C_RequestMemoryRead>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e01d      	b.n	800305e <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003046:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	e000      	b.n	800305e <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 800305c:	2302      	movs	r3, #2
  }
}
 800305e:	4618      	mov	r0, r3
 8003060:	3728      	adds	r7, #40	; 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000004 	.word	0x20000004
 800306c:	14f8b589 	.word	0x14f8b589
 8003070:	ffff0000 	.word	0xffff0000
 8003074:	0800482d 	.word	0x0800482d
 8003078:	080049d7 	.word	0x080049d7

0800307c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b088      	sub	sp, #32
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800309c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030a4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d003      	beq.n	80030b4 <HAL_I2C_EV_IRQHandler+0x38>
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b40      	cmp	r3, #64	; 0x40
 80030b0:	f040 80b6 	bne.w	8003220 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <HAL_I2C_EV_IRQHandler+0x6e>
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80030d4:	d003      	beq.n	80030de <HAL_I2C_EV_IRQHandler+0x62>
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_EV_IRQHandler+0x66>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_I2C_EV_IRQHandler+0x68>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f000 8127 	beq.w	8003338 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00c      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x92>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	0a5b      	lsrs	r3, r3, #9
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f001 feab 	bl	8004e5c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fc75 	bl	80039f6 <I2C_Master_SB>
 800310c:	e087      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08db      	lsrs	r3, r3, #3
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0xb2>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	0a5b      	lsrs	r3, r3, #9
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fceb 	bl	8003b02 <I2C_Master_ADD10>
 800312c:	e077      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	085b      	lsrs	r3, r3, #1
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_I2C_EV_IRQHandler+0xd2>
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	0a5b      	lsrs	r3, r3, #9
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fd05 	bl	8003b56 <I2C_Master_ADDR>
 800314c:	e067      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d030      	beq.n	80031bc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003168:	f000 80e8 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	09db      	lsrs	r3, r3, #7
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00f      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x11c>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	0a9b      	lsrs	r3, r3, #10
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_I2C_EV_IRQHandler+0x11c>
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d103      	bne.n	8003198 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f941 	bl	8003418 <I2C_MasterTransmit_TXE>
 8003196:	e042      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80cb 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	0a5b      	lsrs	r3, r3, #9
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80c4 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f9cb 	bl	8003550 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ba:	e0bf      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ca:	f000 80b7 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00f      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x17e>
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	0a9b      	lsrs	r3, r3, #10
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_I2C_EV_IRQHandler+0x17e>
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	089b      	lsrs	r3, r3, #2
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d103      	bne.n	80031fa <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fa93 	bl	800371e <I2C_MasterReceive_RXNE>
 80031f8:	e011      	b.n	800321e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 809a 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	0a5b      	lsrs	r3, r3, #9
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8093 	beq.w	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fb03 	bl	8003822 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321c:	e08e      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
 800321e:	e08d      	b.n	800333c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	e007      	b.n	8003242 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	085b      	lsrs	r3, r3, #1
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d012      	beq.n	8003274 <HAL_I2C_EV_IRQHandler+0x1f8>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	0a5b      	lsrs	r3, r3, #9
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00c      	beq.n	8003274 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fec1 	bl	8003ff4 <I2C_Slave_ADDR>
 8003272:	e066      	b.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x218>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	0a5b      	lsrs	r3, r3, #9
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fef5 	bl	800407c <I2C_Slave_STOPF>
 8003292:	e056      	b.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	2b21      	cmp	r3, #33	; 0x21
 8003298:	d002      	beq.n	80032a0 <HAL_I2C_EV_IRQHandler+0x224>
 800329a:	7bbb      	ldrb	r3, [r7, #14]
 800329c:	2b29      	cmp	r3, #41	; 0x29
 800329e:	d125      	bne.n	80032ec <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	09db      	lsrs	r3, r3, #7
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00f      	beq.n	80032cc <HAL_I2C_EV_IRQHandler+0x250>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	0a9b      	lsrs	r3, r3, #10
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d009      	beq.n	80032cc <HAL_I2C_EV_IRQHandler+0x250>
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fdd7 	bl	8003e78 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ca:	e039      	b.n	8003340 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d033      	beq.n	8003340 <HAL_I2C_EV_IRQHandler+0x2c4>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	0a5b      	lsrs	r3, r3, #9
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d02d      	beq.n	8003340 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fe04 	bl	8003ef2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ea:	e029      	b.n	8003340 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00f      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x29c>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	0a9b      	lsrs	r3, r3, #10
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_I2C_EV_IRQHandler+0x29c>
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fe0f 	bl	8003f34 <I2C_SlaveReceive_RXNE>
 8003316:	e014      	b.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	0a5b      	lsrs	r3, r3, #9
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fe3d 	bl	8003fb0 <I2C_SlaveReceive_BTF>
 8003336:	e004      	b.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003338:	bf00      	nop
 800333a:	e002      	b.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800333c:	bf00      	nop
 800333e:	e000      	b.n	8003342 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003340:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
 80033a4:	4613      	mov	r3, r2
 80033a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800342e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343a:	2b00      	cmp	r3, #0
 800343c:	d150      	bne.n	80034e0 <I2C_MasterTransmit_TXE+0xc8>
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	2b21      	cmp	r3, #33	; 0x21
 8003442:	d14d      	bne.n	80034e0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b08      	cmp	r3, #8
 8003448:	d01d      	beq.n	8003486 <I2C_MasterTransmit_TXE+0x6e>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b20      	cmp	r3, #32
 800344e:	d01a      	beq.n	8003486 <I2C_MasterTransmit_TXE+0x6e>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003456:	d016      	beq.n	8003486 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003466:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2211      	movs	r2, #17
 800346c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7ff ff62 	bl	8003348 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003484:	e060      	b.n	8003548 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003494:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d107      	bne.n	80034d0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff ff7d 	bl	80033c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034ce:	e03b      	b.n	8003548 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff ff35 	bl	8003348 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034de:	e033      	b.n	8003548 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	2b21      	cmp	r3, #33	; 0x21
 80034e4:	d005      	beq.n	80034f2 <I2C_MasterTransmit_TXE+0xda>
 80034e6:	7bbb      	ldrb	r3, [r7, #14]
 80034e8:	2b40      	cmp	r3, #64	; 0x40
 80034ea:	d12d      	bne.n	8003548 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b22      	cmp	r3, #34	; 0x22
 80034f0:	d12a      	bne.n	8003548 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d108      	bne.n	800350e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800350c:	e01c      	b.n	8003548 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b40      	cmp	r3, #64	; 0x40
 8003518:	d103      	bne.n	8003522 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f898 	bl	8003650 <I2C_MemoryTransmit_TXE_BTF>
}
 8003520:	e012      	b.n	8003548 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003546:	e7ff      	b.n	8003548 <I2C_MasterTransmit_TXE+0x130>
 8003548:	bf00      	nop
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b21      	cmp	r3, #33	; 0x21
 8003568:	d165      	bne.n	8003636 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003598:	e056      	b.n	8003648 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d01d      	beq.n	80035dc <I2C_MasterTransmit_BTF+0x8c>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d01a      	beq.n	80035dc <I2C_MasterTransmit_BTF+0x8c>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035ac:	d016      	beq.n	80035dc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035bc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2211      	movs	r2, #17
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff feb7 	bl	8003348 <HAL_I2C_MasterTxCpltCallback>
}
 80035da:	e035      	b.n	8003648 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80035ea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d107      	bne.n	8003626 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fed2 	bl	80033c8 <HAL_I2C_MemTxCpltCallback>
}
 8003624:	e010      	b.n	8003648 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff fe8a 	bl	8003348 <HAL_I2C_MasterTxCpltCallback>
}
 8003634:	e008      	b.n	8003648 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d102      	bne.n	8003648 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 f804 	bl	8003650 <I2C_MemoryTransmit_TXE_BTF>
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11d      	bne.n	800369c <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10b      	bne.n	8003680 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366c:	b2da      	uxtb	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	1c9a      	adds	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800367e:	e048      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003684:	b29b      	uxth	r3, r3
 8003686:	121b      	asrs	r3, r3, #8
 8003688:	b2da      	uxtb	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
}
 800369a:	e03a      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10b      	bne.n	80036bc <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036ba:	e02a      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d126      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b22      	cmp	r3, #34	; 0x22
 80036ce:	d108      	bne.n	80036e2 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036de:	601a      	str	r2, [r3, #0]
}
 80036e0:	e017      	b.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b21      	cmp	r3, #33	; 0x21
 80036ec:	d111      	bne.n	8003712 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b22      	cmp	r3, #34	; 0x22
 8003730:	d173      	bne.n	800381a <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003736:	b29b      	uxth	r3, r3
 8003738:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d920      	bls.n	8003782 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d154      	bne.n	800381a <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003780:	e04b      	b.n	800381a <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	2b02      	cmp	r3, #2
 8003788:	d047      	beq.n	800381a <I2C_MasterReceive_RXNE+0xfc>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d002      	beq.n	8003796 <I2C_MasterReceive_RXNE+0x78>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d141      	bne.n	800381a <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80037b4:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	691a      	ldr	r2, [r3, #16]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	d10a      	bne.n	8003806 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fdec 	bl	80033dc <HAL_I2C_MemRxCpltCallback>
}
 8003804:	e009      	b.n	800381a <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2212      	movs	r2, #18
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fda1 	bl	800335c <HAL_I2C_MasterRxCpltCallback>
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b04      	cmp	r3, #4
 8003838:	d11b      	bne.n	8003872 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003848:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003870:	e0bd      	b.n	80039ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b03      	cmp	r3, #3
 800387a:	d129      	bne.n	80038d0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00a      	beq.n	80038a8 <I2C_MasterReceive_BTF+0x86>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2b02      	cmp	r3, #2
 8003896:	d007      	beq.n	80038a8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038a6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691a      	ldr	r2, [r3, #16]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038ce:	e08e      	b.n	80039ee <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d176      	bne.n	80039c8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d002      	beq.n	80038e6 <I2C_MasterReceive_BTF+0xc4>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b10      	cmp	r3, #16
 80038e4:	d108      	bne.n	80038f8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e019      	b.n	800392c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d002      	beq.n	8003904 <I2C_MasterReceive_BTF+0xe2>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d108      	bne.n	8003916 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	e00a      	b.n	800392c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b10      	cmp	r3, #16
 800391a:	d007      	beq.n	800392c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29b      	uxth	r3, r3
 800394a:	3b01      	subs	r3, #1
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003986:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d10a      	bne.n	80039b2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff fd16 	bl	80033dc <HAL_I2C_MemRxCpltCallback>
}
 80039b0:	e01d      	b.n	80039ee <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2212      	movs	r2, #18
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff fccb 	bl	800335c <HAL_I2C_MasterRxCpltCallback>
}
 80039c6:	e012      	b.n	80039ee <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d117      	bne.n	8003a3a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a22:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003a24:	e067      	b.n	8003af6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]
}
 8003a38:	e05d      	b.n	8003af6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a42:	d133      	bne.n	8003aac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b21      	cmp	r3, #33	; 0x21
 8003a4e:	d109      	bne.n	8003a64 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	461a      	mov	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a60:	611a      	str	r2, [r3, #16]
 8003a62:	e008      	b.n	8003a76 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <I2C_Master_SB+0x92>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d108      	bne.n	8003a9a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d032      	beq.n	8003af6 <I2C_Master_SB+0x100>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d02d      	beq.n	8003af6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa8:	605a      	str	r2, [r3, #4]
}
 8003aaa:	e024      	b.n	8003af6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10e      	bne.n	8003ad2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	11db      	asrs	r3, r3, #7
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0306 	and.w	r3, r3, #6
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	f063 030f 	orn	r3, r3, #15
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	611a      	str	r2, [r3, #16]
}
 8003ad0:	e011      	b.n	8003af6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d10d      	bne.n	8003af6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	11db      	asrs	r3, r3, #7
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 0306 	and.w	r3, r3, #6
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f063 030e 	orn	r3, r3, #14
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <I2C_Master_ADD10+0x24>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d011      	beq.n	8003b4a <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <I2C_Master_ADD10+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b48:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b091      	sub	sp, #68	; 0x44
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b22      	cmp	r3, #34	; 0x22
 8003b7e:	f040 8169 	bne.w	8003e54 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10f      	bne.n	8003baa <I2C_Master_ADDR+0x54>
 8003b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d10b      	bne.n	8003baa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b92:	2300      	movs	r3, #0
 8003b94:	633b      	str	r3, [r7, #48]	; 0x30
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	e160      	b.n	8003e6c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11d      	bne.n	8003bee <I2C_Master_ADDR+0x98>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bba:	d118      	bne.n	8003bee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	1c5a      	adds	r2, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	651a      	str	r2, [r3, #80]	; 0x50
 8003bec:	e13e      	b.n	8003e6c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e115      	b.n	8003e4c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f040 808a 	bne.w	8003d40 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c32:	d137      	bne.n	8003ca4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c42:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c52:	d113      	bne.n	8003c7c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	627b      	str	r3, [r7, #36]	; 0x24
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	e0e7      	b.n	8003e4c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	623b      	str	r3, [r7, #32]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	e0d3      	b.n	8003e4c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d02e      	beq.n	8003d08 <I2C_Master_ADDR+0x1b2>
 8003caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d02b      	beq.n	8003d08 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	2b12      	cmp	r3, #18
 8003cb4:	d102      	bne.n	8003cbc <I2C_Master_ADDR+0x166>
 8003cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d125      	bne.n	8003d08 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00e      	beq.n	8003ce0 <I2C_Master_ADDR+0x18a>
 8003cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d00b      	beq.n	8003ce0 <I2C_Master_ADDR+0x18a>
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b10      	cmp	r3, #16
 8003ccc:	d008      	beq.n	8003ce0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e007      	b.n	8003cf0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	e0a1      	b.n	8003e4c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d16:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e085      	b.n	8003e4c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d14d      	bne.n	8003de6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d016      	beq.n	8003d7e <I2C_Master_ADDR+0x228>
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d013      	beq.n	8003d7e <I2C_Master_ADDR+0x228>
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d010      	beq.n	8003d7e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e007      	b.n	8003d8e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d8c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d9c:	d117      	bne.n	8003dce <I2C_Master_ADDR+0x278>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003da4:	d00b      	beq.n	8003dbe <I2C_Master_ADDR+0x268>
 8003da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d008      	beq.n	8003dbe <I2C_Master_ADDR+0x268>
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d005      	beq.n	8003dbe <I2C_Master_ADDR+0x268>
 8003db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d002      	beq.n	8003dbe <I2C_Master_ADDR+0x268>
 8003db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d107      	bne.n	8003dce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	e032      	b.n	8003e4c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e04:	d117      	bne.n	8003e36 <I2C_Master_ADDR+0x2e0>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e0c:	d00b      	beq.n	8003e26 <I2C_Master_ADDR+0x2d0>
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d008      	beq.n	8003e26 <I2C_Master_ADDR+0x2d0>
 8003e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d005      	beq.n	8003e26 <I2C_Master_ADDR+0x2d0>
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d002      	beq.n	8003e26 <I2C_Master_ADDR+0x2d0>
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d107      	bne.n	8003e36 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003e52:	e00b      	b.n	8003e6c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	68fb      	ldr	r3, [r7, #12]
}
 8003e6a:	e7ff      	b.n	8003e6c <I2C_Master_ADDR+0x316>
 8003e6c:	bf00      	nop
 8003e6e:	3744      	adds	r7, #68	; 0x44
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d02b      	beq.n	8003eea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d114      	bne.n	8003eea <I2C_SlaveTransmit_TXE+0x72>
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	2b29      	cmp	r3, #41	; 0x29
 8003ec4:	d111      	bne.n	8003eea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ed4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2221      	movs	r2, #33	; 0x21
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2228      	movs	r2, #40	; 0x28
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff fa43 	bl	8003370 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d011      	beq.n	8003f28 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f42:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02c      	beq.n	8003fa8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d114      	bne.n	8003fa8 <I2C_SlaveReceive_RXNE+0x74>
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b2a      	cmp	r3, #42	; 0x2a
 8003f82:	d111      	bne.n	8003fa8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f92:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2222      	movs	r2, #34	; 0x22
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2228      	movs	r2, #40	; 0x28
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff f9ee 	bl	8003384 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800400e:	2b28      	cmp	r3, #40	; 0x28
 8004010:	d127      	bne.n	8004062 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004020:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800402e:	2301      	movs	r3, #1
 8004030:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	09db      	lsrs	r3, r3, #7
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	81bb      	strh	r3, [r7, #12]
 8004044:	e002      	b.n	800404c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004054:	89ba      	ldrh	r2, [r7, #12]
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	4619      	mov	r1, r3
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff f99c 	bl	8003398 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004060:	e008      	b.n	8004074 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f06f 0202 	mvn.w	r2, #2
 800406a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040c8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d172      	bne.n	80041c0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b22      	cmp	r3, #34	; 0x22
 80040de:	d002      	beq.n	80040e6 <I2C_Slave_STOPF+0x6a>
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	2b2a      	cmp	r3, #42	; 0x2a
 80040e4:	d135      	bne.n	8004152 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f043 0204 	orr.w	r2, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004118:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411e:	4618      	mov	r0, r3
 8004120:	f7fe f950 	bl	80023c4 <HAL_DMA_GetState>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d049      	beq.n	80041be <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	4a69      	ldr	r2, [pc, #420]	; (80042d4 <I2C_Slave_STOPF+0x258>)
 8004130:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd ff98 	bl	800206c <HAL_DMA_Abort_IT>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d03d      	beq.n	80041be <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800414c:	4610      	mov	r0, r2
 800414e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004150:	e035      	b.n	80041be <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b29a      	uxth	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	f043 0204 	orr.w	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004184:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe f91a 	bl	80023c4 <HAL_DMA_GetState>
 8004190:	4603      	mov	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d014      	beq.n	80041c0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800419a:	4a4e      	ldr	r2, [pc, #312]	; (80042d4 <I2C_Slave_STOPF+0x258>)
 800419c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd ff62 	bl	800206c <HAL_DMA_Abort_IT>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041b8:	4610      	mov	r0, r2
 80041ba:	4798      	blx	r3
 80041bc:	e000      	b.n	80041c0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80041be:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d03e      	beq.n	8004248 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d112      	bne.n	80041fe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004208:	2b40      	cmp	r3, #64	; 0x40
 800420a:	d112      	bne.n	8004232 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691a      	ldr	r2, [r3, #16]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d003      	beq.n	8004258 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f843 	bl	80042dc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004256:	e039      	b.n	80042cc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b2a      	cmp	r3, #42	; 0x2a
 800425c:	d109      	bne.n	8004272 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2228      	movs	r2, #40	; 0x28
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff f889 	bl	8003384 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b28      	cmp	r3, #40	; 0x28
 800427c:	d111      	bne.n	80042a2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <I2C_Slave_STOPF+0x25c>)
 8004282:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f7ff f88a 	bl	80033b4 <HAL_I2C_ListenCpltCallback>
}
 80042a0:	e014      	b.n	80042cc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	2b22      	cmp	r3, #34	; 0x22
 80042a8:	d002      	beq.n	80042b0 <I2C_Slave_STOPF+0x234>
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	2b22      	cmp	r3, #34	; 0x22
 80042ae:	d10d      	bne.n	80042cc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2220      	movs	r2, #32
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff f85c 	bl	8003384 <HAL_I2C_SlaveRxCpltCallback>
}
 80042cc:	bf00      	nop
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	08004a51 	.word	0x08004a51
 80042d8:	ffff0000 	.word	0xffff0000

080042dc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ea:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d10a      	bne.n	800430e <I2C_ITError+0x32>
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b22      	cmp	r3, #34	; 0x22
 80042fc:	d107      	bne.n	800430e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800430c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004314:	2b28      	cmp	r3, #40	; 0x28
 8004316:	d107      	bne.n	8004328 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2228      	movs	r2, #40	; 0x28
 8004322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004326:	e015      	b.n	8004354 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004336:	d006      	beq.n	8004346 <I2C_ITError+0x6a>
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b60      	cmp	r3, #96	; 0x60
 800433c:	d003      	beq.n	8004346 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800435e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004362:	d162      	bne.n	800442a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004372:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d020      	beq.n	80043c4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	4a6a      	ldr	r2, [pc, #424]	; (8004530 <I2C_ITError+0x254>)
 8004388:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fe6c 	bl	800206c <HAL_DMA_Abort_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8089 	beq.w	80044ae <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043be:	4610      	mov	r0, r2
 80043c0:	4798      	blx	r3
 80043c2:	e074      	b.n	80044ae <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	4a59      	ldr	r2, [pc, #356]	; (8004530 <I2C_ITError+0x254>)
 80043ca:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd fe4b 	bl	800206c <HAL_DMA_Abort_IT>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d068      	beq.n	80044ae <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d10b      	bne.n	8004402 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0201 	bic.w	r2, r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
 8004428:	e041      	b.n	80044ae <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b60      	cmp	r3, #96	; 0x60
 8004434:	d125      	bne.n	8004482 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d10b      	bne.n	800446a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0201 	bic.w	r2, r2, #1
 8004478:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe ffc2 	bl	8003404 <HAL_I2C_AbortCpltCallback>
 8004480:	e015      	b.n	80044ae <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d10b      	bne.n	80044a8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fe ffa1 	bl	80033f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d104      	bne.n	80044dc <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d113      	bne.n	8004528 <I2C_ITError+0x24c>
 8004500:	7bfb      	ldrb	r3, [r7, #15]
 8004502:	2b28      	cmp	r3, #40	; 0x28
 8004504:	d110      	bne.n	8004528 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <I2C_ITError+0x258>)
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7fe ff46 	bl	80033b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	08004a51 	.word	0x08004a51
 8004534:	ffff0000 	.word	0xffff0000

08004538 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	4608      	mov	r0, r1
 8004542:	4611      	mov	r1, r2
 8004544:	461a      	mov	r2, r3
 8004546:	4603      	mov	r3, r0
 8004548:	817b      	strh	r3, [r7, #10]
 800454a:	460b      	mov	r3, r1
 800454c:	813b      	strh	r3, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	2200      	movs	r2, #0
 800456a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 faed 	bl	8004b4e <I2C_WaitOnFlagUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d003      	beq.n	8004590 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e05f      	b.n	8004654 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004594:	897b      	ldrh	r3, [r7, #10]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	492c      	ldr	r1, [pc, #176]	; (800465c <I2C_RequestMemoryWrite+0x124>)
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fb26 	bl	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e04c      	b.n	8004654 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6a39      	ldr	r1, [r7, #32]
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fb90 	bl	8004cfa <I2C_WaitOnTXEFlagUntilTimeout>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d107      	bne.n	80045f8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e02b      	b.n	8004654 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045fc:	88fb      	ldrh	r3, [r7, #6]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d105      	bne.n	800460e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004602:	893b      	ldrh	r3, [r7, #8]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	611a      	str	r2, [r3, #16]
 800460c:	e021      	b.n	8004652 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b29b      	uxth	r3, r3
 8004614:	b2da      	uxtb	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461e:	6a39      	ldr	r1, [r7, #32]
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fb6a 	bl	8004cfa <I2C_WaitOnTXEFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00d      	beq.n	8004648 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004630:	2b04      	cmp	r3, #4
 8004632:	d107      	bne.n	8004644 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004642:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e005      	b.n	8004654 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	00010002 	.word	0x00010002

08004660 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	4608      	mov	r0, r1
 800466a:	4611      	mov	r1, r2
 800466c:	461a      	mov	r2, r3
 800466e:	4603      	mov	r3, r0
 8004670:	817b      	strh	r3, [r7, #10]
 8004672:	460b      	mov	r3, r1
 8004674:	813b      	strh	r3, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004688:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004698:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa51 	bl	8004b4e <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e0a9      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	4951      	ldr	r1, [pc, #324]	; (8004828 <I2C_RequestMemoryRead+0x1c8>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 fa8a 	bl	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e096      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	6a39      	ldr	r1, [r7, #32]
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 faf4 	bl	8004cfa <I2C_WaitOnTXEFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2b04      	cmp	r3, #4
 800471e:	d107      	bne.n	8004730 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e075      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d105      	bne.n	8004746 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800473a:	893b      	ldrh	r3, [r7, #8]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]
 8004744:	e021      	b.n	800478a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004746:	893b      	ldrh	r3, [r7, #8]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	b29b      	uxth	r3, r3
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	6a39      	ldr	r1, [r7, #32]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 face 	bl	8004cfa <I2C_WaitOnTXEFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	2b04      	cmp	r3, #4
 800476a:	d107      	bne.n	800477c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e04f      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004780:	893b      	ldrh	r3, [r7, #8]
 8004782:	b2da      	uxtb	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800478a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478c:	6a39      	ldr	r1, [r7, #32]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fab3 	bl	8004cfa <I2C_WaitOnTXEFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00d      	beq.n	80047b6 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	2b04      	cmp	r3, #4
 80047a0:	d107      	bne.n	80047b2 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e034      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f9bb 	bl	8004b4e <I2C_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e013      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047f8:	897b      	ldrh	r3, [r7, #10]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	4906      	ldr	r1, [pc, #24]	; (8004828 <I2C_RequestMemoryRead+0x1c8>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f9f4 	bl	8004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	00010002 	.word	0x00010002

0800482c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004848:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800485e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486c:	2200      	movs	r2, #0
 800486e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	2200      	movs	r2, #0
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004886:	2b21      	cmp	r3, #33	; 0x21
 8004888:	d007      	beq.n	800489a <I2C_DMAXferCplt+0x6e>
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004890:	2b22      	cmp	r3, #34	; 0x22
 8004892:	d131      	bne.n	80048f8 <I2C_DMAXferCplt+0xcc>
 8004894:	7cbb      	ldrb	r3, [r7, #18]
 8004896:	2b20      	cmp	r3, #32
 8004898:	d12e      	bne.n	80048f8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2200      	movs	r2, #0
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	2b29      	cmp	r3, #41	; 0x29
 80048b4:	d10a      	bne.n	80048cc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2221      	movs	r2, #33	; 0x21
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2228      	movs	r2, #40	; 0x28
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048c4:	6978      	ldr	r0, [r7, #20]
 80048c6:	f7fe fd53 	bl	8003370 <HAL_I2C_SlaveTxCpltCallback>
 80048ca:	e00c      	b.n	80048e6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	2b2a      	cmp	r3, #42	; 0x2a
 80048d0:	d109      	bne.n	80048e6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2222      	movs	r2, #34	; 0x22
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2228      	movs	r2, #40	; 0x28
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048e0:	6978      	ldr	r0, [r7, #20]
 80048e2:	f7fe fd4f 	bl	8003384 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80048f4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80048f6:	e06a      	b.n	80049ce <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d064      	beq.n	80049ce <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d107      	bne.n	800491e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800492c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004934:	d009      	beq.n	800494a <I2C_DMAXferCplt+0x11e>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d006      	beq.n	800494a <I2C_DMAXferCplt+0x11e>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004942:	d002      	beq.n	800494a <I2C_DMAXferCplt+0x11e>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b20      	cmp	r3, #32
 8004948:	d107      	bne.n	800495a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004958:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004968:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004978:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004988:	6978      	ldr	r0, [r7, #20]
 800498a:	f7fe fd31 	bl	80033f0 <HAL_I2C_ErrorCallback>
}
 800498e:	e01e      	b.n	80049ce <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d10a      	bne.n	80049ba <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2200      	movs	r2, #0
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7fe fd12 	bl	80033dc <HAL_I2C_MemRxCpltCallback>
}
 80049b8:	e009      	b.n	80049ce <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2212      	movs	r2, #18
 80049c6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f7fe fcc7 	bl	800335c <HAL_I2C_MasterRxCpltCallback>
}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f0:	2200      	movs	r2, #0
 80049f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	2200      	movs	r2, #0
 8004a02:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7fd fceb 	bl	80023e0 <HAL_DMA_GetError>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d01b      	beq.n	8004a48 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a1e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7fe fcd4 	bl	80033f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a64:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	2200      	movs	r2, #0
 8004a74:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a82:	2200      	movs	r2, #0
 8004a84:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a94:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	2200      	movs	r2, #0
 8004aba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b60      	cmp	r3, #96	; 0x60
 8004ad6:	d10e      	bne.n	8004af6 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7fe fc88 	bl	8003404 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af4:	e027      	b.n	8004b46 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004af6:	7afb      	ldrb	r3, [r7, #11]
 8004af8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004afc:	2b28      	cmp	r3, #40	; 0x28
 8004afe:	d117      	bne.n	8004b30 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0201 	orr.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b1e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2228      	movs	r2, #40	; 0x28
 8004b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b2e:	e007      	b.n	8004b40 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7fe fc55 	bl	80033f0 <HAL_I2C_ErrorCallback>
}
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5e:	e025      	b.n	8004bac <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b66:	d021      	beq.n	8004bac <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b68:	f7fd f83a 	bl	8001be0 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d116      	bne.n	8004bac <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e023      	b.n	8004bf4 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10d      	bne.n	8004bd2 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	e00c      	b.n	8004bec <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	79fb      	ldrb	r3, [r7, #7]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d0b6      	beq.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c0a:	e051      	b.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c1a:	d123      	bne.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0204 	orr.w	r2, r3, #4
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e046      	b.n	8004cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c6a:	d021      	beq.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6c:	f7fc ffb8 	bl	8001be0 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d302      	bcc.n	8004c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d116      	bne.n	8004cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e020      	b.n	8004cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	0c1b      	lsrs	r3, r3, #16
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d10c      	bne.n	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	43da      	mvns	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e00b      	b.n	8004cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	43da      	mvns	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d18d      	bne.n	8004c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b084      	sub	sp, #16
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d06:	e02d      	b.n	8004d64 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f878 	bl	8004dfe <I2C_IsAcknowledgeFailed>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e02d      	b.n	8004d74 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d1e:	d021      	beq.n	8004d64 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d20:	f7fc ff5e 	bl	8001be0 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d116      	bne.n	8004d64 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f043 0220 	orr.w	r2, r3, #32
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e007      	b.n	8004d74 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d1ca      	bne.n	8004d08 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d88:	e02d      	b.n	8004de6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f837 	bl	8004dfe <I2C_IsAcknowledgeFailed>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e02d      	b.n	8004df6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da0:	d021      	beq.n	8004de6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fc ff1d 	bl	8001be0 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d116      	bne.n	8004de6 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f043 0220 	orr.w	r2, r3, #32
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e007      	b.n	8004df6 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d1ca      	bne.n	8004d8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e14:	d11b      	bne.n	8004e4e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e1e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f043 0204 	orr.w	r2, r3, #4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e6c:	d103      	bne.n	8004e76 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e74:	e007      	b.n	8004e86 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e7e:	d102      	bne.n	8004e86 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2208      	movs	r2, #8
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e25b      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d075      	beq.n	8004f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eb2:	4ba3      	ldr	r3, [pc, #652]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d00c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebe:	4ba0      	ldr	r3, [pc, #640]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d112      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eca:	4b9d      	ldr	r3, [pc, #628]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed6:	d10b      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed8:	4b99      	ldr	r3, [pc, #612]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d05b      	beq.n	8004f9c <HAL_RCC_OscConfig+0x108>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d157      	bne.n	8004f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e236      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef8:	d106      	bne.n	8004f08 <HAL_RCC_OscConfig+0x74>
 8004efa:	4b91      	ldr	r3, [pc, #580]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a90      	ldr	r2, [pc, #576]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e01d      	b.n	8004f44 <HAL_RCC_OscConfig+0xb0>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f10:	d10c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x98>
 8004f12:	4b8b      	ldr	r3, [pc, #556]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a8a      	ldr	r2, [pc, #552]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	4b88      	ldr	r3, [pc, #544]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a87      	ldr	r2, [pc, #540]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	6013      	str	r3, [r2, #0]
 8004f2a:	e00b      	b.n	8004f44 <HAL_RCC_OscConfig+0xb0>
 8004f2c:	4b84      	ldr	r3, [pc, #528]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a83      	ldr	r2, [pc, #524]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f36:	6013      	str	r3, [r2, #0]
 8004f38:	4b81      	ldr	r3, [pc, #516]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a80      	ldr	r2, [pc, #512]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d013      	beq.n	8004f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4c:	f7fc fe48 	bl	8001be0 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fc fe44 	bl	8001be0 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	; 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e1fb      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	4b76      	ldr	r3, [pc, #472]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0xc0>
 8004f72:	e014      	b.n	8004f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fc fe34 	bl	8001be0 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f7c:	f7fc fe30 	bl	8001be0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1e7      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	4b6c      	ldr	r3, [pc, #432]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0xe8>
 8004f9a:	e000      	b.n	8004f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0302 	and.w	r3, r3, #2
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d063      	beq.n	8005072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004faa:	4b65      	ldr	r3, [pc, #404]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00b      	beq.n	8004fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb6:	4b62      	ldr	r3, [pc, #392]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d11c      	bne.n	8004ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc2:	4b5f      	ldr	r3, [pc, #380]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	4b5c      	ldr	r3, [pc, #368]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x152>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e1bb      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe6:	4b56      	ldr	r3, [pc, #344]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4952      	ldr	r1, [pc, #328]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	e03a      	b.n	8005072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d020      	beq.n	8005046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005004:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <HAL_RCC_OscConfig+0x2b0>)
 8005006:	2201      	movs	r2, #1
 8005008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fc fde9 	bl	8001be0 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005012:	f7fc fde5 	bl	8001be0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e19c      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	4b46      	ldr	r3, [pc, #280]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0f0      	beq.n	8005012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005030:	4b43      	ldr	r3, [pc, #268]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4940      	ldr	r1, [pc, #256]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005040:	4313      	orrs	r3, r2
 8005042:	600b      	str	r3, [r1, #0]
 8005044:	e015      	b.n	8005072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005046:	4b3f      	ldr	r3, [pc, #252]	; (8005144 <HAL_RCC_OscConfig+0x2b0>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504c:	f7fc fdc8 	bl	8001be0 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005054:	f7fc fdc4 	bl	8001be0 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e17b      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1f0      	bne.n	8005054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b00      	cmp	r3, #0
 800507c:	d030      	beq.n	80050e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d016      	beq.n	80050b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005086:	4b30      	ldr	r3, [pc, #192]	; (8005148 <HAL_RCC_OscConfig+0x2b4>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508c:	f7fc fda8 	bl	8001be0 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005094:	f7fc fda4 	bl	8001be0 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e15b      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	4b26      	ldr	r3, [pc, #152]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0f0      	beq.n	8005094 <HAL_RCC_OscConfig+0x200>
 80050b2:	e015      	b.n	80050e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b4:	4b24      	ldr	r3, [pc, #144]	; (8005148 <HAL_RCC_OscConfig+0x2b4>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ba:	f7fc fd91 	bl	8001be0 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c2:	f7fc fd8d 	bl	8001be0 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e144      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 80050d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f0      	bne.n	80050c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80a0 	beq.w	800522e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10f      	bne.n	800511e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_RCC_OscConfig+0x2ac>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511e:	4b0b      	ldr	r3, [pc, #44]	; (800514c <HAL_RCC_OscConfig+0x2b8>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d121      	bne.n	800516e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512a:	4b08      	ldr	r3, [pc, #32]	; (800514c <HAL_RCC_OscConfig+0x2b8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a07      	ldr	r2, [pc, #28]	; (800514c <HAL_RCC_OscConfig+0x2b8>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005136:	f7fc fd53 	bl	8001be0 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	e011      	b.n	8005162 <HAL_RCC_OscConfig+0x2ce>
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800
 8005144:	42470000 	.word	0x42470000
 8005148:	42470e80 	.word	0x42470e80
 800514c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005150:	f7fc fd46 	bl	8001be0 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e0fd      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005162:	4b81      	ldr	r3, [pc, #516]	; (8005368 <HAL_RCC_OscConfig+0x4d4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d106      	bne.n	8005184 <HAL_RCC_OscConfig+0x2f0>
 8005176:	4b7d      	ldr	r3, [pc, #500]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517a:	4a7c      	ldr	r2, [pc, #496]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800517c:	f043 0301 	orr.w	r3, r3, #1
 8005180:	6713      	str	r3, [r2, #112]	; 0x70
 8005182:	e01c      	b.n	80051be <HAL_RCC_OscConfig+0x32a>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b05      	cmp	r3, #5
 800518a:	d10c      	bne.n	80051a6 <HAL_RCC_OscConfig+0x312>
 800518c:	4b77      	ldr	r3, [pc, #476]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a76      	ldr	r2, [pc, #472]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 8005192:	f043 0304 	orr.w	r3, r3, #4
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
 8005198:	4b74      	ldr	r3, [pc, #464]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	4a73      	ldr	r2, [pc, #460]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	6713      	str	r3, [r2, #112]	; 0x70
 80051a4:	e00b      	b.n	80051be <HAL_RCC_OscConfig+0x32a>
 80051a6:	4b71      	ldr	r3, [pc, #452]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	4a70      	ldr	r2, [pc, #448]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80051ac:	f023 0301 	bic.w	r3, r3, #1
 80051b0:	6713      	str	r3, [r2, #112]	; 0x70
 80051b2:	4b6e      	ldr	r3, [pc, #440]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b6:	4a6d      	ldr	r2, [pc, #436]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80051b8:	f023 0304 	bic.w	r3, r3, #4
 80051bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d015      	beq.n	80051f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c6:	f7fc fd0b 	bl	8001be0 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fc fd07 	bl	8001be0 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e0bc      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e4:	4b61      	ldr	r3, [pc, #388]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0ee      	beq.n	80051ce <HAL_RCC_OscConfig+0x33a>
 80051f0:	e014      	b.n	800521c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fc fcf5 	bl	8001be0 <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f8:	e00a      	b.n	8005210 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fa:	f7fc fcf1 	bl	8001be0 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	f241 3288 	movw	r2, #5000	; 0x1388
 8005208:	4293      	cmp	r3, r2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e0a6      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005210:	4b56      	ldr	r3, [pc, #344]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ee      	bne.n	80051fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d105      	bne.n	800522e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005222:	4b52      	ldr	r3, [pc, #328]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	4a51      	ldr	r2, [pc, #324]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 8005228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800522c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 8092 	beq.w	800535c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005238:	4b4c      	ldr	r3, [pc, #304]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d05c      	beq.n	80052fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d141      	bne.n	80052d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524c:	4b48      	ldr	r3, [pc, #288]	; (8005370 <HAL_RCC_OscConfig+0x4dc>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fc fcc5 	bl	8001be0 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525a:	f7fc fcc1 	bl	8001be0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e078      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	4b3f      	ldr	r3, [pc, #252]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	019b      	lsls	r3, r3, #6
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	3b01      	subs	r3, #1
 8005292:	041b      	lsls	r3, r3, #16
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	4933      	ldr	r1, [pc, #204]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052a2:	4b33      	ldr	r3, [pc, #204]	; (8005370 <HAL_RCC_OscConfig+0x4dc>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a8:	f7fc fc9a 	bl	8001be0 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fc fc96 	bl	8001be0 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e04d      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052c2:	4b2a      	ldr	r3, [pc, #168]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x41c>
 80052ce:	e045      	b.n	800535c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <HAL_RCC_OscConfig+0x4dc>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d6:	f7fc fc83 	bl	8001be0 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052de:	f7fc fc7f 	bl	8001be0 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e036      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f0      	bne.n	80052de <HAL_RCC_OscConfig+0x44a>
 80052fc:	e02e      	b.n	800535c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e029      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_RCC_OscConfig+0x4d8>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	429a      	cmp	r2, r3
 800531c:	d11c      	bne.n	8005358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d115      	bne.n	8005358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005332:	4013      	ands	r3, r2
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005338:	4293      	cmp	r3, r2
 800533a:	d10d      	bne.n	8005358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d106      	bne.n	8005358 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005354:	429a      	cmp	r2, r3
 8005356:	d001      	beq.n	800535c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40007000 	.word	0x40007000
 800536c:	40023800 	.word	0x40023800
 8005370:	42470060 	.word	0x42470060

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cc      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005388:	4b68      	ldr	r3, [pc, #416]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90c      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b65      	ldr	r3, [pc, #404]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b63      	ldr	r3, [pc, #396]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0b8      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c8:	4b59      	ldr	r3, [pc, #356]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a58      	ldr	r2, [pc, #352]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e0:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a52      	ldr	r2, [pc, #328]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b50      	ldr	r3, [pc, #320]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	494d      	ldr	r1, [pc, #308]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d044      	beq.n	8005494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b47      	ldr	r3, [pc, #284]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d119      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e07f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d003      	beq.n	8005432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	2b03      	cmp	r3, #3
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005432:	4b3f      	ldr	r3, [pc, #252]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e067      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b37      	ldr	r3, [pc, #220]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4934      	ldr	r1, [pc, #208]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005464:	f7fc fbbc 	bl	8001be0 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fc fbb8 	bl	8001be0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	; 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d20c      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b20      	ldr	r3, [pc, #128]	; (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e032      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c8:	4b19      	ldr	r3, [pc, #100]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4916      	ldr	r1, [pc, #88]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e6:	4b12      	ldr	r3, [pc, #72]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	490e      	ldr	r1, [pc, #56]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fa:	f000 f889 	bl	8005610 <HAL_RCC_GetSysClockFreq>
 80054fe:	4601      	mov	r1, r0
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	4a0a      	ldr	r2, [pc, #40]	; (8005534 <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	5cd3      	ldrb	r3, [r2, r3]
 800550e:	fa21 f303 	lsr.w	r3, r1, r3
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fc fb1c 	bl	8001b58 <HAL_InitTick>

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00
 8005530:	40023800 	.word	0x40023800
 8005534:	08008690 	.word	0x08008690
 8005538:	20000004 	.word	0x20000004
 800553c:	20000008 	.word	0x20000008

08005540 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08c      	sub	sp, #48	; 0x30
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d129      	bne.n	80055a6 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	4a2a      	ldr	r2, [pc, #168]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800556e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005578:	2303      	movs	r3, #3
 800557a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800557c:	2300      	movs	r3, #0
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005584:	f107 031c 	add.w	r3, r7, #28
 8005588:	4619      	mov	r1, r3
 800558a:	481f      	ldr	r0, [pc, #124]	; (8005608 <HAL_RCC_MCOConfig+0xc8>)
 800558c:	f7fd f812 	bl	80025b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	430b      	orrs	r3, r1
 800559e:	4919      	ldr	r1, [pc, #100]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80055a4:	e029      	b.n	80055fa <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	4b16      	ldr	r3, [pc, #88]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 80055b0:	f043 0304 	orr.w	r3, r3, #4
 80055b4:	6313      	str	r3, [r2, #48]	; 0x30
 80055b6:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	f003 0304 	and.w	r3, r3, #4
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80055c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c8:	2302      	movs	r3, #2
 80055ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055cc:	2303      	movs	r3, #3
 80055ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80055d4:	2300      	movs	r3, #0
 80055d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80055d8:	f107 031c 	add.w	r3, r7, #28
 80055dc:	4619      	mov	r1, r3
 80055de:	480b      	ldr	r0, [pc, #44]	; (800560c <HAL_RCC_MCOConfig+0xcc>)
 80055e0:	f7fc ffe8 	bl	80025b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	00d9      	lsls	r1, r3, #3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	430b      	orrs	r3, r1
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <HAL_RCC_MCOConfig+0xc4>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
}
 80055fa:	bf00      	nop
 80055fc:	3730      	adds	r7, #48	; 0x30
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40023800 	.word	0x40023800
 8005608:	40020000 	.word	0x40020000
 800560c:	40020800 	.word	0x40020800

08005610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005626:	4b63      	ldr	r3, [pc, #396]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b04      	cmp	r3, #4
 8005630:	d007      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0x32>
 8005632:	2b08      	cmp	r3, #8
 8005634:	d008      	beq.n	8005648 <HAL_RCC_GetSysClockFreq+0x38>
 8005636:	2b00      	cmp	r3, #0
 8005638:	f040 80b4 	bne.w	80057a4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800563c:	4b5e      	ldr	r3, [pc, #376]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800563e:	60bb      	str	r3, [r7, #8]
       break;
 8005640:	e0b3      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005642:	4b5e      	ldr	r3, [pc, #376]	; (80057bc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005644:	60bb      	str	r3, [r7, #8]
      break;
 8005646:	e0b0      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005648:	4b5a      	ldr	r3, [pc, #360]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005650:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005652:	4b58      	ldr	r3, [pc, #352]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d04a      	beq.n	80056f4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565e:	4b55      	ldr	r3, [pc, #340]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	099b      	lsrs	r3, r3, #6
 8005664:	f04f 0400 	mov.w	r4, #0
 8005668:	f240 11ff 	movw	r1, #511	; 0x1ff
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	ea03 0501 	and.w	r5, r3, r1
 8005674:	ea04 0602 	and.w	r6, r4, r2
 8005678:	4629      	mov	r1, r5
 800567a:	4632      	mov	r2, r6
 800567c:	f04f 0300 	mov.w	r3, #0
 8005680:	f04f 0400 	mov.w	r4, #0
 8005684:	0154      	lsls	r4, r2, #5
 8005686:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800568a:	014b      	lsls	r3, r1, #5
 800568c:	4619      	mov	r1, r3
 800568e:	4622      	mov	r2, r4
 8005690:	1b49      	subs	r1, r1, r5
 8005692:	eb62 0206 	sbc.w	r2, r2, r6
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	f04f 0400 	mov.w	r4, #0
 800569e:	0194      	lsls	r4, r2, #6
 80056a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80056a4:	018b      	lsls	r3, r1, #6
 80056a6:	1a5b      	subs	r3, r3, r1
 80056a8:	eb64 0402 	sbc.w	r4, r4, r2
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	f04f 0200 	mov.w	r2, #0
 80056b4:	00e2      	lsls	r2, r4, #3
 80056b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80056ba:	00d9      	lsls	r1, r3, #3
 80056bc:	460b      	mov	r3, r1
 80056be:	4614      	mov	r4, r2
 80056c0:	195b      	adds	r3, r3, r5
 80056c2:	eb44 0406 	adc.w	r4, r4, r6
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	f04f 0200 	mov.w	r2, #0
 80056ce:	0262      	lsls	r2, r4, #9
 80056d0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80056d4:	0259      	lsls	r1, r3, #9
 80056d6:	460b      	mov	r3, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	4621      	mov	r1, r4
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	461a      	mov	r2, r3
 80056e6:	4623      	mov	r3, r4
 80056e8:	f7fa fdc2 	bl	8000270 <__aeabi_uldivmod>
 80056ec:	4603      	mov	r3, r0
 80056ee:	460c      	mov	r4, r1
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	e049      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	099b      	lsrs	r3, r3, #6
 80056fa:	f04f 0400 	mov.w	r4, #0
 80056fe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	ea03 0501 	and.w	r5, r3, r1
 800570a:	ea04 0602 	and.w	r6, r4, r2
 800570e:	4629      	mov	r1, r5
 8005710:	4632      	mov	r2, r6
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	f04f 0400 	mov.w	r4, #0
 800571a:	0154      	lsls	r4, r2, #5
 800571c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005720:	014b      	lsls	r3, r1, #5
 8005722:	4619      	mov	r1, r3
 8005724:	4622      	mov	r2, r4
 8005726:	1b49      	subs	r1, r1, r5
 8005728:	eb62 0206 	sbc.w	r2, r2, r6
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	f04f 0400 	mov.w	r4, #0
 8005734:	0194      	lsls	r4, r2, #6
 8005736:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800573a:	018b      	lsls	r3, r1, #6
 800573c:	1a5b      	subs	r3, r3, r1
 800573e:	eb64 0402 	sbc.w	r4, r4, r2
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	00e2      	lsls	r2, r4, #3
 800574c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005750:	00d9      	lsls	r1, r3, #3
 8005752:	460b      	mov	r3, r1
 8005754:	4614      	mov	r4, r2
 8005756:	195b      	adds	r3, r3, r5
 8005758:	eb44 0406 	adc.w	r4, r4, r6
 800575c:	f04f 0100 	mov.w	r1, #0
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	02a2      	lsls	r2, r4, #10
 8005766:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800576a:	0299      	lsls	r1, r3, #10
 800576c:	460b      	mov	r3, r1
 800576e:	4614      	mov	r4, r2
 8005770:	4618      	mov	r0, r3
 8005772:	4621      	mov	r1, r4
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f04f 0400 	mov.w	r4, #0
 800577a:	461a      	mov	r2, r3
 800577c:	4623      	mov	r3, r4
 800577e:	f7fa fd77 	bl	8000270 <__aeabi_uldivmod>
 8005782:	4603      	mov	r3, r0
 8005784:	460c      	mov	r4, r1
 8005786:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	0c1b      	lsrs	r3, r3, #16
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	3301      	adds	r3, #1
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	60bb      	str	r3, [r7, #8]
      break;
 80057a2:	e002      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b04      	ldr	r3, [pc, #16]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80057a6:	60bb      	str	r3, [r7, #8]
      break;
 80057a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057aa:	68bb      	ldr	r3, [r7, #8]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	007a1200 	.word	0x007a1200

080057c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c4:	4b03      	ldr	r3, [pc, #12]	; (80057d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c6:	681b      	ldr	r3, [r3, #0]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	20000004 	.word	0x20000004

080057d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057dc:	f7ff fff0 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 80057e0:	4601      	mov	r1, r0
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	0a9b      	lsrs	r3, r3, #10
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	4a03      	ldr	r2, [pc, #12]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40023800 	.word	0x40023800
 80057fc:	080086a0 	.word	0x080086a0

08005800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005804:	f7ff ffdc 	bl	80057c0 <HAL_RCC_GetHCLKFreq>
 8005808:	4601      	mov	r1, r0
 800580a:	4b05      	ldr	r3, [pc, #20]	; (8005820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0b5b      	lsrs	r3, r3, #13
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4a03      	ldr	r2, [pc, #12]	; (8005824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005816:	5cd3      	ldrb	r3, [r2, r3]
 8005818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800581c:	4618      	mov	r0, r3
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	080086a0 	.word	0x080086a0

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e01d      	b.n	8005876 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fe9e 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 fd5c 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f042 0201 	orr.w	r2, r2, #1
 8005894:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d007      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b082      	sub	sp, #8
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e01d      	b.n	8005914 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f815 	bl	800591c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3304      	adds	r3, #4
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 fd0d 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2201      	movs	r2, #1
 8005940:	6839      	ldr	r1, [r7, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f001 f988 	bl	8006c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a15      	ldr	r2, [pc, #84]	; (80059a4 <HAL_TIM_PWM_Start+0x74>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <HAL_TIM_PWM_Start+0x2c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a14      	ldr	r2, [pc, #80]	; (80059a8 <HAL_TIM_PWM_Start+0x78>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d101      	bne.n	8005960 <HAL_TIM_PWM_Start+0x30>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <HAL_TIM_PWM_Start+0x32>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d007      	beq.n	8005998 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40010400 	.word	0x40010400

080059ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	6839      	ldr	r1, [r7, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 f94a 	bl	8006c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <HAL_TIM_PWM_Stop+0xa8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d004      	beq.n	80059d8 <HAL_TIM_PWM_Stop+0x2c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a21      	ldr	r2, [pc, #132]	; (8005a58 <HAL_TIM_PWM_Stop+0xac>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d101      	bne.n	80059dc <HAL_TIM_PWM_Stop+0x30>
 80059d8:	2301      	movs	r3, #1
 80059da:	e000      	b.n	80059de <HAL_TIM_PWM_Stop+0x32>
 80059dc:	2300      	movs	r3, #0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d017      	beq.n	8005a12 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	6a1a      	ldr	r2, [r3, #32]
 80059e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80059ec:	4013      	ands	r3, r2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10f      	bne.n	8005a12 <HAL_TIM_PWM_Stop+0x66>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	f240 4344 	movw	r3, #1092	; 0x444
 80059fc:	4013      	ands	r3, r2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d107      	bne.n	8005a12 <HAL_TIM_PWM_Stop+0x66>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10f      	bne.n	8005a42 <HAL_TIM_PWM_Stop+0x96>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6a1a      	ldr	r2, [r3, #32]
 8005a28:	f240 4344 	movw	r3, #1092	; 0x444
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <HAL_TIM_PWM_Stop+0x96>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400

08005a5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e01d      	b.n	8005aaa <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f815 	bl	8005ab2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f000 fc42 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b083      	sub	sp, #12
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005aba:	bf00      	nop
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
	...

08005ac8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d841      	bhi.n	8005b5c <HAL_TIM_IC_Start_IT+0x94>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <HAL_TIM_IC_Start_IT+0x18>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b5d 	.word	0x08005b5d
 8005aec:	08005b5d 	.word	0x08005b5d
 8005af0:	08005b27 	.word	0x08005b27
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005b5d 	.word	0x08005b5d
 8005b00:	08005b39 	.word	0x08005b39
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005b5d 	.word	0x08005b5d
 8005b10:	08005b4b 	.word	0x08005b4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0202 	orr.w	r2, r2, #2
 8005b22:	60da      	str	r2, [r3, #12]
      break;
 8005b24:	e01b      	b.n	8005b5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0204 	orr.w	r2, r2, #4
 8005b34:	60da      	str	r2, [r3, #12]
      break;
 8005b36:	e012      	b.n	8005b5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	60da      	str	r2, [r3, #12]
      break;
 8005b48:	e009      	b.n	8005b5e <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68da      	ldr	r2, [r3, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f042 0210 	orr.w	r2, r2, #16
 8005b58:	60da      	str	r2, [r3, #12]
      break;
 8005b5a:	e000      	b.n	8005b5e <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005b5c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2201      	movs	r2, #1
 8005b64:	6839      	ldr	r1, [r7, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 f876 	bl	8006c58 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d007      	beq.n	8005b8e <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0302 	and.w	r3, r3, #2
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0302 	and.w	r3, r3, #2
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0202 	mvn.w	r2, #2
 8005bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fa fe8a 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fb80 	bl	80062e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fb87 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0204 	mvn.w	r2, #4
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fa fe60 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fb56 	bl	80062e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fb5d 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0208 	mvn.w	r2, #8
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2204      	movs	r2, #4
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fa fe36 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fb2c 	bl	80062e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fb33 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0210 	mvn.w	r2, #16
 8005cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fa fe0c 	bl	80008f4 <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb02 	bl	80062e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb09 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d10e      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d107      	bne.n	8005d1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0201 	mvn.w	r2, #1
 8005d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fa fd96 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d26:	2b80      	cmp	r3, #128	; 0x80
 8005d28:	d10e      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d34:	2b80      	cmp	r3, #128	; 0x80
 8005d36:	d107      	bne.n	8005d48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 f834 	bl	8006db0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d10e      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d107      	bne.n	8005d74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 face 	bl	8006310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	f003 0320 	and.w	r3, r3, #32
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d107      	bne.n	8005da0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0220 	mvn.w	r2, #32
 8005d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fffe 	bl	8006d9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d101      	bne.n	8005dc2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e08a      	b.n	8005ed8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2202      	movs	r2, #2
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d11b      	bne.n	8005e10 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f000 fd72 	bl	80068d0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 020c 	bic.w	r2, r2, #12
 8005dfa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6999      	ldr	r1, [r3, #24]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	619a      	str	r2, [r3, #24]
 8005e0e:	e05a      	b.n	8005ec6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d11c      	bne.n	8005e50 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6819      	ldr	r1, [r3, #0]
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f000 fdf6 	bl	8006a16 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e38:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6999      	ldr	r1, [r3, #24]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	021a      	lsls	r2, r3, #8
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	619a      	str	r2, [r3, #24]
 8005e4e:	e03a      	b.n	8005ec6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d11b      	bne.n	8005e8e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	6819      	ldr	r1, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f000 fe43 	bl	8006af0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 020c 	bic.w	r2, r2, #12
 8005e78:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	61da      	str	r2, [r3, #28]
 8005e8c:	e01b      	b.n	8005ec6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6819      	ldr	r1, [r3, #0]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f000 fe63 	bl	8006b68 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	021a      	lsls	r2, r3, #8
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e0b4      	b.n	8006064 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b0c      	cmp	r3, #12
 8005f0e:	f200 809f 	bhi.w	8006050 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005f12:	a201      	add	r2, pc, #4	; (adr r2, 8005f18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08006051 	.word	0x08006051
 8005f20:	08006051 	.word	0x08006051
 8005f24:	08006051 	.word	0x08006051
 8005f28:	08005f8d 	.word	0x08005f8d
 8005f2c:	08006051 	.word	0x08006051
 8005f30:	08006051 	.word	0x08006051
 8005f34:	08006051 	.word	0x08006051
 8005f38:	08005fcf 	.word	0x08005fcf
 8005f3c:	08006051 	.word	0x08006051
 8005f40:	08006051 	.word	0x08006051
 8005f44:	08006051 	.word	0x08006051
 8005f48:	0800600f 	.word	0x0800600f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fa86 	bl	8006464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0208 	orr.w	r2, r2, #8
 8005f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0204 	bic.w	r2, r2, #4
 8005f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	619a      	str	r2, [r3, #24]
      break;
 8005f8a:	e062      	b.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 fad6 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6999      	ldr	r1, [r3, #24]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	021a      	lsls	r2, r3, #8
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	619a      	str	r2, [r3, #24]
      break;
 8005fcc:	e041      	b.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fb2b 	bl	8006630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0208 	orr.w	r2, r2, #8
 8005fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0204 	bic.w	r2, r2, #4
 8005ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	430a      	orrs	r2, r1
 800600a:	61da      	str	r2, [r3, #28]
      break;
 800600c:	e021      	b.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 fb7f 	bl	8006718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69da      	ldr	r2, [r3, #28]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	69da      	ldr	r2, [r3, #28]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	69d9      	ldr	r1, [r3, #28]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	021a      	lsls	r2, r3, #8
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	61da      	str	r2, [r3, #28]
      break;
 800604e:	e000      	b.n	8006052 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006050:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_TIM_ConfigClockSource+0x18>
 8006080:	2302      	movs	r3, #2
 8006082:	e0a6      	b.n	80061d2 <HAL_TIM_ConfigClockSource+0x166>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d067      	beq.n	800618c <HAL_TIM_ConfigClockSource+0x120>
 80060bc:	2b40      	cmp	r3, #64	; 0x40
 80060be:	d80b      	bhi.n	80060d8 <HAL_TIM_ConfigClockSource+0x6c>
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d073      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x140>
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d802      	bhi.n	80060ce <HAL_TIM_ConfigClockSource+0x62>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d06f      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060cc:	e078      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060ce:	2b20      	cmp	r3, #32
 80060d0:	d06c      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x140>
 80060d2:	2b30      	cmp	r3, #48	; 0x30
 80060d4:	d06a      	beq.n	80061ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80060d6:	e073      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060d8:	2b70      	cmp	r3, #112	; 0x70
 80060da:	d00d      	beq.n	80060f8 <HAL_TIM_ConfigClockSource+0x8c>
 80060dc:	2b70      	cmp	r3, #112	; 0x70
 80060de:	d804      	bhi.n	80060ea <HAL_TIM_ConfigClockSource+0x7e>
 80060e0:	2b50      	cmp	r3, #80	; 0x50
 80060e2:	d033      	beq.n	800614c <HAL_TIM_ConfigClockSource+0xe0>
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d041      	beq.n	800616c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060e8:	e06a      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ee:	d066      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x152>
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f4:	d017      	beq.n	8006126 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060f6:	e063      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6899      	ldr	r1, [r3, #8]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f000 fd86 	bl	8006c18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800611a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	609a      	str	r2, [r3, #8]
      break;
 8006124:	e04c      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6818      	ldr	r0, [r3, #0]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6899      	ldr	r1, [r3, #8]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f000 fd6f 	bl	8006c18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006148:	609a      	str	r2, [r3, #8]
      break;
 800614a:	e039      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6818      	ldr	r0, [r3, #0]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6859      	ldr	r1, [r3, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	461a      	mov	r2, r3
 800615a:	f000 fc2d 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2150      	movs	r1, #80	; 0x50
 8006164:	4618      	mov	r0, r3
 8006166:	f000 fd3c 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 800616a:	e029      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6859      	ldr	r1, [r3, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	461a      	mov	r2, r3
 800617a:	f000 fc89 	bl	8006a90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2160      	movs	r1, #96	; 0x60
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fd2c 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 800618a:	e019      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6859      	ldr	r1, [r3, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	461a      	mov	r2, r3
 800619a:	f000 fc0d 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2140      	movs	r1, #64	; 0x40
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fd1c 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 80061aa:	e009      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f000 fd13 	bl	8006be2 <TIM_ITRx_SetConfig>
      break;
 80061bc:	e000      	b.n	80061c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80061be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e031      	b.n	8006256 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2202      	movs	r2, #2
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006202:	6839      	ldr	r1, [r7, #0]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fadd 	bl	80067c4 <TIM_SlaveTimer_SetConfig>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e018      	b.n	8006256 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006232:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006242:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	2b0c      	cmp	r3, #12
 8006272:	d831      	bhi.n	80062d8 <HAL_TIM_ReadCapturedValue+0x78>
 8006274:	a201      	add	r2, pc, #4	; (adr r2, 800627c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627a:	bf00      	nop
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062d9 	.word	0x080062d9
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062bb 	.word	0x080062bb
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062d9 	.word	0x080062d9
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	080062cf 	.word	0x080062cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b6:	60fb      	str	r3, [r7, #12]

      break;
 80062b8:	e00f      	b.n	80062da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	60fb      	str	r3, [r7, #12]

      break;
 80062c2:	e00a      	b.n	80062da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ca:	60fb      	str	r3, [r7, #12]

      break;
 80062cc:	e005      	b.n	80062da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	60fb      	str	r3, [r7, #12]

      break;
 80062d6:	e000      	b.n	80062da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80062d8:	bf00      	nop
  }

  return tmpreg;
 80062da:	68fb      	ldr	r3, [r7, #12]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a40      	ldr	r2, [pc, #256]	; (8006438 <TIM_Base_SetConfig+0x114>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006342:	d00f      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a3d      	ldr	r2, [pc, #244]	; (800643c <TIM_Base_SetConfig+0x118>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a3c      	ldr	r2, [pc, #240]	; (8006440 <TIM_Base_SetConfig+0x11c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a3b      	ldr	r2, [pc, #236]	; (8006444 <TIM_Base_SetConfig+0x120>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a3a      	ldr	r2, [pc, #232]	; (8006448 <TIM_Base_SetConfig+0x124>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d108      	bne.n	8006376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2f      	ldr	r2, [pc, #188]	; (8006438 <TIM_Base_SetConfig+0x114>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02b      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006384:	d027      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2c      	ldr	r2, [pc, #176]	; (800643c <TIM_Base_SetConfig+0x118>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d023      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2b      	ldr	r2, [pc, #172]	; (8006440 <TIM_Base_SetConfig+0x11c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01f      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <TIM_Base_SetConfig+0x120>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01b      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a29      	ldr	r2, [pc, #164]	; (8006448 <TIM_Base_SetConfig+0x124>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d017      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a28      	ldr	r2, [pc, #160]	; (800644c <TIM_Base_SetConfig+0x128>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a27      	ldr	r2, [pc, #156]	; (8006450 <TIM_Base_SetConfig+0x12c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00f      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a26      	ldr	r2, [pc, #152]	; (8006454 <TIM_Base_SetConfig+0x130>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a25      	ldr	r2, [pc, #148]	; (8006458 <TIM_Base_SetConfig+0x134>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a24      	ldr	r2, [pc, #144]	; (800645c <TIM_Base_SetConfig+0x138>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a23      	ldr	r2, [pc, #140]	; (8006460 <TIM_Base_SetConfig+0x13c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d108      	bne.n	80063e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <TIM_Base_SetConfig+0x114>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0xf8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <TIM_Base_SetConfig+0x124>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d103      	bne.n	8006424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	615a      	str	r2, [r3, #20]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40010400 	.word	0x40010400
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800
 8006458:	40001800 	.word	0x40001800
 800645c:	40001c00 	.word	0x40001c00
 8006460:	40002000 	.word	0x40002000

08006464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0201 	bic.w	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0302 	bic.w	r3, r3, #2
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a20      	ldr	r2, [pc, #128]	; (800653c <TIM_OC1_SetConfig+0xd8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC1_SetConfig+0x64>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <TIM_OC1_SetConfig+0xdc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0308 	bic.w	r3, r3, #8
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0304 	bic.w	r3, r3, #4
 80064e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <TIM_OC1_SetConfig+0xd8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC1_SetConfig+0x8e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a14      	ldr	r2, [pc, #80]	; (8006540 <TIM_OC1_SetConfig+0xdc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d111      	bne.n	8006516 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0210 	bic.w	r2, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0320 	bic.w	r3, r3, #32
 800658e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_OC2_SetConfig+0xe4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC2_SetConfig+0x68>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10d      	bne.n	80065c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <TIM_OC2_SetConfig+0xe4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC2_SetConfig+0x94>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a16      	ldr	r2, [pc, #88]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d113      	bne.n	8006600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400

08006630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a21      	ldr	r2, [pc, #132]	; (8006710 <TIM_OC3_SetConfig+0xe0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC3_SetConfig+0x66>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <TIM_OC3_SetConfig+0xe4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d10d      	bne.n	80066b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800669c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <TIM_OC3_SetConfig+0xe0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC3_SetConfig+0x92>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <TIM_OC3_SetConfig+0xe4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d113      	bne.n	80066ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	621a      	str	r2, [r3, #32]
}
 8006704:	bf00      	nop
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400

08006718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <TIM_OC4_SetConfig+0xa4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC4_SetConfig+0x68>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <TIM_OC4_SetConfig+0xa8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d109      	bne.n	8006794 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40010400 	.word	0x40010400

080067c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f023 0307 	bic.w	r3, r3, #7
 80067ee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	2b30      	cmp	r3, #48	; 0x30
 8006808:	d05c      	beq.n	80068c4 <TIM_SlaveTimer_SetConfig+0x100>
 800680a:	2b30      	cmp	r3, #48	; 0x30
 800680c:	d806      	bhi.n	800681c <TIM_SlaveTimer_SetConfig+0x58>
 800680e:	2b10      	cmp	r3, #16
 8006810:	d058      	beq.n	80068c4 <TIM_SlaveTimer_SetConfig+0x100>
 8006812:	2b20      	cmp	r3, #32
 8006814:	d056      	beq.n	80068c4 <TIM_SlaveTimer_SetConfig+0x100>
 8006816:	2b00      	cmp	r3, #0
 8006818:	d054      	beq.n	80068c4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800681a:	e054      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800681c:	2b50      	cmp	r3, #80	; 0x50
 800681e:	d03d      	beq.n	800689c <TIM_SlaveTimer_SetConfig+0xd8>
 8006820:	2b50      	cmp	r3, #80	; 0x50
 8006822:	d802      	bhi.n	800682a <TIM_SlaveTimer_SetConfig+0x66>
 8006824:	2b40      	cmp	r3, #64	; 0x40
 8006826:	d010      	beq.n	800684a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006828:	e04d      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800682a:	2b60      	cmp	r3, #96	; 0x60
 800682c:	d040      	beq.n	80068b0 <TIM_SlaveTimer_SetConfig+0xec>
 800682e:	2b70      	cmp	r3, #112	; 0x70
 8006830:	d000      	beq.n	8006834 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006832:	e048      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	68d9      	ldr	r1, [r3, #12]
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	f000 f9e8 	bl	8006c18 <TIM_ETR_SetConfig>
      break;
 8006848:	e03d      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b05      	cmp	r3, #5
 8006850:	d101      	bne.n	8006856 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e038      	b.n	80068c8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6a1b      	ldr	r3, [r3, #32]
 800685c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6a1a      	ldr	r2, [r3, #32]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800687c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	4313      	orrs	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	621a      	str	r2, [r3, #32]
      break;
 800689a:	e014      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6899      	ldr	r1, [r3, #8]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f000 f885 	bl	80069b8 <TIM_TI1_ConfigInputStage>
      break;
 80068ae:	e00a      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6899      	ldr	r1, [r3, #8]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	461a      	mov	r2, r3
 80068be:	f000 f8e7 	bl	8006a90 <TIM_TI2_ConfigInputStage>
      break;
 80068c2:	e000      	b.n	80068c6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80068c4:	bf00      	nop
  }
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0201 	bic.w	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a28      	ldr	r2, [pc, #160]	; (800699c <TIM_TI1_SetConfig+0xcc>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01b      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006904:	d017      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <TIM_TI1_SetConfig+0xd0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <TIM_TI1_SetConfig+0xd4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00f      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <TIM_TI1_SetConfig+0xd8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	4a22      	ldr	r2, [pc, #136]	; (80069ac <TIM_TI1_SetConfig+0xdc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a21      	ldr	r2, [pc, #132]	; (80069b0 <TIM_TI1_SetConfig+0xe0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_TI1_SetConfig+0x66>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4a20      	ldr	r2, [pc, #128]	; (80069b4 <TIM_TI1_SetConfig+0xe4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d101      	bne.n	800693a <TIM_TI1_SetConfig+0x6a>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <TIM_TI1_SetConfig+0x6c>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0303 	bic.w	r3, r3, #3
 8006946:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
 8006950:	e003      	b.n	800695a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f043 0301 	orr.w	r3, r3, #1
 8006958:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	011b      	lsls	r3, r3, #4
 8006966:	b2db      	uxtb	r3, r3
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 030a 	bic.w	r3, r3, #10
 8006974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f003 030a 	and.w	r3, r3, #10
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000
 80069a0:	40000400 	.word	0x40000400
 80069a4:	40000800 	.word	0x40000800
 80069a8:	40000c00 	.word	0x40000c00
 80069ac:	40010400 	.word	0x40010400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40001800 	.word	0x40001800

080069b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	f023 0201 	bic.w	r2, r3, #1
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 030a 	bic.w	r3, r3, #10
 80069f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	621a      	str	r2, [r3, #32]
}
 8006a0a:	bf00      	nop
 8006a0c:	371c      	adds	r7, #28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b087      	sub	sp, #28
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f023 0210 	bic.w	r2, r3, #16
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	621a      	str	r2, [r3, #32]
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f023 0210 	bic.w	r2, r3, #16
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006aba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	031b      	lsls	r3, r3, #12
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006acc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	621a      	str	r2, [r3, #32]
}
 8006ae4:	bf00      	nop
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0303 	bic.w	r3, r3, #3
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	021b      	lsls	r3, r3, #8
 8006b46:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	621a      	str	r2, [r3, #32]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
 8006b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	021b      	lsls	r3, r3, #8
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ba6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	031b      	lsls	r3, r3, #12
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006bba:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	031b      	lsls	r3, r3, #12
 8006bc0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	621a      	str	r2, [r3, #32]
}
 8006bd6:	bf00      	nop
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f043 0307 	orr.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]
}
 8006c0c:	bf00      	nop
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	021a      	lsls	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	bf00      	nop
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1a      	ldr	r2, [r3, #32]
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	401a      	ands	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a1a      	ldr	r2, [r3, #32]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
	...

08006ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e05a      	b.n	8006d72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a21      	ldr	r2, [pc, #132]	; (8006d80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d022      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d01d      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1d      	ldr	r2, [pc, #116]	; (8006d84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d018      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1b      	ldr	r2, [pc, #108]	; (8006d88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1a      	ldr	r2, [pc, #104]	; (8006d8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00e      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a18      	ldr	r2, [pc, #96]	; (8006d90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d009      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a17      	ldr	r2, [pc, #92]	; (8006d94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d004      	beq.n	8006d46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d10c      	bne.n	8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	40010000 	.word	0x40010000
 8006d84:	40000400 	.word	0x40000400
 8006d88:	40000800 	.word	0x40000800
 8006d8c:	40000c00 	.word	0x40000c00
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40001800 	.word	0x40001800

08006d9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e03f      	b.n	8006e56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fa fcfc 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2224      	movs	r2, #36	; 0x24
 8006df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc37 	bl	800767c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2220      	movs	r2, #32
 8006e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
	...

08006e60 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b20      	cmp	r3, #32
 8006e78:	d153      	bne.n	8006f22 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <HAL_UART_Transmit_DMA+0x26>
 8006e80:	88fb      	ldrh	r3, [r7, #6]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e04c      	b.n	8006f24 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_UART_Transmit_DMA+0x38>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e045      	b.n	8006f24 <HAL_UART_Transmit_DMA+0xc4>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	88fa      	ldrh	r2, [r7, #6]
 8006eaa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2221      	movs	r2, #33	; 0x21
 8006ebc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	4a19      	ldr	r2, [pc, #100]	; (8006f2c <HAL_UART_Transmit_DMA+0xcc>)
 8006ec6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	4a18      	ldr	r2, [pc, #96]	; (8006f30 <HAL_UART_Transmit_DMA+0xd0>)
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	4a17      	ldr	r2, [pc, #92]	; (8006f34 <HAL_UART_Transmit_DMA+0xd4>)
 8006ed6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	2200      	movs	r2, #0
 8006ede:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006ee0:	f107 0308 	add.w	r3, r7, #8
 8006ee4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3304      	adds	r3, #4
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	88fb      	ldrh	r3, [r7, #6]
 8006ef8:	f7fb f860 	bl	8001fbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f04:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	695a      	ldr	r2, [r3, #20]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f1c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006f22:	2302      	movs	r3, #2
  }
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	08007289 	.word	0x08007289
 8006f30:	080072db 	.word	0x080072db
 8006f34:	0800737b 	.word	0x0800737b

08006f38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d166      	bne.n	8007020 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <HAL_UART_Receive_DMA+0x26>
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e05f      	b.n	8007022 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_UART_Receive_DMA+0x38>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e058      	b.n	8007022 <HAL_UART_Receive_DMA+0xea>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2222      	movs	r2, #34	; 0x22
 8006f8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f96:	4a25      	ldr	r2, [pc, #148]	; (800702c <HAL_UART_Receive_DMA+0xf4>)
 8006f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9e:	4a24      	ldr	r2, [pc, #144]	; (8007030 <HAL_UART_Receive_DMA+0xf8>)
 8006fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa6:	4a23      	ldr	r2, [pc, #140]	; (8007034 <HAL_UART_Receive_DMA+0xfc>)
 8006fa8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	2200      	movs	r2, #0
 8006fb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	88fb      	ldrh	r3, [r7, #6]
 8006fca:	f7fa fff7 	bl	8001fbc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]
 8006fe2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ffa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695a      	ldr	r2, [r3, #20]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800701a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
  }
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	080072f7 	.word	0x080072f7
 8007030:	0800735f 	.word	0x0800735f
 8007034:	0800737b 	.word	0x0800737b

08007038 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b088      	sub	sp, #32
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007058:	2300      	movs	r3, #0
 800705a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800705c:	2300      	movs	r3, #0
 800705e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 030f 	and.w	r3, r3, #15
 8007066:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <HAL_UART_IRQHandler+0x52>
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f003 0320 	and.w	r3, r3, #32
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa79 	bl	800757a <UART_Receive_IT>
      return;
 8007088:	e0d1      	b.n	800722e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80b0 	beq.w	80071f2 <HAL_UART_IRQHandler+0x1ba>
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_UART_IRQHandler+0x70>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80a5 	beq.w	80071f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <HAL_UART_IRQHandler+0x90>
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	f043 0201 	orr.w	r2, r3, #1
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <HAL_UART_IRQHandler+0xb0>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	f043 0202 	orr.w	r2, r3, #2
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <HAL_UART_IRQHandler+0xd0>
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	f043 0204 	orr.w	r2, r3, #4
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00f      	beq.n	8007132 <HAL_UART_IRQHandler+0xfa>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	f003 0320 	and.w	r3, r3, #32
 8007118:	2b00      	cmp	r3, #0
 800711a:	d104      	bne.n	8007126 <HAL_UART_IRQHandler+0xee>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d005      	beq.n	8007132 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800712a:	f043 0208 	orr.w	r2, r3, #8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	2b00      	cmp	r3, #0
 8007138:	d078      	beq.n	800722c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <HAL_UART_IRQHandler+0x11c>
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fa13 	bl	800757a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	bf0c      	ite	eq
 8007162:	2301      	moveq	r3, #1
 8007164:	2300      	movne	r3, #0
 8007166:	b2db      	uxtb	r3, r3
 8007168:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716e:	f003 0308 	and.w	r3, r3, #8
 8007172:	2b00      	cmp	r3, #0
 8007174:	d102      	bne.n	800717c <HAL_UART_IRQHandler+0x144>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d031      	beq.n	80071e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f95c 	bl	800743a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718c:	2b40      	cmp	r3, #64	; 0x40
 800718e:	d123      	bne.n	80071d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d013      	beq.n	80071d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ac:	4a21      	ldr	r2, [pc, #132]	; (8007234 <HAL_UART_IRQHandler+0x1fc>)
 80071ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fa ff59 	bl	800206c <HAL_DMA_Abort_IT>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d016      	beq.n	80071ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071ca:	4610      	mov	r0, r2
 80071cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ce:	e00e      	b.n	80071ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f84f 	bl	8007274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d6:	e00a      	b.n	80071ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f84b 	bl	8007274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071de:	e006      	b.n	80071ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f847 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80071ec:	e01e      	b.n	800722c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ee:	bf00      	nop
    return;
 80071f0:	e01c      	b.n	800722c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_UART_IRQHandler+0x1d6>
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f949 	bl	800749e <UART_Transmit_IT>
    return;
 800720c:	e00f      	b.n	800722e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00a      	beq.n	800722e <HAL_UART_IRQHandler+0x1f6>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721e:	2b00      	cmp	r3, #0
 8007220:	d005      	beq.n	800722e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f991 	bl	800754a <UART_EndTransmit_IT>
    return;
 8007228:	bf00      	nop
 800722a:	e000      	b.n	800722e <HAL_UART_IRQHandler+0x1f6>
    return;
 800722c:	bf00      	nop
  }
}
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	08007477 	.word	0x08007477

08007238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007294:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d113      	bne.n	80072cc <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072b8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072c8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072ca:	e002      	b.n	80072d2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff ffb3 	bl	8007238 <HAL_UART_TxCpltCallback>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff ffaf 	bl	800724c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ee:	bf00      	nop
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b084      	sub	sp, #16
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800730e:	2b00      	cmp	r3, #0
 8007310:	d11e      	bne.n	8007350 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007326:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	695a      	ldr	r2, [r3, #20]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007346:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7f9 fab9 	bl	80008c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b084      	sub	sp, #16
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff ff77 	bl	8007260 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007396:	2b80      	cmp	r3, #128	; 0x80
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b21      	cmp	r3, #33	; 0x21
 80073ac:	d108      	bne.n	80073c0 <UART_DMAError+0x46>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d005      	beq.n	80073c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2200      	movs	r2, #0
 80073b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80073ba:	68b8      	ldr	r0, [r7, #8]
 80073bc:	f000 f827 	bl	800740e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	bf0c      	ite	eq
 80073ce:	2301      	moveq	r3, #1
 80073d0:	2300      	movne	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b22      	cmp	r3, #34	; 0x22
 80073e0:	d108      	bne.n	80073f4 <UART_DMAError+0x7a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d005      	beq.n	80073f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2200      	movs	r2, #0
 80073ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80073ee:	68b8      	ldr	r0, [r7, #8]
 80073f0:	f000 f823 	bl	800743a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	f043 0210 	orr.w	r2, r3, #16
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007400:	68b8      	ldr	r0, [r7, #8]
 8007402:	f7ff ff37 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007424:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2220      	movs	r2, #32
 800742a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007450:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	695a      	ldr	r2, [r3, #20]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0201 	bic.w	r2, r2, #1
 8007460:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800746a:	bf00      	nop
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007482:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f7ff feef 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b21      	cmp	r3, #33	; 0x21
 80074b0:	d144      	bne.n	800753c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ba:	d11a      	bne.n	80074f2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	461a      	mov	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074d0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d105      	bne.n	80074e6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	1c9a      	adds	r2, r3, #2
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	621a      	str	r2, [r3, #32]
 80074e4:	e00e      	b.n	8007504 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	621a      	str	r2, [r3, #32]
 80074f0:	e008      	b.n	8007504 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	1c59      	adds	r1, r3, #1
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6211      	str	r1, [r2, #32]
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007508:	b29b      	uxth	r3, r3
 800750a:	3b01      	subs	r3, #1
 800750c:	b29b      	uxth	r3, r3
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	4619      	mov	r1, r3
 8007512:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10f      	bne.n	8007538 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007526:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68da      	ldr	r2, [r3, #12]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007536:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	e000      	b.n	800753e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800753c:	2302      	movs	r3, #2
  }
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b082      	sub	sp, #8
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007560:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fe64 	bl	8007238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b22      	cmp	r3, #34	; 0x22
 800758c:	d171      	bne.n	8007672 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007596:	d123      	bne.n	80075e0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10e      	bne.n	80075c4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	1c9a      	adds	r2, r3, #2
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	629a      	str	r2, [r3, #40]	; 0x28
 80075c2:	e029      	b.n	8007618 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	629a      	str	r2, [r3, #40]	; 0x28
 80075de:	e01b      	b.n	8007618 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6858      	ldr	r0, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	1c59      	adds	r1, r3, #1
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6291      	str	r1, [r2, #40]	; 0x28
 80075f8:	b2c2      	uxtb	r2, r0
 80075fa:	701a      	strb	r2, [r3, #0]
 80075fc:	e00c      	b.n	8007618 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	b2da      	uxtb	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760a:	1c58      	adds	r0, r3, #1
 800760c:	6879      	ldr	r1, [r7, #4]
 800760e:	6288      	str	r0, [r1, #40]	; 0x28
 8007610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4619      	mov	r1, r3
 8007626:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007628:	2b00      	cmp	r3, #0
 800762a:	d120      	bne.n	800766e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0220 	bic.w	r2, r2, #32
 800763a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68da      	ldr	r2, [r3, #12]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800764a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	695a      	ldr	r2, [r3, #20]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0201 	bic.w	r2, r2, #1
 800765a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2220      	movs	r2, #32
 8007660:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7f9 f92f 	bl	80008c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	e002      	b.n	8007674 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	e000      	b.n	8007674 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
  }
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007680:	b085      	sub	sp, #20
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	69db      	ldr	r3, [r3, #28]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80076be:	f023 030c 	bic.w	r3, r3, #12
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6812      	ldr	r2, [r2, #0]
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	430b      	orrs	r3, r1
 80076ca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ea:	f040 818b 	bne.w	8007a04 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4ac1      	ldr	r2, [pc, #772]	; (80079f8 <UART_SetConfig+0x37c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d005      	beq.n	8007704 <UART_SetConfig+0x88>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4abf      	ldr	r2, [pc, #764]	; (80079fc <UART_SetConfig+0x380>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	f040 80bd 	bne.w	800787e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007704:	f7fe f87c 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8007708:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	461d      	mov	r5, r3
 800770e:	f04f 0600 	mov.w	r6, #0
 8007712:	46a8      	mov	r8, r5
 8007714:	46b1      	mov	r9, r6
 8007716:	eb18 0308 	adds.w	r3, r8, r8
 800771a:	eb49 0409 	adc.w	r4, r9, r9
 800771e:	4698      	mov	r8, r3
 8007720:	46a1      	mov	r9, r4
 8007722:	eb18 0805 	adds.w	r8, r8, r5
 8007726:	eb49 0906 	adc.w	r9, r9, r6
 800772a:	f04f 0100 	mov.w	r1, #0
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007736:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800773a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800773e:	4688      	mov	r8, r1
 8007740:	4691      	mov	r9, r2
 8007742:	eb18 0005 	adds.w	r0, r8, r5
 8007746:	eb49 0106 	adc.w	r1, r9, r6
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	461d      	mov	r5, r3
 8007750:	f04f 0600 	mov.w	r6, #0
 8007754:	196b      	adds	r3, r5, r5
 8007756:	eb46 0406 	adc.w	r4, r6, r6
 800775a:	461a      	mov	r2, r3
 800775c:	4623      	mov	r3, r4
 800775e:	f7f8 fd87 	bl	8000270 <__aeabi_uldivmod>
 8007762:	4603      	mov	r3, r0
 8007764:	460c      	mov	r4, r1
 8007766:	461a      	mov	r2, r3
 8007768:	4ba5      	ldr	r3, [pc, #660]	; (8007a00 <UART_SetConfig+0x384>)
 800776a:	fba3 2302 	umull	r2, r3, r3, r2
 800776e:	095b      	lsrs	r3, r3, #5
 8007770:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	461d      	mov	r5, r3
 8007778:	f04f 0600 	mov.w	r6, #0
 800777c:	46a9      	mov	r9, r5
 800777e:	46b2      	mov	sl, r6
 8007780:	eb19 0309 	adds.w	r3, r9, r9
 8007784:	eb4a 040a 	adc.w	r4, sl, sl
 8007788:	4699      	mov	r9, r3
 800778a:	46a2      	mov	sl, r4
 800778c:	eb19 0905 	adds.w	r9, r9, r5
 8007790:	eb4a 0a06 	adc.w	sl, sl, r6
 8007794:	f04f 0100 	mov.w	r1, #0
 8007798:	f04f 0200 	mov.w	r2, #0
 800779c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077a8:	4689      	mov	r9, r1
 80077aa:	4692      	mov	sl, r2
 80077ac:	eb19 0005 	adds.w	r0, r9, r5
 80077b0:	eb4a 0106 	adc.w	r1, sl, r6
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	461d      	mov	r5, r3
 80077ba:	f04f 0600 	mov.w	r6, #0
 80077be:	196b      	adds	r3, r5, r5
 80077c0:	eb46 0406 	adc.w	r4, r6, r6
 80077c4:	461a      	mov	r2, r3
 80077c6:	4623      	mov	r3, r4
 80077c8:	f7f8 fd52 	bl	8000270 <__aeabi_uldivmod>
 80077cc:	4603      	mov	r3, r0
 80077ce:	460c      	mov	r4, r1
 80077d0:	461a      	mov	r2, r3
 80077d2:	4b8b      	ldr	r3, [pc, #556]	; (8007a00 <UART_SetConfig+0x384>)
 80077d4:	fba3 1302 	umull	r1, r3, r3, r2
 80077d8:	095b      	lsrs	r3, r3, #5
 80077da:	2164      	movs	r1, #100	; 0x64
 80077dc:	fb01 f303 	mul.w	r3, r1, r3
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	3332      	adds	r3, #50	; 0x32
 80077e6:	4a86      	ldr	r2, [pc, #536]	; (8007a00 <UART_SetConfig+0x384>)
 80077e8:	fba2 2303 	umull	r2, r3, r2, r3
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077f4:	4498      	add	r8, r3
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	461d      	mov	r5, r3
 80077fa:	f04f 0600 	mov.w	r6, #0
 80077fe:	46a9      	mov	r9, r5
 8007800:	46b2      	mov	sl, r6
 8007802:	eb19 0309 	adds.w	r3, r9, r9
 8007806:	eb4a 040a 	adc.w	r4, sl, sl
 800780a:	4699      	mov	r9, r3
 800780c:	46a2      	mov	sl, r4
 800780e:	eb19 0905 	adds.w	r9, r9, r5
 8007812:	eb4a 0a06 	adc.w	sl, sl, r6
 8007816:	f04f 0100 	mov.w	r1, #0
 800781a:	f04f 0200 	mov.w	r2, #0
 800781e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007822:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007826:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800782a:	4689      	mov	r9, r1
 800782c:	4692      	mov	sl, r2
 800782e:	eb19 0005 	adds.w	r0, r9, r5
 8007832:	eb4a 0106 	adc.w	r1, sl, r6
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	461d      	mov	r5, r3
 800783c:	f04f 0600 	mov.w	r6, #0
 8007840:	196b      	adds	r3, r5, r5
 8007842:	eb46 0406 	adc.w	r4, r6, r6
 8007846:	461a      	mov	r2, r3
 8007848:	4623      	mov	r3, r4
 800784a:	f7f8 fd11 	bl	8000270 <__aeabi_uldivmod>
 800784e:	4603      	mov	r3, r0
 8007850:	460c      	mov	r4, r1
 8007852:	461a      	mov	r2, r3
 8007854:	4b6a      	ldr	r3, [pc, #424]	; (8007a00 <UART_SetConfig+0x384>)
 8007856:	fba3 1302 	umull	r1, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2164      	movs	r1, #100	; 0x64
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	3332      	adds	r3, #50	; 0x32
 8007868:	4a65      	ldr	r2, [pc, #404]	; (8007a00 <UART_SetConfig+0x384>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f003 0207 	and.w	r2, r3, #7
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4442      	add	r2, r8
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	e26f      	b.n	8007d5e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800787e:	f7fd ffab 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8007882:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	461d      	mov	r5, r3
 8007888:	f04f 0600 	mov.w	r6, #0
 800788c:	46a8      	mov	r8, r5
 800788e:	46b1      	mov	r9, r6
 8007890:	eb18 0308 	adds.w	r3, r8, r8
 8007894:	eb49 0409 	adc.w	r4, r9, r9
 8007898:	4698      	mov	r8, r3
 800789a:	46a1      	mov	r9, r4
 800789c:	eb18 0805 	adds.w	r8, r8, r5
 80078a0:	eb49 0906 	adc.w	r9, r9, r6
 80078a4:	f04f 0100 	mov.w	r1, #0
 80078a8:	f04f 0200 	mov.w	r2, #0
 80078ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80078b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80078b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80078b8:	4688      	mov	r8, r1
 80078ba:	4691      	mov	r9, r2
 80078bc:	eb18 0005 	adds.w	r0, r8, r5
 80078c0:	eb49 0106 	adc.w	r1, r9, r6
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	461d      	mov	r5, r3
 80078ca:	f04f 0600 	mov.w	r6, #0
 80078ce:	196b      	adds	r3, r5, r5
 80078d0:	eb46 0406 	adc.w	r4, r6, r6
 80078d4:	461a      	mov	r2, r3
 80078d6:	4623      	mov	r3, r4
 80078d8:	f7f8 fcca 	bl	8000270 <__aeabi_uldivmod>
 80078dc:	4603      	mov	r3, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	461a      	mov	r2, r3
 80078e2:	4b47      	ldr	r3, [pc, #284]	; (8007a00 <UART_SetConfig+0x384>)
 80078e4:	fba3 2302 	umull	r2, r3, r3, r2
 80078e8:	095b      	lsrs	r3, r3, #5
 80078ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	461d      	mov	r5, r3
 80078f2:	f04f 0600 	mov.w	r6, #0
 80078f6:	46a9      	mov	r9, r5
 80078f8:	46b2      	mov	sl, r6
 80078fa:	eb19 0309 	adds.w	r3, r9, r9
 80078fe:	eb4a 040a 	adc.w	r4, sl, sl
 8007902:	4699      	mov	r9, r3
 8007904:	46a2      	mov	sl, r4
 8007906:	eb19 0905 	adds.w	r9, r9, r5
 800790a:	eb4a 0a06 	adc.w	sl, sl, r6
 800790e:	f04f 0100 	mov.w	r1, #0
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800791a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800791e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007922:	4689      	mov	r9, r1
 8007924:	4692      	mov	sl, r2
 8007926:	eb19 0005 	adds.w	r0, r9, r5
 800792a:	eb4a 0106 	adc.w	r1, sl, r6
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	461d      	mov	r5, r3
 8007934:	f04f 0600 	mov.w	r6, #0
 8007938:	196b      	adds	r3, r5, r5
 800793a:	eb46 0406 	adc.w	r4, r6, r6
 800793e:	461a      	mov	r2, r3
 8007940:	4623      	mov	r3, r4
 8007942:	f7f8 fc95 	bl	8000270 <__aeabi_uldivmod>
 8007946:	4603      	mov	r3, r0
 8007948:	460c      	mov	r4, r1
 800794a:	461a      	mov	r2, r3
 800794c:	4b2c      	ldr	r3, [pc, #176]	; (8007a00 <UART_SetConfig+0x384>)
 800794e:	fba3 1302 	umull	r1, r3, r3, r2
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	2164      	movs	r1, #100	; 0x64
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	3332      	adds	r3, #50	; 0x32
 8007960:	4a27      	ldr	r2, [pc, #156]	; (8007a00 <UART_SetConfig+0x384>)
 8007962:	fba2 2303 	umull	r2, r3, r2, r3
 8007966:	095b      	lsrs	r3, r3, #5
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800796e:	4498      	add	r8, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	461d      	mov	r5, r3
 8007974:	f04f 0600 	mov.w	r6, #0
 8007978:	46a9      	mov	r9, r5
 800797a:	46b2      	mov	sl, r6
 800797c:	eb19 0309 	adds.w	r3, r9, r9
 8007980:	eb4a 040a 	adc.w	r4, sl, sl
 8007984:	4699      	mov	r9, r3
 8007986:	46a2      	mov	sl, r4
 8007988:	eb19 0905 	adds.w	r9, r9, r5
 800798c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007990:	f04f 0100 	mov.w	r1, #0
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800799c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80079a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80079a4:	4689      	mov	r9, r1
 80079a6:	4692      	mov	sl, r2
 80079a8:	eb19 0005 	adds.w	r0, r9, r5
 80079ac:	eb4a 0106 	adc.w	r1, sl, r6
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	461d      	mov	r5, r3
 80079b6:	f04f 0600 	mov.w	r6, #0
 80079ba:	196b      	adds	r3, r5, r5
 80079bc:	eb46 0406 	adc.w	r4, r6, r6
 80079c0:	461a      	mov	r2, r3
 80079c2:	4623      	mov	r3, r4
 80079c4:	f7f8 fc54 	bl	8000270 <__aeabi_uldivmod>
 80079c8:	4603      	mov	r3, r0
 80079ca:	460c      	mov	r4, r1
 80079cc:	461a      	mov	r2, r3
 80079ce:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <UART_SetConfig+0x384>)
 80079d0:	fba3 1302 	umull	r1, r3, r3, r2
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	2164      	movs	r1, #100	; 0x64
 80079d8:	fb01 f303 	mul.w	r3, r1, r3
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	3332      	adds	r3, #50	; 0x32
 80079e2:	4a07      	ldr	r2, [pc, #28]	; (8007a00 <UART_SetConfig+0x384>)
 80079e4:	fba2 2303 	umull	r2, r3, r2, r3
 80079e8:	095b      	lsrs	r3, r3, #5
 80079ea:	f003 0207 	and.w	r2, r3, #7
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4442      	add	r2, r8
 80079f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80079f6:	e1b2      	b.n	8007d5e <UART_SetConfig+0x6e2>
 80079f8:	40011000 	.word	0x40011000
 80079fc:	40011400 	.word	0x40011400
 8007a00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4ad7      	ldr	r2, [pc, #860]	; (8007d68 <UART_SetConfig+0x6ec>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d005      	beq.n	8007a1a <UART_SetConfig+0x39e>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4ad6      	ldr	r2, [pc, #856]	; (8007d6c <UART_SetConfig+0x6f0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	f040 80d1 	bne.w	8007bbc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a1a:	f7fd fef1 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8007a1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	469a      	mov	sl, r3
 8007a24:	f04f 0b00 	mov.w	fp, #0
 8007a28:	46d0      	mov	r8, sl
 8007a2a:	46d9      	mov	r9, fp
 8007a2c:	eb18 0308 	adds.w	r3, r8, r8
 8007a30:	eb49 0409 	adc.w	r4, r9, r9
 8007a34:	4698      	mov	r8, r3
 8007a36:	46a1      	mov	r9, r4
 8007a38:	eb18 080a 	adds.w	r8, r8, sl
 8007a3c:	eb49 090b 	adc.w	r9, r9, fp
 8007a40:	f04f 0100 	mov.w	r1, #0
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a54:	4688      	mov	r8, r1
 8007a56:	4691      	mov	r9, r2
 8007a58:	eb1a 0508 	adds.w	r5, sl, r8
 8007a5c:	eb4b 0609 	adc.w	r6, fp, r9
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4619      	mov	r1, r3
 8007a66:	f04f 0200 	mov.w	r2, #0
 8007a6a:	f04f 0300 	mov.w	r3, #0
 8007a6e:	f04f 0400 	mov.w	r4, #0
 8007a72:	0094      	lsls	r4, r2, #2
 8007a74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a78:	008b      	lsls	r3, r1, #2
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	4623      	mov	r3, r4
 8007a7e:	4628      	mov	r0, r5
 8007a80:	4631      	mov	r1, r6
 8007a82:	f7f8 fbf5 	bl	8000270 <__aeabi_uldivmod>
 8007a86:	4603      	mov	r3, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	4bb8      	ldr	r3, [pc, #736]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a92:	095b      	lsrs	r3, r3, #5
 8007a94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	469b      	mov	fp, r3
 8007a9c:	f04f 0c00 	mov.w	ip, #0
 8007aa0:	46d9      	mov	r9, fp
 8007aa2:	46e2      	mov	sl, ip
 8007aa4:	eb19 0309 	adds.w	r3, r9, r9
 8007aa8:	eb4a 040a 	adc.w	r4, sl, sl
 8007aac:	4699      	mov	r9, r3
 8007aae:	46a2      	mov	sl, r4
 8007ab0:	eb19 090b 	adds.w	r9, r9, fp
 8007ab4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ac4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ac8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007acc:	4689      	mov	r9, r1
 8007ace:	4692      	mov	sl, r2
 8007ad0:	eb1b 0509 	adds.w	r5, fp, r9
 8007ad4:	eb4c 060a 	adc.w	r6, ip, sl
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	4619      	mov	r1, r3
 8007ade:	f04f 0200 	mov.w	r2, #0
 8007ae2:	f04f 0300 	mov.w	r3, #0
 8007ae6:	f04f 0400 	mov.w	r4, #0
 8007aea:	0094      	lsls	r4, r2, #2
 8007aec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007af0:	008b      	lsls	r3, r1, #2
 8007af2:	461a      	mov	r2, r3
 8007af4:	4623      	mov	r3, r4
 8007af6:	4628      	mov	r0, r5
 8007af8:	4631      	mov	r1, r6
 8007afa:	f7f8 fbb9 	bl	8000270 <__aeabi_uldivmod>
 8007afe:	4603      	mov	r3, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	461a      	mov	r2, r3
 8007b04:	4b9a      	ldr	r3, [pc, #616]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007b06:	fba3 1302 	umull	r1, r3, r3, r2
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	2164      	movs	r1, #100	; 0x64
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	3332      	adds	r3, #50	; 0x32
 8007b18:	4a95      	ldr	r2, [pc, #596]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b24:	4498      	add	r8, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	469b      	mov	fp, r3
 8007b2a:	f04f 0c00 	mov.w	ip, #0
 8007b2e:	46d9      	mov	r9, fp
 8007b30:	46e2      	mov	sl, ip
 8007b32:	eb19 0309 	adds.w	r3, r9, r9
 8007b36:	eb4a 040a 	adc.w	r4, sl, sl
 8007b3a:	4699      	mov	r9, r3
 8007b3c:	46a2      	mov	sl, r4
 8007b3e:	eb19 090b 	adds.w	r9, r9, fp
 8007b42:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b46:	f04f 0100 	mov.w	r1, #0
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b5a:	4689      	mov	r9, r1
 8007b5c:	4692      	mov	sl, r2
 8007b5e:	eb1b 0509 	adds.w	r5, fp, r9
 8007b62:	eb4c 060a 	adc.w	r6, ip, sl
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	f04f 0200 	mov.w	r2, #0
 8007b70:	f04f 0300 	mov.w	r3, #0
 8007b74:	f04f 0400 	mov.w	r4, #0
 8007b78:	0094      	lsls	r4, r2, #2
 8007b7a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b7e:	008b      	lsls	r3, r1, #2
 8007b80:	461a      	mov	r2, r3
 8007b82:	4623      	mov	r3, r4
 8007b84:	4628      	mov	r0, r5
 8007b86:	4631      	mov	r1, r6
 8007b88:	f7f8 fb72 	bl	8000270 <__aeabi_uldivmod>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	461a      	mov	r2, r3
 8007b92:	4b77      	ldr	r3, [pc, #476]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007b94:	fba3 1302 	umull	r1, r3, r3, r2
 8007b98:	095b      	lsrs	r3, r3, #5
 8007b9a:	2164      	movs	r1, #100	; 0x64
 8007b9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	3332      	adds	r3, #50	; 0x32
 8007ba6:	4a72      	ldr	r2, [pc, #456]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bac:	095b      	lsrs	r3, r3, #5
 8007bae:	f003 020f 	and.w	r2, r3, #15
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4442      	add	r2, r8
 8007bb8:	609a      	str	r2, [r3, #8]
 8007bba:	e0d0      	b.n	8007d5e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd fe0c 	bl	80057d8 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	469a      	mov	sl, r3
 8007bc6:	f04f 0b00 	mov.w	fp, #0
 8007bca:	46d0      	mov	r8, sl
 8007bcc:	46d9      	mov	r9, fp
 8007bce:	eb18 0308 	adds.w	r3, r8, r8
 8007bd2:	eb49 0409 	adc.w	r4, r9, r9
 8007bd6:	4698      	mov	r8, r3
 8007bd8:	46a1      	mov	r9, r4
 8007bda:	eb18 080a 	adds.w	r8, r8, sl
 8007bde:	eb49 090b 	adc.w	r9, r9, fp
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bf2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bf6:	4688      	mov	r8, r1
 8007bf8:	4691      	mov	r9, r2
 8007bfa:	eb1a 0508 	adds.w	r5, sl, r8
 8007bfe:	eb4b 0609 	adc.w	r6, fp, r9
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	4619      	mov	r1, r3
 8007c08:	f04f 0200 	mov.w	r2, #0
 8007c0c:	f04f 0300 	mov.w	r3, #0
 8007c10:	f04f 0400 	mov.w	r4, #0
 8007c14:	0094      	lsls	r4, r2, #2
 8007c16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c1a:	008b      	lsls	r3, r1, #2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4623      	mov	r3, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	4631      	mov	r1, r6
 8007c24:	f7f8 fb24 	bl	8000270 <__aeabi_uldivmod>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	4b50      	ldr	r3, [pc, #320]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007c30:	fba3 2302 	umull	r2, r3, r3, r2
 8007c34:	095b      	lsrs	r3, r3, #5
 8007c36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	469b      	mov	fp, r3
 8007c3e:	f04f 0c00 	mov.w	ip, #0
 8007c42:	46d9      	mov	r9, fp
 8007c44:	46e2      	mov	sl, ip
 8007c46:	eb19 0309 	adds.w	r3, r9, r9
 8007c4a:	eb4a 040a 	adc.w	r4, sl, sl
 8007c4e:	4699      	mov	r9, r3
 8007c50:	46a2      	mov	sl, r4
 8007c52:	eb19 090b 	adds.w	r9, r9, fp
 8007c56:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c6e:	4689      	mov	r9, r1
 8007c70:	4692      	mov	sl, r2
 8007c72:	eb1b 0509 	adds.w	r5, fp, r9
 8007c76:	eb4c 060a 	adc.w	r6, ip, sl
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	f04f 0200 	mov.w	r2, #0
 8007c84:	f04f 0300 	mov.w	r3, #0
 8007c88:	f04f 0400 	mov.w	r4, #0
 8007c8c:	0094      	lsls	r4, r2, #2
 8007c8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c92:	008b      	lsls	r3, r1, #2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4623      	mov	r3, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	4631      	mov	r1, r6
 8007c9c:	f7f8 fae8 	bl	8000270 <__aeabi_uldivmod>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	4b32      	ldr	r3, [pc, #200]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	2164      	movs	r1, #100	; 0x64
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	3332      	adds	r3, #50	; 0x32
 8007cba:	4a2d      	ldr	r2, [pc, #180]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007cc6:	4498      	add	r8, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	469b      	mov	fp, r3
 8007ccc:	f04f 0c00 	mov.w	ip, #0
 8007cd0:	46d9      	mov	r9, fp
 8007cd2:	46e2      	mov	sl, ip
 8007cd4:	eb19 0309 	adds.w	r3, r9, r9
 8007cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8007cdc:	4699      	mov	r9, r3
 8007cde:	46a2      	mov	sl, r4
 8007ce0:	eb19 090b 	adds.w	r9, r9, fp
 8007ce4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cfc:	4689      	mov	r9, r1
 8007cfe:	4692      	mov	sl, r2
 8007d00:	eb1b 0509 	adds.w	r5, fp, r9
 8007d04:	eb4c 060a 	adc.w	r6, ip, sl
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f04f 0200 	mov.w	r2, #0
 8007d12:	f04f 0300 	mov.w	r3, #0
 8007d16:	f04f 0400 	mov.w	r4, #0
 8007d1a:	0094      	lsls	r4, r2, #2
 8007d1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d20:	008b      	lsls	r3, r1, #2
 8007d22:	461a      	mov	r2, r3
 8007d24:	4623      	mov	r3, r4
 8007d26:	4628      	mov	r0, r5
 8007d28:	4631      	mov	r1, r6
 8007d2a:	f7f8 faa1 	bl	8000270 <__aeabi_uldivmod>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	460c      	mov	r4, r1
 8007d32:	461a      	mov	r2, r3
 8007d34:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007d36:	fba3 1302 	umull	r1, r3, r3, r2
 8007d3a:	095b      	lsrs	r3, r3, #5
 8007d3c:	2164      	movs	r1, #100	; 0x64
 8007d3e:	fb01 f303 	mul.w	r3, r1, r3
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	011b      	lsls	r3, r3, #4
 8007d46:	3332      	adds	r3, #50	; 0x32
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <UART_SetConfig+0x6f4>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	f003 020f 	and.w	r2, r3, #15
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4442      	add	r2, r8
 8007d5a:	609a      	str	r2, [r3, #8]
}
 8007d5c:	e7ff      	b.n	8007d5e <UART_SetConfig+0x6e2>
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	40011000 	.word	0x40011000
 8007d6c:	40011400 	.word	0x40011400
 8007d70:	51eb851f 	.word	0x51eb851f

08007d74 <__errno>:
 8007d74:	4b01      	ldr	r3, [pc, #4]	; (8007d7c <__errno+0x8>)
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000010 	.word	0x20000010

08007d80 <__libc_init_array>:
 8007d80:	b570      	push	{r4, r5, r6, lr}
 8007d82:	4e0d      	ldr	r6, [pc, #52]	; (8007db8 <__libc_init_array+0x38>)
 8007d84:	4c0d      	ldr	r4, [pc, #52]	; (8007dbc <__libc_init_array+0x3c>)
 8007d86:	1ba4      	subs	r4, r4, r6
 8007d88:	10a4      	asrs	r4, r4, #2
 8007d8a:	2500      	movs	r5, #0
 8007d8c:	42a5      	cmp	r5, r4
 8007d8e:	d109      	bne.n	8007da4 <__libc_init_array+0x24>
 8007d90:	4e0b      	ldr	r6, [pc, #44]	; (8007dc0 <__libc_init_array+0x40>)
 8007d92:	4c0c      	ldr	r4, [pc, #48]	; (8007dc4 <__libc_init_array+0x44>)
 8007d94:	f000 fc26 	bl	80085e4 <_init>
 8007d98:	1ba4      	subs	r4, r4, r6
 8007d9a:	10a4      	asrs	r4, r4, #2
 8007d9c:	2500      	movs	r5, #0
 8007d9e:	42a5      	cmp	r5, r4
 8007da0:	d105      	bne.n	8007dae <__libc_init_array+0x2e>
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007da8:	4798      	blx	r3
 8007daa:	3501      	adds	r5, #1
 8007dac:	e7ee      	b.n	8007d8c <__libc_init_array+0xc>
 8007dae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007db2:	4798      	blx	r3
 8007db4:	3501      	adds	r5, #1
 8007db6:	e7f2      	b.n	8007d9e <__libc_init_array+0x1e>
 8007db8:	080086ec 	.word	0x080086ec
 8007dbc:	080086ec 	.word	0x080086ec
 8007dc0:	080086ec 	.word	0x080086ec
 8007dc4:	080086f0 	.word	0x080086f0

08007dc8 <memset>:
 8007dc8:	4402      	add	r2, r0
 8007dca:	4603      	mov	r3, r0
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d100      	bne.n	8007dd2 <memset+0xa>
 8007dd0:	4770      	bx	lr
 8007dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dd6:	e7f9      	b.n	8007dcc <memset+0x4>

08007dd8 <siprintf>:
 8007dd8:	b40e      	push	{r1, r2, r3}
 8007dda:	b500      	push	{lr}
 8007ddc:	b09c      	sub	sp, #112	; 0x70
 8007dde:	ab1d      	add	r3, sp, #116	; 0x74
 8007de0:	9002      	str	r0, [sp, #8]
 8007de2:	9006      	str	r0, [sp, #24]
 8007de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007de8:	4809      	ldr	r0, [pc, #36]	; (8007e10 <siprintf+0x38>)
 8007dea:	9107      	str	r1, [sp, #28]
 8007dec:	9104      	str	r1, [sp, #16]
 8007dee:	4909      	ldr	r1, [pc, #36]	; (8007e14 <siprintf+0x3c>)
 8007df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007df4:	9105      	str	r1, [sp, #20]
 8007df6:	6800      	ldr	r0, [r0, #0]
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	a902      	add	r1, sp, #8
 8007dfc:	f000 f866 	bl	8007ecc <_svfiprintf_r>
 8007e00:	9b02      	ldr	r3, [sp, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	b01c      	add	sp, #112	; 0x70
 8007e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e0c:	b003      	add	sp, #12
 8007e0e:	4770      	bx	lr
 8007e10:	20000010 	.word	0x20000010
 8007e14:	ffff0208 	.word	0xffff0208

08007e18 <__ssputs_r>:
 8007e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e1c:	688e      	ldr	r6, [r1, #8]
 8007e1e:	429e      	cmp	r6, r3
 8007e20:	4682      	mov	sl, r0
 8007e22:	460c      	mov	r4, r1
 8007e24:	4690      	mov	r8, r2
 8007e26:	4699      	mov	r9, r3
 8007e28:	d837      	bhi.n	8007e9a <__ssputs_r+0x82>
 8007e2a:	898a      	ldrh	r2, [r1, #12]
 8007e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e30:	d031      	beq.n	8007e96 <__ssputs_r+0x7e>
 8007e32:	6825      	ldr	r5, [r4, #0]
 8007e34:	6909      	ldr	r1, [r1, #16]
 8007e36:	1a6f      	subs	r7, r5, r1
 8007e38:	6965      	ldr	r5, [r4, #20]
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e40:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e44:	f109 0301 	add.w	r3, r9, #1
 8007e48:	443b      	add	r3, r7
 8007e4a:	429d      	cmp	r5, r3
 8007e4c:	bf38      	it	cc
 8007e4e:	461d      	movcc	r5, r3
 8007e50:	0553      	lsls	r3, r2, #21
 8007e52:	d530      	bpl.n	8007eb6 <__ssputs_r+0x9e>
 8007e54:	4629      	mov	r1, r5
 8007e56:	f000 fb2b 	bl	80084b0 <_malloc_r>
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	b950      	cbnz	r0, 8007e74 <__ssputs_r+0x5c>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	f8ca 3000 	str.w	r3, [sl]
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6a:	81a3      	strh	r3, [r4, #12]
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	463a      	mov	r2, r7
 8007e76:	6921      	ldr	r1, [r4, #16]
 8007e78:	f000 faa8 	bl	80083cc <memcpy>
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e86:	81a3      	strh	r3, [r4, #12]
 8007e88:	6126      	str	r6, [r4, #16]
 8007e8a:	6165      	str	r5, [r4, #20]
 8007e8c:	443e      	add	r6, r7
 8007e8e:	1bed      	subs	r5, r5, r7
 8007e90:	6026      	str	r6, [r4, #0]
 8007e92:	60a5      	str	r5, [r4, #8]
 8007e94:	464e      	mov	r6, r9
 8007e96:	454e      	cmp	r6, r9
 8007e98:	d900      	bls.n	8007e9c <__ssputs_r+0x84>
 8007e9a:	464e      	mov	r6, r9
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	4641      	mov	r1, r8
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	f000 fa9e 	bl	80083e2 <memmove>
 8007ea6:	68a3      	ldr	r3, [r4, #8]
 8007ea8:	1b9b      	subs	r3, r3, r6
 8007eaa:	60a3      	str	r3, [r4, #8]
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	441e      	add	r6, r3
 8007eb0:	6026      	str	r6, [r4, #0]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	e7dc      	b.n	8007e70 <__ssputs_r+0x58>
 8007eb6:	462a      	mov	r2, r5
 8007eb8:	f000 fb54 	bl	8008564 <_realloc_r>
 8007ebc:	4606      	mov	r6, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d1e2      	bne.n	8007e88 <__ssputs_r+0x70>
 8007ec2:	6921      	ldr	r1, [r4, #16]
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	f000 faa5 	bl	8008414 <_free_r>
 8007eca:	e7c8      	b.n	8007e5e <__ssputs_r+0x46>

08007ecc <_svfiprintf_r>:
 8007ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed0:	461d      	mov	r5, r3
 8007ed2:	898b      	ldrh	r3, [r1, #12]
 8007ed4:	061f      	lsls	r7, r3, #24
 8007ed6:	b09d      	sub	sp, #116	; 0x74
 8007ed8:	4680      	mov	r8, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	4616      	mov	r6, r2
 8007ede:	d50f      	bpl.n	8007f00 <_svfiprintf_r+0x34>
 8007ee0:	690b      	ldr	r3, [r1, #16]
 8007ee2:	b96b      	cbnz	r3, 8007f00 <_svfiprintf_r+0x34>
 8007ee4:	2140      	movs	r1, #64	; 0x40
 8007ee6:	f000 fae3 	bl	80084b0 <_malloc_r>
 8007eea:	6020      	str	r0, [r4, #0]
 8007eec:	6120      	str	r0, [r4, #16]
 8007eee:	b928      	cbnz	r0, 8007efc <_svfiprintf_r+0x30>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	f8c8 3000 	str.w	r3, [r8]
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007efa:	e0c8      	b.n	800808e <_svfiprintf_r+0x1c2>
 8007efc:	2340      	movs	r3, #64	; 0x40
 8007efe:	6163      	str	r3, [r4, #20]
 8007f00:	2300      	movs	r3, #0
 8007f02:	9309      	str	r3, [sp, #36]	; 0x24
 8007f04:	2320      	movs	r3, #32
 8007f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f0a:	2330      	movs	r3, #48	; 0x30
 8007f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f10:	9503      	str	r5, [sp, #12]
 8007f12:	f04f 0b01 	mov.w	fp, #1
 8007f16:	4637      	mov	r7, r6
 8007f18:	463d      	mov	r5, r7
 8007f1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f1e:	b10b      	cbz	r3, 8007f24 <_svfiprintf_r+0x58>
 8007f20:	2b25      	cmp	r3, #37	; 0x25
 8007f22:	d13e      	bne.n	8007fa2 <_svfiprintf_r+0xd6>
 8007f24:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f28:	d00b      	beq.n	8007f42 <_svfiprintf_r+0x76>
 8007f2a:	4653      	mov	r3, sl
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4640      	mov	r0, r8
 8007f32:	f7ff ff71 	bl	8007e18 <__ssputs_r>
 8007f36:	3001      	adds	r0, #1
 8007f38:	f000 80a4 	beq.w	8008084 <_svfiprintf_r+0x1b8>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f3e:	4453      	add	r3, sl
 8007f40:	9309      	str	r3, [sp, #36]	; 0x24
 8007f42:	783b      	ldrb	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 809d 	beq.w	8008084 <_svfiprintf_r+0x1b8>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f54:	9304      	str	r3, [sp, #16]
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f5e:	462f      	mov	r7, r5
 8007f60:	2205      	movs	r2, #5
 8007f62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f66:	4850      	ldr	r0, [pc, #320]	; (80080a8 <_svfiprintf_r+0x1dc>)
 8007f68:	f7f8 f932 	bl	80001d0 <memchr>
 8007f6c:	9b04      	ldr	r3, [sp, #16]
 8007f6e:	b9d0      	cbnz	r0, 8007fa6 <_svfiprintf_r+0xda>
 8007f70:	06d9      	lsls	r1, r3, #27
 8007f72:	bf44      	itt	mi
 8007f74:	2220      	movmi	r2, #32
 8007f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f7a:	071a      	lsls	r2, r3, #28
 8007f7c:	bf44      	itt	mi
 8007f7e:	222b      	movmi	r2, #43	; 0x2b
 8007f80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f84:	782a      	ldrb	r2, [r5, #0]
 8007f86:	2a2a      	cmp	r2, #42	; 0x2a
 8007f88:	d015      	beq.n	8007fb6 <_svfiprintf_r+0xea>
 8007f8a:	9a07      	ldr	r2, [sp, #28]
 8007f8c:	462f      	mov	r7, r5
 8007f8e:	2000      	movs	r0, #0
 8007f90:	250a      	movs	r5, #10
 8007f92:	4639      	mov	r1, r7
 8007f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f98:	3b30      	subs	r3, #48	; 0x30
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	d94d      	bls.n	800803a <_svfiprintf_r+0x16e>
 8007f9e:	b1b8      	cbz	r0, 8007fd0 <_svfiprintf_r+0x104>
 8007fa0:	e00f      	b.n	8007fc2 <_svfiprintf_r+0xf6>
 8007fa2:	462f      	mov	r7, r5
 8007fa4:	e7b8      	b.n	8007f18 <_svfiprintf_r+0x4c>
 8007fa6:	4a40      	ldr	r2, [pc, #256]	; (80080a8 <_svfiprintf_r+0x1dc>)
 8007fa8:	1a80      	subs	r0, r0, r2
 8007faa:	fa0b f000 	lsl.w	r0, fp, r0
 8007fae:	4318      	orrs	r0, r3
 8007fb0:	9004      	str	r0, [sp, #16]
 8007fb2:	463d      	mov	r5, r7
 8007fb4:	e7d3      	b.n	8007f5e <_svfiprintf_r+0x92>
 8007fb6:	9a03      	ldr	r2, [sp, #12]
 8007fb8:	1d11      	adds	r1, r2, #4
 8007fba:	6812      	ldr	r2, [r2, #0]
 8007fbc:	9103      	str	r1, [sp, #12]
 8007fbe:	2a00      	cmp	r2, #0
 8007fc0:	db01      	blt.n	8007fc6 <_svfiprintf_r+0xfa>
 8007fc2:	9207      	str	r2, [sp, #28]
 8007fc4:	e004      	b.n	8007fd0 <_svfiprintf_r+0x104>
 8007fc6:	4252      	negs	r2, r2
 8007fc8:	f043 0302 	orr.w	r3, r3, #2
 8007fcc:	9207      	str	r2, [sp, #28]
 8007fce:	9304      	str	r3, [sp, #16]
 8007fd0:	783b      	ldrb	r3, [r7, #0]
 8007fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8007fd4:	d10c      	bne.n	8007ff0 <_svfiprintf_r+0x124>
 8007fd6:	787b      	ldrb	r3, [r7, #1]
 8007fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fda:	d133      	bne.n	8008044 <_svfiprintf_r+0x178>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	9203      	str	r2, [sp, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfb8      	it	lt
 8007fe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fec:	3702      	adds	r7, #2
 8007fee:	9305      	str	r3, [sp, #20]
 8007ff0:	4d2e      	ldr	r5, [pc, #184]	; (80080ac <_svfiprintf_r+0x1e0>)
 8007ff2:	7839      	ldrb	r1, [r7, #0]
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f7f8 f8ea 	bl	80001d0 <memchr>
 8007ffc:	b138      	cbz	r0, 800800e <_svfiprintf_r+0x142>
 8007ffe:	2340      	movs	r3, #64	; 0x40
 8008000:	1b40      	subs	r0, r0, r5
 8008002:	fa03 f000 	lsl.w	r0, r3, r0
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	4303      	orrs	r3, r0
 800800a:	3701      	adds	r7, #1
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	7839      	ldrb	r1, [r7, #0]
 8008010:	4827      	ldr	r0, [pc, #156]	; (80080b0 <_svfiprintf_r+0x1e4>)
 8008012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008016:	2206      	movs	r2, #6
 8008018:	1c7e      	adds	r6, r7, #1
 800801a:	f7f8 f8d9 	bl	80001d0 <memchr>
 800801e:	2800      	cmp	r0, #0
 8008020:	d038      	beq.n	8008094 <_svfiprintf_r+0x1c8>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <_svfiprintf_r+0x1e8>)
 8008024:	bb13      	cbnz	r3, 800806c <_svfiprintf_r+0x1a0>
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	3307      	adds	r3, #7
 800802a:	f023 0307 	bic.w	r3, r3, #7
 800802e:	3308      	adds	r3, #8
 8008030:	9303      	str	r3, [sp, #12]
 8008032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008034:	444b      	add	r3, r9
 8008036:	9309      	str	r3, [sp, #36]	; 0x24
 8008038:	e76d      	b.n	8007f16 <_svfiprintf_r+0x4a>
 800803a:	fb05 3202 	mla	r2, r5, r2, r3
 800803e:	2001      	movs	r0, #1
 8008040:	460f      	mov	r7, r1
 8008042:	e7a6      	b.n	8007f92 <_svfiprintf_r+0xc6>
 8008044:	2300      	movs	r3, #0
 8008046:	3701      	adds	r7, #1
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	4619      	mov	r1, r3
 800804c:	250a      	movs	r5, #10
 800804e:	4638      	mov	r0, r7
 8008050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008054:	3a30      	subs	r2, #48	; 0x30
 8008056:	2a09      	cmp	r2, #9
 8008058:	d903      	bls.n	8008062 <_svfiprintf_r+0x196>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0c8      	beq.n	8007ff0 <_svfiprintf_r+0x124>
 800805e:	9105      	str	r1, [sp, #20]
 8008060:	e7c6      	b.n	8007ff0 <_svfiprintf_r+0x124>
 8008062:	fb05 2101 	mla	r1, r5, r1, r2
 8008066:	2301      	movs	r3, #1
 8008068:	4607      	mov	r7, r0
 800806a:	e7f0      	b.n	800804e <_svfiprintf_r+0x182>
 800806c:	ab03      	add	r3, sp, #12
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	4622      	mov	r2, r4
 8008072:	4b11      	ldr	r3, [pc, #68]	; (80080b8 <_svfiprintf_r+0x1ec>)
 8008074:	a904      	add	r1, sp, #16
 8008076:	4640      	mov	r0, r8
 8008078:	f3af 8000 	nop.w
 800807c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008080:	4681      	mov	r9, r0
 8008082:	d1d6      	bne.n	8008032 <_svfiprintf_r+0x166>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	065b      	lsls	r3, r3, #25
 8008088:	f53f af35 	bmi.w	8007ef6 <_svfiprintf_r+0x2a>
 800808c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808e:	b01d      	add	sp, #116	; 0x74
 8008090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008094:	ab03      	add	r3, sp, #12
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	4622      	mov	r2, r4
 800809a:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <_svfiprintf_r+0x1ec>)
 800809c:	a904      	add	r1, sp, #16
 800809e:	4640      	mov	r0, r8
 80080a0:	f000 f882 	bl	80081a8 <_printf_i>
 80080a4:	e7ea      	b.n	800807c <_svfiprintf_r+0x1b0>
 80080a6:	bf00      	nop
 80080a8:	080086b0 	.word	0x080086b0
 80080ac:	080086b6 	.word	0x080086b6
 80080b0:	080086ba 	.word	0x080086ba
 80080b4:	00000000 	.word	0x00000000
 80080b8:	08007e19 	.word	0x08007e19

080080bc <_printf_common>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	4691      	mov	r9, r2
 80080c2:	461f      	mov	r7, r3
 80080c4:	688a      	ldr	r2, [r1, #8]
 80080c6:	690b      	ldr	r3, [r1, #16]
 80080c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080cc:	4293      	cmp	r3, r2
 80080ce:	bfb8      	it	lt
 80080d0:	4613      	movlt	r3, r2
 80080d2:	f8c9 3000 	str.w	r3, [r9]
 80080d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080da:	4606      	mov	r6, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	b112      	cbz	r2, 80080e6 <_printf_common+0x2a>
 80080e0:	3301      	adds	r3, #1
 80080e2:	f8c9 3000 	str.w	r3, [r9]
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	0699      	lsls	r1, r3, #26
 80080ea:	bf42      	ittt	mi
 80080ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080f0:	3302      	addmi	r3, #2
 80080f2:	f8c9 3000 	strmi.w	r3, [r9]
 80080f6:	6825      	ldr	r5, [r4, #0]
 80080f8:	f015 0506 	ands.w	r5, r5, #6
 80080fc:	d107      	bne.n	800810e <_printf_common+0x52>
 80080fe:	f104 0a19 	add.w	sl, r4, #25
 8008102:	68e3      	ldr	r3, [r4, #12]
 8008104:	f8d9 2000 	ldr.w	r2, [r9]
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	42ab      	cmp	r3, r5
 800810c:	dc28      	bgt.n	8008160 <_printf_common+0xa4>
 800810e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008112:	6822      	ldr	r2, [r4, #0]
 8008114:	3300      	adds	r3, #0
 8008116:	bf18      	it	ne
 8008118:	2301      	movne	r3, #1
 800811a:	0692      	lsls	r2, r2, #26
 800811c:	d42d      	bmi.n	800817a <_printf_common+0xbe>
 800811e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008122:	4639      	mov	r1, r7
 8008124:	4630      	mov	r0, r6
 8008126:	47c0      	blx	r8
 8008128:	3001      	adds	r0, #1
 800812a:	d020      	beq.n	800816e <_printf_common+0xb2>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	68e5      	ldr	r5, [r4, #12]
 8008130:	f8d9 2000 	ldr.w	r2, [r9]
 8008134:	f003 0306 	and.w	r3, r3, #6
 8008138:	2b04      	cmp	r3, #4
 800813a:	bf08      	it	eq
 800813c:	1aad      	subeq	r5, r5, r2
 800813e:	68a3      	ldr	r3, [r4, #8]
 8008140:	6922      	ldr	r2, [r4, #16]
 8008142:	bf0c      	ite	eq
 8008144:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008148:	2500      	movne	r5, #0
 800814a:	4293      	cmp	r3, r2
 800814c:	bfc4      	itt	gt
 800814e:	1a9b      	subgt	r3, r3, r2
 8008150:	18ed      	addgt	r5, r5, r3
 8008152:	f04f 0900 	mov.w	r9, #0
 8008156:	341a      	adds	r4, #26
 8008158:	454d      	cmp	r5, r9
 800815a:	d11a      	bne.n	8008192 <_printf_common+0xd6>
 800815c:	2000      	movs	r0, #0
 800815e:	e008      	b.n	8008172 <_printf_common+0xb6>
 8008160:	2301      	movs	r3, #1
 8008162:	4652      	mov	r2, sl
 8008164:	4639      	mov	r1, r7
 8008166:	4630      	mov	r0, r6
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d103      	bne.n	8008176 <_printf_common+0xba>
 800816e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008176:	3501      	adds	r5, #1
 8008178:	e7c3      	b.n	8008102 <_printf_common+0x46>
 800817a:	18e1      	adds	r1, r4, r3
 800817c:	1c5a      	adds	r2, r3, #1
 800817e:	2030      	movs	r0, #48	; 0x30
 8008180:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008184:	4422      	add	r2, r4
 8008186:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800818a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800818e:	3302      	adds	r3, #2
 8008190:	e7c5      	b.n	800811e <_printf_common+0x62>
 8008192:	2301      	movs	r3, #1
 8008194:	4622      	mov	r2, r4
 8008196:	4639      	mov	r1, r7
 8008198:	4630      	mov	r0, r6
 800819a:	47c0      	blx	r8
 800819c:	3001      	adds	r0, #1
 800819e:	d0e6      	beq.n	800816e <_printf_common+0xb2>
 80081a0:	f109 0901 	add.w	r9, r9, #1
 80081a4:	e7d8      	b.n	8008158 <_printf_common+0x9c>
	...

080081a8 <_printf_i>:
 80081a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081b0:	460c      	mov	r4, r1
 80081b2:	7e09      	ldrb	r1, [r1, #24]
 80081b4:	b085      	sub	sp, #20
 80081b6:	296e      	cmp	r1, #110	; 0x6e
 80081b8:	4617      	mov	r7, r2
 80081ba:	4606      	mov	r6, r0
 80081bc:	4698      	mov	r8, r3
 80081be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081c0:	f000 80b3 	beq.w	800832a <_printf_i+0x182>
 80081c4:	d822      	bhi.n	800820c <_printf_i+0x64>
 80081c6:	2963      	cmp	r1, #99	; 0x63
 80081c8:	d036      	beq.n	8008238 <_printf_i+0x90>
 80081ca:	d80a      	bhi.n	80081e2 <_printf_i+0x3a>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	f000 80b9 	beq.w	8008344 <_printf_i+0x19c>
 80081d2:	2958      	cmp	r1, #88	; 0x58
 80081d4:	f000 8083 	beq.w	80082de <_printf_i+0x136>
 80081d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081e0:	e032      	b.n	8008248 <_printf_i+0xa0>
 80081e2:	2964      	cmp	r1, #100	; 0x64
 80081e4:	d001      	beq.n	80081ea <_printf_i+0x42>
 80081e6:	2969      	cmp	r1, #105	; 0x69
 80081e8:	d1f6      	bne.n	80081d8 <_printf_i+0x30>
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	6813      	ldr	r3, [r2, #0]
 80081ee:	0605      	lsls	r5, r0, #24
 80081f0:	f103 0104 	add.w	r1, r3, #4
 80081f4:	d52a      	bpl.n	800824c <_printf_i+0xa4>
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da03      	bge.n	8008206 <_printf_i+0x5e>
 80081fe:	222d      	movs	r2, #45	; 0x2d
 8008200:	425b      	negs	r3, r3
 8008202:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008206:	486f      	ldr	r0, [pc, #444]	; (80083c4 <_printf_i+0x21c>)
 8008208:	220a      	movs	r2, #10
 800820a:	e039      	b.n	8008280 <_printf_i+0xd8>
 800820c:	2973      	cmp	r1, #115	; 0x73
 800820e:	f000 809d 	beq.w	800834c <_printf_i+0x1a4>
 8008212:	d808      	bhi.n	8008226 <_printf_i+0x7e>
 8008214:	296f      	cmp	r1, #111	; 0x6f
 8008216:	d020      	beq.n	800825a <_printf_i+0xb2>
 8008218:	2970      	cmp	r1, #112	; 0x70
 800821a:	d1dd      	bne.n	80081d8 <_printf_i+0x30>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	f043 0320 	orr.w	r3, r3, #32
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	e003      	b.n	800822e <_printf_i+0x86>
 8008226:	2975      	cmp	r1, #117	; 0x75
 8008228:	d017      	beq.n	800825a <_printf_i+0xb2>
 800822a:	2978      	cmp	r1, #120	; 0x78
 800822c:	d1d4      	bne.n	80081d8 <_printf_i+0x30>
 800822e:	2378      	movs	r3, #120	; 0x78
 8008230:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008234:	4864      	ldr	r0, [pc, #400]	; (80083c8 <_printf_i+0x220>)
 8008236:	e055      	b.n	80082e4 <_printf_i+0x13c>
 8008238:	6813      	ldr	r3, [r2, #0]
 800823a:	1d19      	adds	r1, r3, #4
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6011      	str	r1, [r2, #0]
 8008240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008248:	2301      	movs	r3, #1
 800824a:	e08c      	b.n	8008366 <_printf_i+0x1be>
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6011      	str	r1, [r2, #0]
 8008250:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008254:	bf18      	it	ne
 8008256:	b21b      	sxthne	r3, r3
 8008258:	e7cf      	b.n	80081fa <_printf_i+0x52>
 800825a:	6813      	ldr	r3, [r2, #0]
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1d18      	adds	r0, r3, #4
 8008260:	6010      	str	r0, [r2, #0]
 8008262:	0628      	lsls	r0, r5, #24
 8008264:	d501      	bpl.n	800826a <_printf_i+0xc2>
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	e002      	b.n	8008270 <_printf_i+0xc8>
 800826a:	0668      	lsls	r0, r5, #25
 800826c:	d5fb      	bpl.n	8008266 <_printf_i+0xbe>
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	4854      	ldr	r0, [pc, #336]	; (80083c4 <_printf_i+0x21c>)
 8008272:	296f      	cmp	r1, #111	; 0x6f
 8008274:	bf14      	ite	ne
 8008276:	220a      	movne	r2, #10
 8008278:	2208      	moveq	r2, #8
 800827a:	2100      	movs	r1, #0
 800827c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008280:	6865      	ldr	r5, [r4, #4]
 8008282:	60a5      	str	r5, [r4, #8]
 8008284:	2d00      	cmp	r5, #0
 8008286:	f2c0 8095 	blt.w	80083b4 <_printf_i+0x20c>
 800828a:	6821      	ldr	r1, [r4, #0]
 800828c:	f021 0104 	bic.w	r1, r1, #4
 8008290:	6021      	str	r1, [r4, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d13d      	bne.n	8008312 <_printf_i+0x16a>
 8008296:	2d00      	cmp	r5, #0
 8008298:	f040 808e 	bne.w	80083b8 <_printf_i+0x210>
 800829c:	4665      	mov	r5, ip
 800829e:	2a08      	cmp	r2, #8
 80082a0:	d10b      	bne.n	80082ba <_printf_i+0x112>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	07db      	lsls	r3, r3, #31
 80082a6:	d508      	bpl.n	80082ba <_printf_i+0x112>
 80082a8:	6923      	ldr	r3, [r4, #16]
 80082aa:	6862      	ldr	r2, [r4, #4]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	bfde      	ittt	le
 80082b0:	2330      	movle	r3, #48	; 0x30
 80082b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082ba:	ebac 0305 	sub.w	r3, ip, r5
 80082be:	6123      	str	r3, [r4, #16]
 80082c0:	f8cd 8000 	str.w	r8, [sp]
 80082c4:	463b      	mov	r3, r7
 80082c6:	aa03      	add	r2, sp, #12
 80082c8:	4621      	mov	r1, r4
 80082ca:	4630      	mov	r0, r6
 80082cc:	f7ff fef6 	bl	80080bc <_printf_common>
 80082d0:	3001      	adds	r0, #1
 80082d2:	d14d      	bne.n	8008370 <_printf_i+0x1c8>
 80082d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082d8:	b005      	add	sp, #20
 80082da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082de:	4839      	ldr	r0, [pc, #228]	; (80083c4 <_printf_i+0x21c>)
 80082e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082e4:	6813      	ldr	r3, [r2, #0]
 80082e6:	6821      	ldr	r1, [r4, #0]
 80082e8:	1d1d      	adds	r5, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6015      	str	r5, [r2, #0]
 80082ee:	060a      	lsls	r2, r1, #24
 80082f0:	d50b      	bpl.n	800830a <_printf_i+0x162>
 80082f2:	07ca      	lsls	r2, r1, #31
 80082f4:	bf44      	itt	mi
 80082f6:	f041 0120 	orrmi.w	r1, r1, #32
 80082fa:	6021      	strmi	r1, [r4, #0]
 80082fc:	b91b      	cbnz	r3, 8008306 <_printf_i+0x15e>
 80082fe:	6822      	ldr	r2, [r4, #0]
 8008300:	f022 0220 	bic.w	r2, r2, #32
 8008304:	6022      	str	r2, [r4, #0]
 8008306:	2210      	movs	r2, #16
 8008308:	e7b7      	b.n	800827a <_printf_i+0xd2>
 800830a:	064d      	lsls	r5, r1, #25
 800830c:	bf48      	it	mi
 800830e:	b29b      	uxthmi	r3, r3
 8008310:	e7ef      	b.n	80082f2 <_printf_i+0x14a>
 8008312:	4665      	mov	r5, ip
 8008314:	fbb3 f1f2 	udiv	r1, r3, r2
 8008318:	fb02 3311 	mls	r3, r2, r1, r3
 800831c:	5cc3      	ldrb	r3, [r0, r3]
 800831e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008322:	460b      	mov	r3, r1
 8008324:	2900      	cmp	r1, #0
 8008326:	d1f5      	bne.n	8008314 <_printf_i+0x16c>
 8008328:	e7b9      	b.n	800829e <_printf_i+0xf6>
 800832a:	6813      	ldr	r3, [r2, #0]
 800832c:	6825      	ldr	r5, [r4, #0]
 800832e:	6961      	ldr	r1, [r4, #20]
 8008330:	1d18      	adds	r0, r3, #4
 8008332:	6010      	str	r0, [r2, #0]
 8008334:	0628      	lsls	r0, r5, #24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	d501      	bpl.n	800833e <_printf_i+0x196>
 800833a:	6019      	str	r1, [r3, #0]
 800833c:	e002      	b.n	8008344 <_printf_i+0x19c>
 800833e:	066a      	lsls	r2, r5, #25
 8008340:	d5fb      	bpl.n	800833a <_printf_i+0x192>
 8008342:	8019      	strh	r1, [r3, #0]
 8008344:	2300      	movs	r3, #0
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	4665      	mov	r5, ip
 800834a:	e7b9      	b.n	80082c0 <_printf_i+0x118>
 800834c:	6813      	ldr	r3, [r2, #0]
 800834e:	1d19      	adds	r1, r3, #4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	681d      	ldr	r5, [r3, #0]
 8008354:	6862      	ldr	r2, [r4, #4]
 8008356:	2100      	movs	r1, #0
 8008358:	4628      	mov	r0, r5
 800835a:	f7f7 ff39 	bl	80001d0 <memchr>
 800835e:	b108      	cbz	r0, 8008364 <_printf_i+0x1bc>
 8008360:	1b40      	subs	r0, r0, r5
 8008362:	6060      	str	r0, [r4, #4]
 8008364:	6863      	ldr	r3, [r4, #4]
 8008366:	6123      	str	r3, [r4, #16]
 8008368:	2300      	movs	r3, #0
 800836a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800836e:	e7a7      	b.n	80082c0 <_printf_i+0x118>
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	462a      	mov	r2, r5
 8008374:	4639      	mov	r1, r7
 8008376:	4630      	mov	r0, r6
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0aa      	beq.n	80082d4 <_printf_i+0x12c>
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	079b      	lsls	r3, r3, #30
 8008382:	d413      	bmi.n	80083ac <_printf_i+0x204>
 8008384:	68e0      	ldr	r0, [r4, #12]
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	4298      	cmp	r0, r3
 800838a:	bfb8      	it	lt
 800838c:	4618      	movlt	r0, r3
 800838e:	e7a3      	b.n	80082d8 <_printf_i+0x130>
 8008390:	2301      	movs	r3, #1
 8008392:	464a      	mov	r2, r9
 8008394:	4639      	mov	r1, r7
 8008396:	4630      	mov	r0, r6
 8008398:	47c0      	blx	r8
 800839a:	3001      	adds	r0, #1
 800839c:	d09a      	beq.n	80082d4 <_printf_i+0x12c>
 800839e:	3501      	adds	r5, #1
 80083a0:	68e3      	ldr	r3, [r4, #12]
 80083a2:	9a03      	ldr	r2, [sp, #12]
 80083a4:	1a9b      	subs	r3, r3, r2
 80083a6:	42ab      	cmp	r3, r5
 80083a8:	dcf2      	bgt.n	8008390 <_printf_i+0x1e8>
 80083aa:	e7eb      	b.n	8008384 <_printf_i+0x1dc>
 80083ac:	2500      	movs	r5, #0
 80083ae:	f104 0919 	add.w	r9, r4, #25
 80083b2:	e7f5      	b.n	80083a0 <_printf_i+0x1f8>
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ac      	bne.n	8008312 <_printf_i+0x16a>
 80083b8:	7803      	ldrb	r3, [r0, #0]
 80083ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c2:	e76c      	b.n	800829e <_printf_i+0xf6>
 80083c4:	080086c1 	.word	0x080086c1
 80083c8:	080086d2 	.word	0x080086d2

080083cc <memcpy>:
 80083cc:	b510      	push	{r4, lr}
 80083ce:	1e43      	subs	r3, r0, #1
 80083d0:	440a      	add	r2, r1
 80083d2:	4291      	cmp	r1, r2
 80083d4:	d100      	bne.n	80083d8 <memcpy+0xc>
 80083d6:	bd10      	pop	{r4, pc}
 80083d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e0:	e7f7      	b.n	80083d2 <memcpy+0x6>

080083e2 <memmove>:
 80083e2:	4288      	cmp	r0, r1
 80083e4:	b510      	push	{r4, lr}
 80083e6:	eb01 0302 	add.w	r3, r1, r2
 80083ea:	d807      	bhi.n	80083fc <memmove+0x1a>
 80083ec:	1e42      	subs	r2, r0, #1
 80083ee:	4299      	cmp	r1, r3
 80083f0:	d00a      	beq.n	8008408 <memmove+0x26>
 80083f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083fa:	e7f8      	b.n	80083ee <memmove+0xc>
 80083fc:	4283      	cmp	r3, r0
 80083fe:	d9f5      	bls.n	80083ec <memmove+0xa>
 8008400:	1881      	adds	r1, r0, r2
 8008402:	1ad2      	subs	r2, r2, r3
 8008404:	42d3      	cmn	r3, r2
 8008406:	d100      	bne.n	800840a <memmove+0x28>
 8008408:	bd10      	pop	{r4, pc}
 800840a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800840e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008412:	e7f7      	b.n	8008404 <memmove+0x22>

08008414 <_free_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4605      	mov	r5, r0
 8008418:	2900      	cmp	r1, #0
 800841a:	d045      	beq.n	80084a8 <_free_r+0x94>
 800841c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008420:	1f0c      	subs	r4, r1, #4
 8008422:	2b00      	cmp	r3, #0
 8008424:	bfb8      	it	lt
 8008426:	18e4      	addlt	r4, r4, r3
 8008428:	f000 f8d2 	bl	80085d0 <__malloc_lock>
 800842c:	4a1f      	ldr	r2, [pc, #124]	; (80084ac <_free_r+0x98>)
 800842e:	6813      	ldr	r3, [r2, #0]
 8008430:	4610      	mov	r0, r2
 8008432:	b933      	cbnz	r3, 8008442 <_free_r+0x2e>
 8008434:	6063      	str	r3, [r4, #4]
 8008436:	6014      	str	r4, [r2, #0]
 8008438:	4628      	mov	r0, r5
 800843a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800843e:	f000 b8c8 	b.w	80085d2 <__malloc_unlock>
 8008442:	42a3      	cmp	r3, r4
 8008444:	d90c      	bls.n	8008460 <_free_r+0x4c>
 8008446:	6821      	ldr	r1, [r4, #0]
 8008448:	1862      	adds	r2, r4, r1
 800844a:	4293      	cmp	r3, r2
 800844c:	bf04      	itt	eq
 800844e:	681a      	ldreq	r2, [r3, #0]
 8008450:	685b      	ldreq	r3, [r3, #4]
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	bf04      	itt	eq
 8008456:	1852      	addeq	r2, r2, r1
 8008458:	6022      	streq	r2, [r4, #0]
 800845a:	6004      	str	r4, [r0, #0]
 800845c:	e7ec      	b.n	8008438 <_free_r+0x24>
 800845e:	4613      	mov	r3, r2
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	b10a      	cbz	r2, 8008468 <_free_r+0x54>
 8008464:	42a2      	cmp	r2, r4
 8008466:	d9fa      	bls.n	800845e <_free_r+0x4a>
 8008468:	6819      	ldr	r1, [r3, #0]
 800846a:	1858      	adds	r0, r3, r1
 800846c:	42a0      	cmp	r0, r4
 800846e:	d10b      	bne.n	8008488 <_free_r+0x74>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	4401      	add	r1, r0
 8008474:	1858      	adds	r0, r3, r1
 8008476:	4282      	cmp	r2, r0
 8008478:	6019      	str	r1, [r3, #0]
 800847a:	d1dd      	bne.n	8008438 <_free_r+0x24>
 800847c:	6810      	ldr	r0, [r2, #0]
 800847e:	6852      	ldr	r2, [r2, #4]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	4401      	add	r1, r0
 8008484:	6019      	str	r1, [r3, #0]
 8008486:	e7d7      	b.n	8008438 <_free_r+0x24>
 8008488:	d902      	bls.n	8008490 <_free_r+0x7c>
 800848a:	230c      	movs	r3, #12
 800848c:	602b      	str	r3, [r5, #0]
 800848e:	e7d3      	b.n	8008438 <_free_r+0x24>
 8008490:	6820      	ldr	r0, [r4, #0]
 8008492:	1821      	adds	r1, r4, r0
 8008494:	428a      	cmp	r2, r1
 8008496:	bf04      	itt	eq
 8008498:	6811      	ldreq	r1, [r2, #0]
 800849a:	6852      	ldreq	r2, [r2, #4]
 800849c:	6062      	str	r2, [r4, #4]
 800849e:	bf04      	itt	eq
 80084a0:	1809      	addeq	r1, r1, r0
 80084a2:	6021      	streq	r1, [r4, #0]
 80084a4:	605c      	str	r4, [r3, #4]
 80084a6:	e7c7      	b.n	8008438 <_free_r+0x24>
 80084a8:	bd38      	pop	{r3, r4, r5, pc}
 80084aa:	bf00      	nop
 80084ac:	200000b4 	.word	0x200000b4

080084b0 <_malloc_r>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	1ccd      	adds	r5, r1, #3
 80084b4:	f025 0503 	bic.w	r5, r5, #3
 80084b8:	3508      	adds	r5, #8
 80084ba:	2d0c      	cmp	r5, #12
 80084bc:	bf38      	it	cc
 80084be:	250c      	movcc	r5, #12
 80084c0:	2d00      	cmp	r5, #0
 80084c2:	4606      	mov	r6, r0
 80084c4:	db01      	blt.n	80084ca <_malloc_r+0x1a>
 80084c6:	42a9      	cmp	r1, r5
 80084c8:	d903      	bls.n	80084d2 <_malloc_r+0x22>
 80084ca:	230c      	movs	r3, #12
 80084cc:	6033      	str	r3, [r6, #0]
 80084ce:	2000      	movs	r0, #0
 80084d0:	bd70      	pop	{r4, r5, r6, pc}
 80084d2:	f000 f87d 	bl	80085d0 <__malloc_lock>
 80084d6:	4a21      	ldr	r2, [pc, #132]	; (800855c <_malloc_r+0xac>)
 80084d8:	6814      	ldr	r4, [r2, #0]
 80084da:	4621      	mov	r1, r4
 80084dc:	b991      	cbnz	r1, 8008504 <_malloc_r+0x54>
 80084de:	4c20      	ldr	r4, [pc, #128]	; (8008560 <_malloc_r+0xb0>)
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	b91b      	cbnz	r3, 80084ec <_malloc_r+0x3c>
 80084e4:	4630      	mov	r0, r6
 80084e6:	f000 f863 	bl	80085b0 <_sbrk_r>
 80084ea:	6020      	str	r0, [r4, #0]
 80084ec:	4629      	mov	r1, r5
 80084ee:	4630      	mov	r0, r6
 80084f0:	f000 f85e 	bl	80085b0 <_sbrk_r>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	d124      	bne.n	8008542 <_malloc_r+0x92>
 80084f8:	230c      	movs	r3, #12
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	4630      	mov	r0, r6
 80084fe:	f000 f868 	bl	80085d2 <__malloc_unlock>
 8008502:	e7e4      	b.n	80084ce <_malloc_r+0x1e>
 8008504:	680b      	ldr	r3, [r1, #0]
 8008506:	1b5b      	subs	r3, r3, r5
 8008508:	d418      	bmi.n	800853c <_malloc_r+0x8c>
 800850a:	2b0b      	cmp	r3, #11
 800850c:	d90f      	bls.n	800852e <_malloc_r+0x7e>
 800850e:	600b      	str	r3, [r1, #0]
 8008510:	50cd      	str	r5, [r1, r3]
 8008512:	18cc      	adds	r4, r1, r3
 8008514:	4630      	mov	r0, r6
 8008516:	f000 f85c 	bl	80085d2 <__malloc_unlock>
 800851a:	f104 000b 	add.w	r0, r4, #11
 800851e:	1d23      	adds	r3, r4, #4
 8008520:	f020 0007 	bic.w	r0, r0, #7
 8008524:	1ac3      	subs	r3, r0, r3
 8008526:	d0d3      	beq.n	80084d0 <_malloc_r+0x20>
 8008528:	425a      	negs	r2, r3
 800852a:	50e2      	str	r2, [r4, r3]
 800852c:	e7d0      	b.n	80084d0 <_malloc_r+0x20>
 800852e:	428c      	cmp	r4, r1
 8008530:	684b      	ldr	r3, [r1, #4]
 8008532:	bf16      	itet	ne
 8008534:	6063      	strne	r3, [r4, #4]
 8008536:	6013      	streq	r3, [r2, #0]
 8008538:	460c      	movne	r4, r1
 800853a:	e7eb      	b.n	8008514 <_malloc_r+0x64>
 800853c:	460c      	mov	r4, r1
 800853e:	6849      	ldr	r1, [r1, #4]
 8008540:	e7cc      	b.n	80084dc <_malloc_r+0x2c>
 8008542:	1cc4      	adds	r4, r0, #3
 8008544:	f024 0403 	bic.w	r4, r4, #3
 8008548:	42a0      	cmp	r0, r4
 800854a:	d005      	beq.n	8008558 <_malloc_r+0xa8>
 800854c:	1a21      	subs	r1, r4, r0
 800854e:	4630      	mov	r0, r6
 8008550:	f000 f82e 	bl	80085b0 <_sbrk_r>
 8008554:	3001      	adds	r0, #1
 8008556:	d0cf      	beq.n	80084f8 <_malloc_r+0x48>
 8008558:	6025      	str	r5, [r4, #0]
 800855a:	e7db      	b.n	8008514 <_malloc_r+0x64>
 800855c:	200000b4 	.word	0x200000b4
 8008560:	200000b8 	.word	0x200000b8

08008564 <_realloc_r>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	4607      	mov	r7, r0
 8008568:	4614      	mov	r4, r2
 800856a:	460e      	mov	r6, r1
 800856c:	b921      	cbnz	r1, 8008578 <_realloc_r+0x14>
 800856e:	4611      	mov	r1, r2
 8008570:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008574:	f7ff bf9c 	b.w	80084b0 <_malloc_r>
 8008578:	b922      	cbnz	r2, 8008584 <_realloc_r+0x20>
 800857a:	f7ff ff4b 	bl	8008414 <_free_r>
 800857e:	4625      	mov	r5, r4
 8008580:	4628      	mov	r0, r5
 8008582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008584:	f000 f826 	bl	80085d4 <_malloc_usable_size_r>
 8008588:	42a0      	cmp	r0, r4
 800858a:	d20f      	bcs.n	80085ac <_realloc_r+0x48>
 800858c:	4621      	mov	r1, r4
 800858e:	4638      	mov	r0, r7
 8008590:	f7ff ff8e 	bl	80084b0 <_malloc_r>
 8008594:	4605      	mov	r5, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d0f2      	beq.n	8008580 <_realloc_r+0x1c>
 800859a:	4631      	mov	r1, r6
 800859c:	4622      	mov	r2, r4
 800859e:	f7ff ff15 	bl	80083cc <memcpy>
 80085a2:	4631      	mov	r1, r6
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff ff35 	bl	8008414 <_free_r>
 80085aa:	e7e9      	b.n	8008580 <_realloc_r+0x1c>
 80085ac:	4635      	mov	r5, r6
 80085ae:	e7e7      	b.n	8008580 <_realloc_r+0x1c>

080085b0 <_sbrk_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4c06      	ldr	r4, [pc, #24]	; (80085cc <_sbrk_r+0x1c>)
 80085b4:	2300      	movs	r3, #0
 80085b6:	4605      	mov	r5, r0
 80085b8:	4608      	mov	r0, r1
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	f7f9 fa3e 	bl	8001a3c <_sbrk>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	d102      	bne.n	80085ca <_sbrk_r+0x1a>
 80085c4:	6823      	ldr	r3, [r4, #0]
 80085c6:	b103      	cbz	r3, 80085ca <_sbrk_r+0x1a>
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	bd38      	pop	{r3, r4, r5, pc}
 80085cc:	20000498 	.word	0x20000498

080085d0 <__malloc_lock>:
 80085d0:	4770      	bx	lr

080085d2 <__malloc_unlock>:
 80085d2:	4770      	bx	lr

080085d4 <_malloc_usable_size_r>:
 80085d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d8:	1f18      	subs	r0, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bfbc      	itt	lt
 80085de:	580b      	ldrlt	r3, [r1, r0]
 80085e0:	18c0      	addlt	r0, r0, r3
 80085e2:	4770      	bx	lr

080085e4 <_init>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	bf00      	nop
 80085e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ea:	bc08      	pop	{r3}
 80085ec:	469e      	mov	lr, r3
 80085ee:	4770      	bx	lr

080085f0 <_fini>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr

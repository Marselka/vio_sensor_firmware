
imu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08008420  08008420  00018420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084fc  080084fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008504  08008504  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800850c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000070  0800857c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800857c  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6e9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d2b  00000000  00000000  0002e789  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f00  00000000  00000000  000304b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e38  00000000  00000000  000313b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208ff  00000000  00000000  000321f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a613  00000000  00000000  00052aef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc24b  00000000  00000000  0005d102  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012934d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  001293c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008408 	.word	0x08008408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008408 	.word	0x08008408

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setup_mpu>:
		soft_rtc_imu_m = soft_rtc_m;
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
  }*/
//}

void setup_mpu(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af04      	add	r7, sp, #16
	uint8_t dat[] = {5, 16, 1, 1, 8, 8};
 8000576:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <setup_mpu+0x74>)
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000580:	6018      	str	r0, [r3, #0]
 8000582:	3304      	adds	r3, #4
 8000584:	8019      	strh	r1, [r3, #0]
	uint8_t adds[] = {107, 55, 26, 56, 27, 28};
 8000586:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <setup_mpu+0x78>)
 8000588:	463b      	mov	r3, r7
 800058a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058e:	6018      	str	r0, [r3, #0]
 8000590:	3304      	adds	r3, #4
 8000592:	8019      	strh	r1, [r3, #0]
	uint8_t n_of_bytes = sizeof(dat) / sizeof(dat[0]);
 8000594:	2306      	movs	r3, #6
 8000596:	73bb      	strb	r3, [r7, #14]
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 8000598:	2300      	movs	r3, #0
 800059a:	73fb      	strb	r3, [r7, #15]
 800059c:	e019      	b.n	80005d2 <setup_mpu+0x62>
		HAL_I2C_Mem_Write(&hi2c1, 0x68<<1, adds[idx], 1, &dat[idx], 1, 1000);
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	f107 0210 	add.w	r2, r7, #16
 80005a4:	4413      	add	r3, r2
 80005a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80005aa:	b299      	uxth	r1, r3
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	f107 0208 	add.w	r2, r7, #8
 80005b2:	4413      	add	r3, r2
 80005b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b8:	9202      	str	r2, [sp, #8]
 80005ba:	2201      	movs	r2, #1
 80005bc:	9201      	str	r2, [sp, #4]
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	460a      	mov	r2, r1
 80005c4:	21d0      	movs	r1, #208	; 0xd0
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <setup_mpu+0x7c>)
 80005c8:	f002 fa7c 	bl	8002ac4 <HAL_I2C_Mem_Write>
	for (uint8_t idx=0; idx<n_of_bytes; idx++) {
 80005cc:	7bfb      	ldrb	r3, [r7, #15]
 80005ce:	3301      	adds	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
 80005d2:	7bfa      	ldrb	r2, [r7, #15]
 80005d4:	7bbb      	ldrb	r3, [r7, #14]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d3e1      	bcc.n	800059e <setup_mpu+0x2e>
	}
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	08008420 	.word	0x08008420
 80005e8:	08008428 	.word	0x08008428
 80005ec:	20000160 	.word	0x20000160

080005f0 <make_message>:
		t2ic1_val,
		t3ic1_val
	);
}

void make_message(void) {
 80005f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f2:	b097      	sub	sp, #92	; 0x5c
 80005f4:	af0e      	add	r7, sp, #56	; 0x38
	sprintf(str,
 80005f6:	4b61      	ldr	r3, [pc, #388]	; (800077c <make_message+0x18c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	469c      	mov	ip, r3
 80005fc:	4b60      	ldr	r3, [pc, #384]	; (8000780 <make_message+0x190>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	469e      	mov	lr, r3
		"%04x"																			//4
		"\n", 																			//1
																								//=78
		(uint8_t)soft_rtc_imu_m,
		(uint8_t)soft_rtc_imu_s,
		(uint16_t)(soft_rtc_imu_subs>>16),
 8000602:	4b60      	ldr	r3, [pc, #384]	; (8000784 <make_message+0x194>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	0c1b      	lsrs	r3, r3, #16
 8000608:	b29b      	uxth	r3, r3
	sprintf(str,
 800060a:	461c      	mov	r4, r3
		(uint16_t)(soft_rtc_imu_subs),
 800060c:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <make_message+0x194>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
	sprintf(str,
 8000612:	461d      	mov	r5, r3
		//(uint8_t)(sTime_imu.Minutes),
		//(uint8_t)(sTime_imu.Seconds),
		//(uint16_t)(sTime_imu.SubSeconds),

		(uint16_t)(dat_buf[0]<<8 | dat_buf[1]),
 8000614:	4b5c      	ldr	r3, [pc, #368]	; (8000788 <make_message+0x198>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	021b      	lsls	r3, r3, #8
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b5a      	ldr	r3, [pc, #360]	; (8000788 <make_message+0x198>)
 800061e:	785b      	ldrb	r3, [r3, #1]
 8000620:	b21b      	sxth	r3, r3
 8000622:	4313      	orrs	r3, r2
 8000624:	b21b      	sxth	r3, r3
 8000626:	b29b      	uxth	r3, r3
	sprintf(str,
 8000628:	461e      	mov	r6, r3
		(uint16_t)(dat_buf[2]<<8 | dat_buf[3]),
 800062a:	4b57      	ldr	r3, [pc, #348]	; (8000788 <make_message+0x198>)
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b21a      	sxth	r2, r3
 8000632:	4b55      	ldr	r3, [pc, #340]	; (8000788 <make_message+0x198>)
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29b      	uxth	r3, r3
	sprintf(str,
 800063e:	61fb      	str	r3, [r7, #28]
		(uint16_t)(dat_buf[4]<<8 | dat_buf[5]),
 8000640:	4b51      	ldr	r3, [pc, #324]	; (8000788 <make_message+0x198>)
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	4b4f      	ldr	r3, [pc, #316]	; (8000788 <make_message+0x198>)
 800064a:	795b      	ldrb	r3, [r3, #5]
 800064c:	b21b      	sxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b21b      	sxth	r3, r3
 8000652:	b29b      	uxth	r3, r3
	sprintf(str,
 8000654:	61bb      	str	r3, [r7, #24]
		(uint16_t)(dat_buf[6]<<8 | dat_buf[7]),
 8000656:	4b4c      	ldr	r3, [pc, #304]	; (8000788 <make_message+0x198>)
 8000658:	799b      	ldrb	r3, [r3, #6]
 800065a:	021b      	lsls	r3, r3, #8
 800065c:	b21a      	sxth	r2, r3
 800065e:	4b4a      	ldr	r3, [pc, #296]	; (8000788 <make_message+0x198>)
 8000660:	79db      	ldrb	r3, [r3, #7]
 8000662:	b21b      	sxth	r3, r3
 8000664:	4313      	orrs	r3, r2
 8000666:	b21b      	sxth	r3, r3
 8000668:	b29b      	uxth	r3, r3
	sprintf(str,
 800066a:	617b      	str	r3, [r7, #20]
		(uint16_t)(dat_buf[8]<<8 | dat_buf[9]),
 800066c:	4b46      	ldr	r3, [pc, #280]	; (8000788 <make_message+0x198>)
 800066e:	7a1b      	ldrb	r3, [r3, #8]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	b21a      	sxth	r2, r3
 8000674:	4b44      	ldr	r3, [pc, #272]	; (8000788 <make_message+0x198>)
 8000676:	7a5b      	ldrb	r3, [r3, #9]
 8000678:	b21b      	sxth	r3, r3
 800067a:	4313      	orrs	r3, r2
 800067c:	b21b      	sxth	r3, r3
 800067e:	b29b      	uxth	r3, r3
	sprintf(str,
 8000680:	613b      	str	r3, [r7, #16]
		(uint16_t)(dat_buf[10]<<8 | dat_buf[11]),
 8000682:	4b41      	ldr	r3, [pc, #260]	; (8000788 <make_message+0x198>)
 8000684:	7a9b      	ldrb	r3, [r3, #10]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <make_message+0x198>)
 800068c:	7adb      	ldrb	r3, [r3, #11]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29b      	uxth	r3, r3
	sprintf(str,
 8000696:	60fb      	str	r3, [r7, #12]
		(uint16_t)(dat_buf[12]<<8 | dat_buf[13]),
 8000698:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <make_message+0x198>)
 800069a:	7b1b      	ldrb	r3, [r3, #12]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b21a      	sxth	r2, r3
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <make_message+0x198>)
 80006a2:	7b5b      	ldrb	r3, [r3, #13]
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	4313      	orrs	r3, r2
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	b29b      	uxth	r3, r3
	sprintf(str,
 80006ac:	60bb      	str	r3, [r7, #8]

		(uint16_t)(dat_[1]<<8 | dat_[0]),
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <make_message+0x19c>)
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <make_message+0x19c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29b      	uxth	r3, r3
	sprintf(str,
 80006c2:	607b      	str	r3, [r7, #4]
		(uint16_t)(dat_[3]<<8 | dat_[2]),
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <make_message+0x19c>)
 80006c6:	78db      	ldrb	r3, [r3, #3]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	b21a      	sxth	r2, r3
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <make_message+0x19c>)
 80006ce:	789b      	ldrb	r3, [r3, #2]
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	4313      	orrs	r3, r2
 80006d4:	b21b      	sxth	r3, r3
 80006d6:	b29b      	uxth	r3, r3
	sprintf(str,
 80006d8:	4618      	mov	r0, r3
		(uint16_t)(dat_[5]<<8 | dat_[4]),
 80006da:	4b2c      	ldr	r3, [pc, #176]	; (800078c <make_message+0x19c>)
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	4b2a      	ldr	r3, [pc, #168]	; (800078c <make_message+0x19c>)
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	b21b      	sxth	r3, r3
 80006e8:	4313      	orrs	r3, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	b29b      	uxth	r3, r3
	sprintf(str,
 80006ee:	4619      	mov	r1, r3
		(uint16_t)(dat_[7]<<8 | dat_[6]),
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <make_message+0x19c>)
 80006f2:	79db      	ldrb	r3, [r3, #7]
 80006f4:	021b      	lsls	r3, r3, #8
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b24      	ldr	r3, [pc, #144]	; (800078c <make_message+0x19c>)
 80006fa:	799b      	ldrb	r3, [r3, #6]
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	4313      	orrs	r3, r2
 8000700:	b21b      	sxth	r3, r3
 8000702:	b29b      	uxth	r3, r3
	sprintf(str,
 8000704:	461a      	mov	r2, r3
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <make_message+0x1a0>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	930d      	str	r3, [sp, #52]	; 0x34
 800070c:	920c      	str	r2, [sp, #48]	; 0x30
 800070e:	910b      	str	r1, [sp, #44]	; 0x2c
 8000710:	900a      	str	r0, [sp, #40]	; 0x28
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	9209      	str	r2, [sp, #36]	; 0x24
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	9208      	str	r2, [sp, #32]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	9207      	str	r2, [sp, #28]
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	9206      	str	r2, [sp, #24]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	9205      	str	r2, [sp, #20]
 8000726:	69ba      	ldr	r2, [r7, #24]
 8000728:	9204      	str	r2, [sp, #16]
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	9303      	str	r3, [sp, #12]
 800072e:	9602      	str	r6, [sp, #8]
 8000730:	9501      	str	r5, [sp, #4]
 8000732:	9400      	str	r4, [sp, #0]
 8000734:	4673      	mov	r3, lr
 8000736:	4662      	mov	r2, ip
 8000738:	4916      	ldr	r1, [pc, #88]	; (8000794 <make_message+0x1a4>)
 800073a:	4817      	ldr	r0, [pc, #92]	; (8000798 <make_message+0x1a8>)
 800073c:	f007 fa5e 	bl	8007bfc <siprintf>

		count
	);
	if (buf_flag_cameras_ts_ready == 1) {
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <make_message+0x1ac>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d115      	bne.n	8000774 <make_message+0x184>
		sprintf(str + N_IMU_CHARS,
 8000748:	4815      	ldr	r0, [pc, #84]	; (80007a0 <make_message+0x1b0>)
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <make_message+0x1b4>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <make_message+0x1b8>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461c      	mov	r4, r3
				"%02x %02x %04x %04x"	 										//15
				"\n", 																			//1
																										//=18
				(uint8_t)soft_rtc_cameras_m,
				(uint8_t)soft_rtc_cameras_s,
				(uint16_t)(soft_rtc_cameras_subs>>16),
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <make_message+0x1bc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	0c1b      	lsrs	r3, r3, #16
 800075c:	b29b      	uxth	r3, r3
		sprintf(str + N_IMU_CHARS,
 800075e:	461a      	mov	r2, r3
				(uint16_t)(soft_rtc_cameras_subs)
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <make_message+0x1bc>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	b29b      	uxth	r3, r3
		sprintf(str + N_IMU_CHARS,
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	9200      	str	r2, [sp, #0]
 800076a:	4623      	mov	r3, r4
 800076c:	460a      	mov	r2, r1
 800076e:	4910      	ldr	r1, [pc, #64]	; (80007b0 <make_message+0x1c0>)
 8000770:	f007 fa44 	bl	8007bfc <siprintf>
				//(uint8_t)(sTime_lidar.Minutes),
				//(uint8_t)(sTime_lidar.Seconds),
				//(uint16_t)(sTime_lidar.SubSeconds)
			);
	}*/
}
 8000774:	bf00      	nop
 8000776:	3724      	adds	r7, #36	; 0x24
 8000778:	46bd      	mov	sp, r7
 800077a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077c:	20000094 	.word	0x20000094
 8000780:	20000095 	.word	0x20000095
 8000784:	20000098 	.word	0x20000098
 8000788:	200003f4 	.word	0x200003f4
 800078c:	200002b0 	.word	0x200002b0
 8000790:	2000008c 	.word	0x2000008c
 8000794:	0800843c 	.word	0x0800843c
 8000798:	20000404 	.word	0x20000404
 800079c:	20000090 	.word	0x20000090
 80007a0:	20000452 	.word	0x20000452
 80007a4:	2000009c 	.word	0x2000009c
 80007a8:	2000009d 	.word	0x2000009d
 80007ac:	200000a0 	.word	0x200000a0
 80007b0:	08008490 	.word	0x08008490

080007b4 <cp>:
	for (uint16_t i=0; i<n; i++) {
		;
	}
}

void cp() {
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_BYTES; i++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	71fb      	strb	r3, [r7, #7]
 80007be:	e008      	b.n	80007d2 <cp+0x1e>
		dat_buf[i] = dat[i];
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4907      	ldr	r1, [pc, #28]	; (80007e4 <cp+0x30>)
 80007c6:	5c89      	ldrb	r1, [r1, r2]
 80007c8:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <cp+0x34>)
 80007ca:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0; i<N_BYTES; i++) {
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	3301      	adds	r3, #1
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d9f3      	bls.n	80007c0 <cp+0xc>
	}
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	200000b0 	.word	0x200000b0
 80007e8:	200003f4 	.word	0x200003f4

080007ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d126      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x62>
		soft_rtc_s ++;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800080a:	701a      	strb	r2, [r3, #0]
		if (soft_rtc_s == 60) {
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b3c      	cmp	r3, #60	; 0x3c
 8000812:	d11c      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x62>
			soft_rtc_s = 0;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
			soft_rtc_m ++;
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000824:	701a      	strb	r2, [r3, #0]
			if (soft_rtc_m == 60) {
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b3c      	cmp	r3, #60	; 0x3c
 800082c:	d10f      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x62>
				soft_rtc_m = 0;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
				soft_rtc_h ++;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b2da      	uxtb	r2, r3
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800083e:	701a      	strb	r2, [r3, #0]
				if (soft_rtc_h == 24) {
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b18      	cmp	r3, #24
 8000846:	d102      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x62>
					soft_rtc_h = 0;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	200003b4 	.word	0x200003b4
 8000860:	20000093 	.word	0x20000093
 8000864:	20000092 	.word	0x20000092
 8000868:	20000091 	.word	0x20000091

0800086c <HAL_UART_RxCpltCallback>:
			//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		}
	}*/
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART4) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <HAL_UART_RxCpltCallback+0x24>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d102      	bne.n	8000884 <HAL_UART_RxCpltCallback+0x18>
    	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
    	//flag_alignment_received = 1;
    	flag_data_received_from_pc = 1;
 800087e:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_UART_RxCpltCallback+0x28>)
 8000880:	2201      	movs	r2, #1
 8000882:	701a      	strb	r2, [r3, #0]
    }
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40004c00 	.word	0x40004c00
 8000894:	200001b6 	.word	0x200001b6

08000898 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim2.Instance) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x88>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d135      	bne.n	8000918 <HAL_TIM_IC_CaptureCallback+0x80>
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	7f1b      	ldrb	r3, [r3, #28]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d116      	bne.n	80008e2 <HAL_TIM_IC_CaptureCallback+0x4a>
  		soft_rtc_imu_s = soft_rtc_s;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <HAL_TIM_IC_CaptureCallback+0x90>)
 80008ba:	701a      	strb	r2, [r3, #0]
			soft_rtc_imu_m = soft_rtc_m;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <HAL_TIM_IC_CaptureCallback+0x94>)
 80008be:	781a      	ldrb	r2, [r3, #0]
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x98>)
 80008c2:	701a      	strb	r2, [r3, #0]
			soft_rtc_imu_subs = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f005 fbdc 	bl	8006084 <HAL_TIM_ReadCapturedValue>
 80008cc:	4602      	mov	r2, r0
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x9c>)
 80008d0:	601a      	str	r2, [r3, #0]
  		flag_read_imu_values = 1;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80008d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <HAL_TIM_IC_CaptureCallback+0xa4>)
 80008de:	f001 ff9e 	bl	800281e <HAL_GPIO_TogglePin>
  	}
  	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	7f1b      	ldrb	r3, [r3, #28]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d116      	bne.n	8000918 <HAL_TIM_IC_CaptureCallback+0x80>
			soft_rtc_cameras_s = soft_rtc_s;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80008f0:	701a      	strb	r2, [r3, #0]
			soft_rtc_cameras_m = soft_rtc_m;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_TIM_IC_CaptureCallback+0x94>)
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <HAL_TIM_IC_CaptureCallback+0xac>)
 80008f8:	701a      	strb	r2, [r3, #0]
			soft_rtc_cameras_subs = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80008fa:	2104      	movs	r1, #4
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f005 fbc1 	bl	8006084 <HAL_TIM_ReadCapturedValue>
 8000902:	4602      	mov	r2, r0
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000906:	601a      	str	r2, [r3, #0]
			flag_cameras_ts_ready = 1;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000914:	f001 ff83 	bl	800281e <HAL_GPIO_TogglePin>
  	}
  }
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200003b4 	.word	0x200003b4
 8000924:	20000093 	.word	0x20000093
 8000928:	20000095 	.word	0x20000095
 800092c:	20000092 	.word	0x20000092
 8000930:	20000094 	.word	0x20000094
 8000934:	20000098 	.word	0x20000098
 8000938:	2000008e 	.word	0x2000008e
 800093c:	40020c00 	.word	0x40020c00
 8000940:	2000009d 	.word	0x2000009d
 8000944:	2000009c 	.word	0x2000009c
 8000948:	200000a0 	.word	0x200000a0
 800094c:	2000008f 	.word	0x2000008f

08000950 <receive_from_pc>:

//void receive_alignment(void) {
//	HAL_UART_Receive_DMA(&huart4, &alignment_subs_received, 4);
//}
void receive_from_pc(void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart4, input_buf, INPUT_PC_DATA_LENGTH);
 8000954:	2205      	movs	r2, #5
 8000956:	4903      	ldr	r1, [pc, #12]	; (8000964 <receive_from_pc+0x14>)
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <receive_from_pc+0x18>)
 800095a:	f006 f9ff 	bl	8006d5c <HAL_UART_Receive_DMA>
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200002c0 	.word	0x200002c0
 8000968:	20000370 	.word	0x20000370

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f001 f843 	bl	80019fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f921 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fbd3 	bl	8001124 <MX_GPIO_Init>
  MX_DMA_Init();
 800097e:	f000 fb99 	bl	80010b4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000982:	f000 f98b 	bl	8000c9c <MX_I2C1_Init>
  MX_UART4_Init();
 8000986:	f000 fb6b 	bl	8001060 <MX_UART4_Init>
  MX_I2C2_Init();
 800098a:	f000 f9b7 	bl	8000cfc <MX_I2C2_Init>
  MX_TIM2_Init();
 800098e:	f000 f9e5 	bl	8000d5c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000992:	f000 fae7 	bl	8000f64 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000996:	f000 fa67 	bl	8000e68 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
  setup_mpu();
 800099a:	f7ff fde9 	bl	8000570 <setup_mpu>
	//delay(10);
	//delay(10);
	//HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
  //HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
  //HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800099e:	2100      	movs	r1, #0
 80009a0:	4877      	ldr	r0, [pc, #476]	; (8000b80 <main+0x214>)
 80009a2:	f004 ff2f 	bl	8005804 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80009a6:	2104      	movs	r1, #4
 80009a8:	4876      	ldr	r0, [pc, #472]	; (8000b84 <main+0x218>)
 80009aa:	f004 ff2b 	bl	8005804 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80009ae:	4876      	ldr	r0, [pc, #472]	; (8000b88 <main+0x21c>)
 80009b0:	f004 fecf 	bl	8005752 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80009b4:	2100      	movs	r1, #0
 80009b6:	4874      	ldr	r0, [pc, #464]	; (8000b88 <main+0x21c>)
 80009b8:	f004 ff98 	bl	80058ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80009bc:	2104      	movs	r1, #4
 80009be:	4872      	ldr	r0, [pc, #456]	; (8000b88 <main+0x21c>)
 80009c0:	f004 ff94 	bl	80058ec <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80009c4:	2108      	movs	r1, #8
 80009c6:	4870      	ldr	r0, [pc, #448]	; (8000b88 <main+0x21c>)
 80009c8:	f004 ff90 	bl	80058ec <HAL_TIM_IC_Start_IT>
|::                      ::|
|::                      ::|
|::             [D5 USB] ::|
--------------------------*/
	//receive_alignment();
	receive_from_pc();
 80009cc:	f7ff ffc0 	bl	8000950 <receive_from_pc>
	dat_[0] = 0b10000010;
 80009d0:	4b6e      	ldr	r3, [pc, #440]	; (8000b8c <main+0x220>)
 80009d2:	2282      	movs	r2, #130	; 0x82
 80009d4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x20, 1, dat_, 1, 1000);
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	9302      	str	r3, [sp, #8]
 80009dc:	2301      	movs	r3, #1
 80009de:	9301      	str	r3, [sp, #4]
 80009e0:	4b6a      	ldr	r3, [pc, #424]	; (8000b8c <main+0x220>)
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2301      	movs	r3, #1
 80009e6:	2220      	movs	r2, #32
 80009e8:	2138      	movs	r1, #56	; 0x38
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <main+0x224>)
 80009ec:	f002 f86a 	bl	8002ac4 <HAL_I2C_Mem_Write>
	dat_[0] = 0b00001100;
 80009f0:	4b66      	ldr	r3, [pc, #408]	; (8000b8c <main+0x220>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x23, 1, dat_, 1, 1000);
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	2301      	movs	r3, #1
 80009fe:	9301      	str	r3, [sp, #4]
 8000a00:	4b62      	ldr	r3, [pc, #392]	; (8000b8c <main+0x220>)
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	2301      	movs	r3, #1
 8000a06:	2223      	movs	r2, #35	; 0x23
 8000a08:	2138      	movs	r1, #56	; 0x38
 8000a0a:	4861      	ldr	r0, [pc, #388]	; (8000b90 <main+0x224>)
 8000a0c:	f002 f85a 	bl	8002ac4 <HAL_I2C_Mem_Write>
	dat_[0] = 0;
 8000a10:	4b5e      	ldr	r3, [pc, #376]	; (8000b8c <main+0x220>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c2, 0b0011100<<1, 0x22, 1, dat_, 1, 1000);
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <main+0x220>)
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	2222      	movs	r2, #34	; 0x22
 8000a28:	2138      	movs	r1, #56	; 0x38
 8000a2a:	4859      	ldr	r0, [pc, #356]	; (8000b90 <main+0x224>)
 8000a2c:	f002 f84a 	bl	8002ac4 <HAL_I2C_Mem_Write>
  while (1)
  {
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9)); // forward timer output signal to led pin
  	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)); // forward timer output signal to led pin
  	if (flag_read_imu_values == 1) {
 8000a30:	4b58      	ldr	r3, [pc, #352]	; (8000b94 <main+0x228>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	f040 809b 	bne.w	8000b70 <main+0x204>
			HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8000a3a:	2017      	movs	r0, #23
 8000a3c:	f001 f977 	bl	8001d2e <HAL_NVIC_DisableIRQ>
			flag_read_imu_values = 0;
 8000a40:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <main+0x228>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4c:	4852      	ldr	r0, [pc, #328]	; (8000b98 <main+0x22c>)
 8000a4e:	f001 fecd 	bl	80027ec <HAL_GPIO_WritePin>
			count++;
 8000a52:	4b52      	ldr	r3, [pc, #328]	; (8000b9c <main+0x230>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b50      	ldr	r3, [pc, #320]	; (8000b9c <main+0x230>)
 8000a5c:	801a      	strh	r2, [r3, #0]
			cp();
 8000a5e:	f7ff fea9 	bl	80007b4 <cp>
			HAL_I2C_Mem_Read_DMA(&hi2c1, 0x68<<1, 59, 1, dat, 14);
 8000a62:	230e      	movs	r3, #14
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <main+0x234>)
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	223b      	movs	r2, #59	; 0x3b
 8000a6e:	21d0      	movs	r1, #208	; 0xd0
 8000a70:	484c      	ldr	r0, [pc, #304]	; (8000ba4 <main+0x238>)
 8000a72:	f002 f921 	bl	8002cb8 <HAL_I2C_Mem_Read_DMA>
			//if (count%2){
			HAL_I2C_Mem_Read_DMA(&hi2c2, 0b0011100<<1, 0x28, 1, dat_, 8);
 8000a76:	2308      	movs	r3, #8
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	4b44      	ldr	r3, [pc, #272]	; (8000b8c <main+0x220>)
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2228      	movs	r2, #40	; 0x28
 8000a82:	2138      	movs	r1, #56	; 0x38
 8000a84:	4842      	ldr	r0, [pc, #264]	; (8000b90 <main+0x224>)
 8000a86:	f002 f917 	bl	8002cb8 <HAL_I2C_Mem_Read_DMA>
			if (abs((int8_t)dat[0])>THRES || abs((int8_t)dat[2])>THRES || abs((int8_t)dat[4])>THRES ||
 8000a8a:	4b45      	ldr	r3, [pc, #276]	; (8000ba0 <main+0x234>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	b25b      	sxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bfb8      	it	lt
 8000a94:	425b      	neglt	r3, r3
 8000a96:	2b7e      	cmp	r3, #126	; 0x7e
 8000a98:	dc27      	bgt.n	8000aea <main+0x17e>
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <main+0x234>)
 8000a9c:	789b      	ldrb	r3, [r3, #2]
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bfb8      	it	lt
 8000aa4:	425b      	neglt	r3, r3
 8000aa6:	2b7e      	cmp	r3, #126	; 0x7e
 8000aa8:	dc1f      	bgt.n	8000aea <main+0x17e>
 8000aaa:	4b3d      	ldr	r3, [pc, #244]	; (8000ba0 <main+0x234>)
 8000aac:	791b      	ldrb	r3, [r3, #4]
 8000aae:	b25b      	sxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bfb8      	it	lt
 8000ab4:	425b      	neglt	r3, r3
 8000ab6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ab8:	dc17      	bgt.n	8000aea <main+0x17e>
					abs((int8_t)dat[8])>THRES || abs((int8_t)dat[10])>THRES || abs((int8_t)dat[12])>THRES) {
 8000aba:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <main+0x234>)
 8000abc:	7a1b      	ldrb	r3, [r3, #8]
 8000abe:	b25b      	sxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	bfb8      	it	lt
 8000ac4:	425b      	neglt	r3, r3
			if (abs((int8_t)dat[0])>THRES || abs((int8_t)dat[2])>THRES || abs((int8_t)dat[4])>THRES ||
 8000ac6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ac8:	dc0f      	bgt.n	8000aea <main+0x17e>
					abs((int8_t)dat[8])>THRES || abs((int8_t)dat[10])>THRES || abs((int8_t)dat[12])>THRES) {
 8000aca:	4b35      	ldr	r3, [pc, #212]	; (8000ba0 <main+0x234>)
 8000acc:	7a9b      	ldrb	r3, [r3, #10]
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	bfb8      	it	lt
 8000ad4:	425b      	neglt	r3, r3
 8000ad6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ad8:	dc07      	bgt.n	8000aea <main+0x17e>
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <main+0x234>)
 8000adc:	7b1b      	ldrb	r3, [r3, #12]
 8000ade:	b25b      	sxtb	r3, r3
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	bfb8      	it	lt
 8000ae4:	425b      	neglt	r3, r3
 8000ae6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ae8:	dd0c      	ble.n	8000b04 <main+0x198>
				//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000aea:	2201      	movs	r2, #1
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	4829      	ldr	r0, [pc, #164]	; (8000b98 <main+0x22c>)
 8000af2:	f001 fe7b 	bl	80027ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afc:	4826      	ldr	r0, [pc, #152]	; (8000b98 <main+0x22c>)
 8000afe:	f001 fe75 	bl	80027ec <HAL_GPIO_WritePin>
 8000b02:	e00b      	b.n	8000b1c <main+0x1b0>
			}
			else {
				//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0a:	4823      	ldr	r0, [pc, #140]	; (8000b98 <main+0x22c>)
 8000b0c:	f001 fe6e 	bl	80027ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	4820      	ldr	r0, [pc, #128]	; (8000b98 <main+0x22c>)
 8000b18:	f001 fe68 	bl	80027ec <HAL_GPIO_WritePin>
			//else {
			//	dat_[1] = 0b00001111;
			//	HAL_I2C_Mem_Write(&hi2c2, 0x0C<<1, 0x0A, 1, &dat_[1], 1, 1000);
			//}

			buf_flag_cameras_ts_ready = flag_cameras_ts_ready;
 8000b1c:	4b22      	ldr	r3, [pc, #136]	; (8000ba8 <main+0x23c>)
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <main+0x240>)
 8000b22:	701a      	strb	r2, [r3, #0]

			uint8_t mes_length = N_IMU_CHARS + buf_flag_cameras_ts_ready * N_CAMERAS_CHARS;// + buf_flag_lidar_ts_ready * N_LIDAR_CHARS;
 8000b24:	4b21      	ldr	r3, [pc, #132]	; (8000bac <main+0x240>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	00d2      	lsls	r2, r2, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	334e      	adds	r3, #78	; 0x4e
 8000b34:	71fb      	strb	r3, [r7, #7]
			make_message();
 8000b36:	f7ff fd5b 	bl	80005f0 <make_message>
			HAL_UART_Transmit_DMA(&huart4, str, mes_length);//, 1000);	//HAL_UART_Transmit_DMA(&huart4, str, N_CHARS);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	491b      	ldr	r1, [pc, #108]	; (8000bb0 <main+0x244>)
 8000b42:	481c      	ldr	r0, [pc, #112]	; (8000bb4 <main+0x248>)
 8000b44:	f006 f89e 	bl	8006c84 <HAL_UART_Transmit_DMA>
			//make_message_();
			//HAL_UART_Transmit_DMA(&huart4, str, 14);//, 1000);

			//delay(7000);
			//if(count & 1024) { HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);}
			if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) {__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);}
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <main+0x24c>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <main+0x1f0>
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <main+0x24c>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	615a      	str	r2, [r3, #20]
			HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b5c:	2017      	movs	r0, #23
 8000b5e:	f001 f8d8 	bl	8001d12 <HAL_NVIC_EnableIRQ>

			if (buf_flag_cameras_ts_ready == 1) {
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <main+0x240>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d102      	bne.n	8000b70 <main+0x204>
				flag_cameras_ts_ready = 0;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <main+0x23c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
  	if (flag_transmit_to_lidar==1) {
  		flag_transmit_to_lidar = 0;
  		make_lidar_string();
  		HAL_UART_Transmit_DMA(&huart5, lidar_str, N_CHARS_TO_LIDAR);//, 1000);	//HAL_UART_Transmit_DMA(&huart5, str, N_CHARS);*/
  	}
  	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <main+0x22c>)
 8000b78:	f001 fe38 	bl	80027ec <HAL_GPIO_WritePin>
  	if (flag_read_imu_values == 1) {
 8000b7c:	e758      	b.n	8000a30 <main+0xc4>
 8000b7e:	bf00      	nop
 8000b80:	20000210 	.word	0x20000210
 8000b84:	20000120 	.word	0x20000120
 8000b88:	200003b4 	.word	0x200003b4
 8000b8c:	200002b0 	.word	0x200002b0
 8000b90:	200001b8 	.word	0x200001b8
 8000b94:	2000008e 	.word	0x2000008e
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	200000b0 	.word	0x200000b0
 8000ba4:	20000160 	.word	0x20000160
 8000ba8:	2000008f 	.word	0x2000008f
 8000bac:	20000090 	.word	0x20000090
 8000bb0:	20000404 	.word	0x20000404
 8000bb4:	20000370 	.word	0x20000370
 8000bb8:	40013c00 	.word	0x40013c00

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	; 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f007 f80e 	bl	8007bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b2b      	ldr	r3, [pc, #172]	; (8000c94 <SystemClock_Config+0xd8>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a2a      	ldr	r2, [pc, #168]	; (8000c94 <SystemClock_Config+0xd8>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <SystemClock_Config+0xd8>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <SystemClock_Config+0xdc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <SystemClock_Config+0xdc>)
 8000c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <SystemClock_Config+0xdc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c2c:	2305      	movs	r3, #5
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000c30:	2360      	movs	r3, #96	; 0x60
 8000c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f004 f891 	bl	8004d68 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c4c:	f000 fafa 	bl	8001244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 faeb 	bl	8005248 <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c78:	f000 fae4 	bl	8001244 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000c7c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c80:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000c84:	2000      	movs	r0, #0
 8000c86:	f004 fbc5 	bl	8005414 <HAL_RCC_MCOConfig>
}
 8000c8a:	bf00      	nop
 8000c8c:	3750      	adds	r7, #80	; 0x50
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000

08000c9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000ca2:	4a14      	ldr	r2, [pc, #80]	; (8000cf4 <MX_I2C1_Init+0x58>)
 8000ca4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ca6:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <MX_I2C1_Init+0x5c>)
 8000caa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_I2C1_Init+0x54>)
 8000cdc:	f001 fdba 	bl	8002854 <HAL_I2C_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000ce6:	f000 faad 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000160 	.word	0x20000160
 8000cf4:	40005400 	.word	0x40005400
 8000cf8:	00061a80 	.word	0x00061a80

08000cfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d02:	4a14      	ldr	r2, [pc, #80]	; (8000d54 <MX_I2C2_Init+0x58>)
 8000d04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d08:	4a13      	ldr	r2, [pc, #76]	; (8000d58 <MX_I2C2_Init+0x5c>)
 8000d0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d12:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d20:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_I2C2_Init+0x54>)
 8000d3c:	f001 fd8a 	bl	8002854 <HAL_I2C_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000d46:	f000 fa7d 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001b8 	.word	0x200001b8
 8000d54:	40005800 	.word	0x40005800
 8000d58:	00061a80 	.word	0x00061a80

08000d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d62:	f107 0318 	add.w	r3, r7, #24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000d88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3-1;
 8000d8e:	4b34      	ldr	r3, [pc, #208]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000d90:	2202      	movs	r2, #2
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25600000-1;
 8000d9a:	4b31      	ldr	r3, [pc, #196]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000d9c:	4a31      	ldr	r2, [pc, #196]	; (8000e64 <MX_TIM2_Init+0x108>)
 8000d9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dac:	482c      	ldr	r0, [pc, #176]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000dae:	f004 fca5 	bl	80056fc <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 fa44 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc2:	f107 0318 	add.w	r3, r7, #24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4825      	ldr	r0, [pc, #148]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000dca:	f005 f861 	bl	8005e90 <HAL_TIM_ConfigClockSource>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000dd4:	f000 fa36 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000dd8:	4821      	ldr	r0, [pc, #132]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000dda:	f004 fd51 	bl	8005880 <HAL_TIM_IC_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000de4:	f000 fa2e 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000de8:	2320      	movs	r3, #32
 8000dea:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000df8:	f005 fe66 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000e02:	f000 fa1f 	bl	8001244 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4810      	ldr	r0, [pc, #64]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000e1e:	f004 fed5 	bl	8005bcc <HAL_TIM_IC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000e28:	f000 fa0c 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000e34:	f004 feca 	bl	8005bcc <HAL_TIM_IC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000e3e:	f000 fa01 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	2208      	movs	r2, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_TIM2_Init+0x104>)
 8000e4a:	f004 febf 	bl	8005bcc <HAL_TIM_IC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000e54:	f000 f9f6 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	200003b4 	.word	0x200003b4
 8000e64:	01869fff 	.word	0x01869fff

08000e68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08e      	sub	sp, #56	; 0x38
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e88:	463b      	mov	r3, r7
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	611a      	str	r2, [r3, #16]
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9a:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000e9c:	4a30      	ldr	r2, [pc, #192]	; (8000f60 <MX_TIM3_Init+0xf8>)
 8000e9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b2d      	ldr	r3, [pc, #180]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5-1;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000eae:	2204      	movs	r2, #4
 8000eb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ebe:	4827      	ldr	r0, [pc, #156]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000ec0:	f004 fc1c 	bl	80056fc <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000eca:	f000 f9bb 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ece:	4823      	ldr	r0, [pc, #140]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000ed0:	f004 fc63 	bl	800579a <HAL_TIM_PWM_Init>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000eda:	f000 f9b3 	bl	8001244 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000ee2:	2370      	movs	r3, #112	; 0x70
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
  sSlaveConfig.TriggerFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4818      	ldr	r0, [pc, #96]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000efa:	f005 f880 	bl	8005ffe <HAL_TIM_SlaveConfigSynchro>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000f04:	f000 f99e 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000f18:	f005 fdd6 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8000f22:	f000 f98f 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f26:	2360      	movs	r3, #96	; 0x60
 8000f28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	2200      	movs	r2, #0
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000f3e:	f004 fee1 	bl	8005d04 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000f48:	f000 f97c 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f4c:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM3_Init+0xf4>)
 8000f4e:	f000 fb5d 	bl	800160c <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3738      	adds	r7, #56	; 0x38
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000210 	.word	0x20000210
 8000f60:	40000400 	.word	0x40000400

08000f64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]
 8000f92:	615a      	str	r2, [r3, #20]
 8000f94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000f98:	4a30      	ldr	r2, [pc, #192]	; (800105c <MX_TIM4_Init+0xf8>)
 8000f9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000faa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fae:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fbc:	4826      	ldr	r0, [pc, #152]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000fbe:	f004 fb9d 	bl	80056fc <HAL_TIM_Base_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000fc8:	f000 f93c 	bl	8001244 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fcc:	4822      	ldr	r0, [pc, #136]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000fce:	f004 fbe4 	bl	800579a <HAL_TIM_PWM_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000fd8:	f000 f934 	bl	8001244 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000fe0:	2370      	movs	r3, #112	; 0x70
 8000fe2:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	633b      	str	r3, [r7, #48]	; 0x30
  sSlaveConfig.TriggerFilter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_TIM4_Init+0xf4>)
 8000ff8:	f005 f801 	bl	8005ffe <HAL_TIM_SlaveConfigSynchro>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001002:	f000 f91f 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4810      	ldr	r0, [pc, #64]	; (8001058 <MX_TIM4_Init+0xf4>)
 8001016:	f005 fd57 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001020:	f000 f910 	bl	8001244 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	2204      	movs	r2, #4
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <MX_TIM4_Init+0xf4>)
 800103c:	f004 fe62 	bl	8005d04 <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM4_Init+0xe6>
  {
    Error_Handler();
 8001046:	f000 f8fd 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <MX_TIM4_Init+0xf4>)
 800104c:	f000 fade 	bl	800160c <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3738      	adds	r7, #56	; 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000120 	.word	0x20000120
 800105c:	40000800 	.word	0x40000800

08001060 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_UART4_Init+0x48>)
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <MX_UART4_Init+0x4c>)
 8001068:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_UART4_Init+0x48>)
 800106c:	4a10      	ldr	r2, [pc, #64]	; (80010b0 <MX_UART4_Init+0x50>)
 800106e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_UART4_Init+0x48>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_UART4_Init+0x48>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_UART4_Init+0x48>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_UART4_Init+0x48>)
 8001084:	220c      	movs	r2, #12
 8001086:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_UART4_Init+0x48>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_UART4_Init+0x48>)
 8001090:	2200      	movs	r2, #0
 8001092:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_UART4_Init+0x48>)
 8001096:	f005 fda7 	bl	8006be8 <HAL_UART_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_UART4_Init+0x44>
  {
    Error_Handler();
 80010a0:	f000 f8d0 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000370 	.word	0x20000370
 80010ac:	40004c00 	.word	0x40004c00
 80010b0:	001e8480 	.word	0x001e8480

080010b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_DMA_Init+0x6c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <MX_DMA_Init+0x6c>)
 80010c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_DMA_Init+0x6c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2105      	movs	r1, #5
 80010da:	200d      	movs	r0, #13
 80010dc:	f000 fdfd 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010e0:	200d      	movs	r0, #13
 80010e2:	f000 fe16 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	200e      	movs	r0, #14
 80010ec:	f000 fdf5 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010f0:	200e      	movs	r0, #14
 80010f2:	f000 fe0e 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	200f      	movs	r0, #15
 80010fc:	f000 fded 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001100:	200f      	movs	r0, #15
 8001102:	f000 fe06 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	2105      	movs	r1, #5
 800110a:	2010      	movs	r0, #16
 800110c:	f000 fde5 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001110:	2010      	movs	r0, #16
 8001112:	f000 fdfe 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08c      	sub	sp, #48	; 0x30
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b3e      	ldr	r3, [pc, #248]	; (8001238 <MX_GPIO_Init+0x114>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a3d      	ldr	r2, [pc, #244]	; (8001238 <MX_GPIO_Init+0x114>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <MX_GPIO_Init+0x114>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <MX_GPIO_Init+0x114>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a36      	ldr	r2, [pc, #216]	; (8001238 <MX_GPIO_Init+0x114>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <MX_GPIO_Init+0x114>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <MX_GPIO_Init+0x114>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a2f      	ldr	r2, [pc, #188]	; (8001238 <MX_GPIO_Init+0x114>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MX_GPIO_Init+0x114>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b29      	ldr	r3, [pc, #164]	; (8001238 <MX_GPIO_Init+0x114>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a28      	ldr	r2, [pc, #160]	; (8001238 <MX_GPIO_Init+0x114>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <MX_GPIO_Init+0x114>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	4b22      	ldr	r3, [pc, #136]	; (8001238 <MX_GPIO_Init+0x114>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <MX_GPIO_Init+0x114>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_GPIO_Init+0x114>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_GPIO_Init+0x114>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <MX_GPIO_Init+0x114>)
 80011d0:	f043 0310 	orr.w	r3, r3, #16
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_GPIO_Init+0x114>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_GPIO_Init+0x118>)
 80011ea:	f001 faff 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD12 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80011ee:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	480d      	ldr	r0, [pc, #52]	; (800123c <MX_GPIO_Init+0x118>)
 8001208:	f001 f956 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800120c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	4619      	mov	r1, r3
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_GPIO_Init+0x11c>)
 800122a:	f001 f945 	bl	80024b8 <HAL_GPIO_Init>

}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40020000 	.word	0x40020000

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a65      	ldr	r2, [pc, #404]	; (8001458 <HAL_I2C_MspInit+0x1b4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d163      	bne.n	800138e <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a63      	ldr	r2, [pc, #396]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b61      	ldr	r3, [pc, #388]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e2:	23c0      	movs	r3, #192	; 0xc0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e6:	2312      	movs	r3, #18
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f2:	2304      	movs	r3, #4
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	4858      	ldr	r0, [pc, #352]	; (8001460 <HAL_I2C_MspInit+0x1bc>)
 80012fe:	f001 f8db 	bl	80024b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b55      	ldr	r3, [pc, #340]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a54      	ldr	r2, [pc, #336]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 800131e:	4b51      	ldr	r3, [pc, #324]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_I2C_MspInit+0x1c4>)
 8001322:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001326:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800132a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800132c:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001338:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 800133a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800133e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001340:	4b48      	ldr	r3, [pc, #288]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800134c:	4b45      	ldr	r3, [pc, #276]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001352:	4b44      	ldr	r3, [pc, #272]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001354:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001358:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001360:	4840      	ldr	r0, [pc, #256]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001362:	f000 fcff 	bl	8001d64 <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800136c:	f7ff ff6a 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a3c      	ldr	r2, [pc, #240]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001374:	639a      	str	r2, [r3, #56]	; 0x38
 8001376:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <HAL_I2C_MspInit+0x1c0>)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	201f      	movs	r0, #31
 8001382:	f000 fcaa 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001386:	201f      	movs	r0, #31
 8001388:	f000 fcc3 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800138c:	e05f      	b.n	800144e <HAL_I2C_MspInit+0x1aa>
  else if(hi2c->Instance==I2C2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a36      	ldr	r2, [pc, #216]	; (800146c <HAL_I2C_MspInit+0x1c8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d15a      	bne.n	800144e <HAL_I2C_MspInit+0x1aa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a2e      	ldr	r2, [pc, #184]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80013a2:	f043 0302 	orr.w	r3, r3, #2
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ba:	2312      	movs	r3, #18
 80013bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c6:	2304      	movs	r3, #4
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4619      	mov	r1, r3
 80013d0:	4823      	ldr	r0, [pc, #140]	; (8001460 <HAL_I2C_MspInit+0x1bc>)
 80013d2:	f001 f871 	bl	80024b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80013e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_I2C_MspInit+0x1b8>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 80013f4:	4a1f      	ldr	r2, [pc, #124]	; (8001474 <HAL_I2C_MspInit+0x1d0>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 80013fa:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 800140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001412:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001432:	480f      	ldr	r0, [pc, #60]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001434:	f000 fc96 	bl	8001d64 <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_MspInit+0x19e>
      Error_Handler();
 800143e:	f7ff ff01 	bl	8001244 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 8001446:	639a      	str	r2, [r3, #56]	; 0x38
 8001448:	4a09      	ldr	r2, [pc, #36]	; (8001470 <HAL_I2C_MspInit+0x1cc>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800144e:	bf00      	nop
 8001450:	3730      	adds	r7, #48	; 0x30
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40005400 	.word	0x40005400
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400
 8001464:	20000310 	.word	0x20000310
 8001468:	40026088 	.word	0x40026088
 800146c:	40005800 	.word	0x40005800
 8001470:	20000250 	.word	0x20000250
 8001474:	40026058 	.word	0x40026058

08001478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08e      	sub	sp, #56	; 0x38
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d144      	bne.n	8001524 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	4b55      	ldr	r3, [pc, #340]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a54      	ldr	r2, [pc, #336]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b52      	ldr	r3, [pc, #328]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	4b4e      	ldr	r3, [pc, #312]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b4b      	ldr	r3, [pc, #300]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014d2:	2303      	movs	r3, #3
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014e2:	2301      	movs	r3, #1
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4842      	ldr	r0, [pc, #264]	; (80015f8 <HAL_TIM_Base_MspInit+0x180>)
 80014ee:	f000 ffe3 	bl	80024b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014f2:	2304      	movs	r3, #4
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001502:	2301      	movs	r3, #1
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	483a      	ldr	r0, [pc, #232]	; (80015f8 <HAL_TIM_Base_MspInit+0x180>)
 800150e:	f000 ffd3 	bl	80024b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2100      	movs	r1, #0
 8001516:	201c      	movs	r0, #28
 8001518:	f000 fbdf 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800151c:	201c      	movs	r0, #28
 800151e:	f000 fbf8 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001522:	e062      	b.n	80015ea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_TIM_Base_MspInit+0x184>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a2f      	ldr	r2, [pc, #188]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b26      	ldr	r3, [pc, #152]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001566:	2304      	movs	r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001576:	2302      	movs	r3, #2
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	481f      	ldr	r0, [pc, #124]	; (8001600 <HAL_TIM_Base_MspInit+0x188>)
 8001582:	f000 ff99 	bl	80024b8 <HAL_GPIO_Init>
}
 8001586:	e030      	b.n	80015ea <HAL_TIM_Base_MspInit+0x172>
  else if(htim_base->Instance==TIM4)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <HAL_TIM_Base_MspInit+0x18c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x172>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a0f      	ldr	r2, [pc, #60]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_TIM_Base_MspInit+0x17c>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015ca:	2301      	movs	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015da:	2302      	movs	r3, #2
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <HAL_TIM_Base_MspInit+0x190>)
 80015e6:	f000 ff67 	bl	80024b8 <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	3738      	adds	r7, #56	; 0x38
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40020000 	.word	0x40020000
 80015fc:	40000400 	.word	0x40000400
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40000800 	.word	0x40000800
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_TIM_MspPostInit+0xb0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d11e      	bne.n	800166c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b23      	ldr	r3, [pc, #140]	; (80016c0 <HAL_TIM_MspPostInit+0xb4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <HAL_TIM_MspPostInit+0xb4>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b20      	ldr	r3, [pc, #128]	; (80016c0 <HAL_TIM_MspPostInit+0xb4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800165a:	2302      	movs	r3, #2
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4817      	ldr	r0, [pc, #92]	; (80016c4 <HAL_TIM_MspPostInit+0xb8>)
 8001666:	f000 ff27 	bl	80024b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800166a:	e023      	b.n	80016b4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a15      	ldr	r2, [pc, #84]	; (80016c8 <HAL_TIM_MspPostInit+0xbc>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d11e      	bne.n	80016b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_TIM_MspPostInit+0xb4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_TIM_MspPostInit+0xb4>)
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_TIM_MspPostInit+0xb4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a4:	2302      	movs	r3, #2
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <HAL_TIM_MspPostInit+0xc0>)
 80016b0:	f000 ff02 	bl	80024b8 <HAL_GPIO_Init>
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000
 80016c8:	40000800 	.word	0x40000800
 80016cc:	40020c00 	.word	0x40020c00

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a4c      	ldr	r2, [pc, #304]	; (8001820 <HAL_UART_MspInit+0x150>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f040 8091 	bne.w	8001816 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_UART_MspInit+0x154>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	4a49      	ldr	r2, [pc, #292]	; (8001824 <HAL_UART_MspInit+0x154>)
 80016fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001702:	6413      	str	r3, [r2, #64]	; 0x40
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_UART_MspInit+0x154>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_UART_MspInit+0x154>)
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	4a42      	ldr	r2, [pc, #264]	; (8001824 <HAL_UART_MspInit+0x154>)
 800171a:	f043 0304 	orr.w	r3, r3, #4
 800171e:	6313      	str	r3, [r2, #48]	; 0x30
 8001720:	4b40      	ldr	r3, [pc, #256]	; (8001824 <HAL_UART_MspInit+0x154>)
 8001722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800172c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800173e:	2308      	movs	r3, #8
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4837      	ldr	r0, [pc, #220]	; (8001828 <HAL_UART_MspInit+0x158>)
 800174a:	f000 feb5 	bl	80024b8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001750:	4a37      	ldr	r2, [pc, #220]	; (8001830 <HAL_UART_MspInit+0x160>)
 8001752:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001754:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001756:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800175a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175c:	4b33      	ldr	r3, [pc, #204]	; (800182c <HAL_UART_MspInit+0x15c>)
 800175e:	2240      	movs	r2, #64	; 0x40
 8001760:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <HAL_UART_MspInit+0x15c>)
 800176a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800176e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_UART_MspInit+0x15c>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_UART_MspInit+0x15c>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800178e:	4827      	ldr	r0, [pc, #156]	; (800182c <HAL_UART_MspInit+0x15c>)
 8001790:	f000 fae8 	bl	8001d64 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800179a:	f7ff fd53 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a22      	ldr	r2, [pc, #136]	; (800182c <HAL_UART_MspInit+0x15c>)
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <HAL_UART_MspInit+0x15c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017ac:	4a22      	ldr	r2, [pc, #136]	; (8001838 <HAL_UART_MspInit+0x168>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b8:	4b1e      	ldr	r3, [pc, #120]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ca:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80017ea:	4812      	ldr	r0, [pc, #72]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017ec:	f000 faba 	bl	8001d64 <HAL_DMA_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80017f6:	f7ff fd25 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <HAL_UART_MspInit+0x164>)
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <HAL_UART_MspInit+0x164>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	2034      	movs	r0, #52	; 0x34
 800180c:	f000 fa65 	bl	8001cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001810:	2034      	movs	r0, #52	; 0x34
 8001812:	f000 fa7e 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40004c00 	.word	0x40004c00
 8001824:	40023800 	.word	0x40023800
 8001828:	40020800 	.word	0x40020800
 800182c:	20000478 	.word	0x20000478
 8001830:	40026070 	.word	0x40026070
 8001834:	200000c0 	.word	0x200000c0
 8001838:	40026040 	.word	0x40026040

0800183c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <HardFault_Handler+0x4>

08001850 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <MemManage_Handler+0x4>

08001856 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <BusFault_Handler+0x4>

0800185c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <UsageFault_Handler+0x4>

08001862 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001890:	f000 f906 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}

08001898 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <DMA1_Stream2_IRQHandler+0x10>)
 800189e:	f000 fb89 	bl	8001fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200000c0 	.word	0x200000c0

080018ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <DMA1_Stream3_IRQHandler+0x10>)
 80018b2:	f000 fb7f 	bl	8001fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000250 	.word	0x20000250

080018c0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <DMA1_Stream4_IRQHandler+0x10>)
 80018c6:	f000 fb75 	bl	8001fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000478 	.word	0x20000478

080018d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Stream5_IRQHandler+0x10>)
 80018da:	f000 fb6b 	bl	8001fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000310 	.word	0x20000310

080018e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <TIM2_IRQHandler+0x10>)
 80018ee:	f004 f865 	bl	80059bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003b4 	.word	0x200003b4

080018fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <I2C1_EV_IRQHandler+0x10>)
 8001902:	f001 fb25 	bl	8002f50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000160 	.word	0x20000160

08001910 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <UART4_IRQHandler+0x10>)
 8001916:	f005 faa1 	bl	8006e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000370 	.word	0x20000370

08001924 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x50>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x16>
		heap_end = &end;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <_sbrk+0x50>)
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <_sbrk+0x54>)
 8001938:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <_sbrk+0x50>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <_sbrk+0x50>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	466a      	mov	r2, sp
 800194a:	4293      	cmp	r3, r2
 800194c:	d907      	bls.n	800195e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800194e:	f006 f923 	bl	8007b98 <__errno>
 8001952:	4602      	mov	r2, r0
 8001954:	230c      	movs	r3, #12
 8001956:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195c:	e006      	b.n	800196c <_sbrk+0x48>
	}

	heap_end += incr;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <_sbrk+0x50>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a03      	ldr	r2, [pc, #12]	; (8001974 <_sbrk+0x50>)
 8001968:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200000a4 	.word	0x200000a4
 8001978:	200004e0 	.word	0x200004e0

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <SystemInit+0x28>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <SystemInit+0x28>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <SystemInit+0x28>)
 8001992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001996:	609a      	str	r2, [r3, #8]
#endif
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019ae:	e003      	b.n	80019b8 <LoopCopyDataInit>

080019b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019b6:	3104      	adds	r1, #4

080019b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019b8:	480b      	ldr	r0, [pc, #44]	; (80019e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019c0:	d3f6      	bcc.n	80019b0 <CopyDataInit>
  ldr  r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019c4:	e002      	b.n	80019cc <LoopFillZerobss>

080019c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019c8:	f842 3b04 	str.w	r3, [r2], #4

080019cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019d0:	d3f9      	bcc.n	80019c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019d2:	f7ff ffd3 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f006 f8e5 	bl	8007ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7fe ffc7 	bl	800096c <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019e4:	0800850c 	.word	0x0800850c
  ldr  r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019ec:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80019f0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80019f4:	200004e0 	.word	0x200004e0

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <HAL_Init+0x40>)
 8001a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <HAL_Init+0x40>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	4b08      	ldr	r3, [pc, #32]	; (8001a3c <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <HAL_Init+0x40>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a24:	2003      	movs	r0, #3
 8001a26:	f000 f94d 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f808 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a30:	f7ff fc10 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00

08001a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_InitTick+0x54>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_InitTick+0x58>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f973 	bl	8001d4a <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a7c:	f000 f92d 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <HAL_InitTick+0x5c>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000000 	.word	0x20000000
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	; (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000008 	.word	0x20000008
 8001ac4:	200004d8 	.word	0x200004d8

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200004d8 	.word	0x200004d8

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db10      	blt.n	8001bb4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	f003 021f 	and.w	r2, r3, #31
 8001b98:	4909      	ldr	r1, [pc, #36]	; (8001bc0 <__NVIC_DisableIRQ+0x40>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	095b      	lsrs	r3, r3, #5
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba6:	3320      	adds	r3, #32
 8001ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001bb0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff07 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff1c 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff0f 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff1f 	bl	8001b80 <__NVIC_DisableIRQ>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b082      	sub	sp, #8
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ff94 	bl	8001c80 <SysTick_Config>
 8001d58:	4603      	mov	r3, r0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff feaa 	bl	8001ac8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e099      	b.n	8001eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da0:	e00f      	b.n	8001dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da2:	f7ff fe91 	bl	8001ac8 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d908      	bls.n	8001dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2203      	movs	r2, #3
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e078      	b.n	8001eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e8      	bne.n	8001da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <HAL_DMA_Init+0x158>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d107      	bne.n	8001e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4313      	orrs	r3, r2
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f023 0307 	bic.w	r3, r3, #7
 8001e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d117      	bne.n	8001e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00e      	beq.n	8001e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 faab 	bl	80023c4 <DMA_CheckFifoParam>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d008      	beq.n	8001e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e82:	2301      	movs	r3, #1
 8001e84:	e016      	b.n	8001eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 fa62 	bl	8002358 <DMA_CalcBaseAndBitshift>
 8001e94:	4603      	mov	r3, r0
 8001e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9c:	223f      	movs	r2, #63	; 0x3f
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	f010803f 	.word	0xf010803f

08001ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DMA_Start_IT+0x26>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e040      	b.n	8001f68 <HAL_DMA_Start_IT+0xa8>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d12f      	bne.n	8001f5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f9f4 	bl	80022fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0216 	orr.w	r2, r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0208 	orr.w	r2, r2, #8
 8001f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e005      	b.n	8001f66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f62:	2302      	movs	r3, #2
 8001f64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d004      	beq.n	8001f8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e00c      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2205      	movs	r2, #5
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <HAL_DMA_IRQHandler+0x258>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a92      	ldr	r2, [pc, #584]	; (8002210 <HAL_DMA_IRQHandler+0x25c>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0a9b      	lsrs	r3, r3, #10
 8001fcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2208      	movs	r2, #8
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d01a      	beq.n	8002020 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0204 	bic.w	r2, r2, #4
 8002006:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2208      	movs	r2, #8
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2201      	movs	r2, #1
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d012      	beq.n	8002056 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00b      	beq.n	8002056 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2201      	movs	r2, #1
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204e:	f043 0202 	orr.w	r2, r3, #2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205a:	2204      	movs	r2, #4
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d012      	beq.n	800208c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00b      	beq.n	800208c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	2204      	movs	r2, #4
 800207a:	409a      	lsls	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002084:	f043 0204 	orr.w	r2, r3, #4
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	2210      	movs	r2, #16
 8002092:	409a      	lsls	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d043      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d03c      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	2210      	movs	r2, #16
 80020b0:	409a      	lsls	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d018      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d108      	bne.n	80020e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d024      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
 80020e2:	e01f      	b.n	8002124 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01b      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	4798      	blx	r3
 80020f4:	e016      	b.n	8002124 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d107      	bne.n	8002114 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0208 	bic.w	r2, r2, #8
 8002112:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2220      	movs	r2, #32
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 808e 	beq.w	8002252 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8086 	beq.w	8002252 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800214a:	2220      	movs	r2, #32
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b05      	cmp	r3, #5
 800215c:	d136      	bne.n	80021cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0216 	bic.w	r2, r2, #22
 800216c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800217c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <HAL_DMA_IRQHandler+0x1da>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0208 	bic.w	r2, r2, #8
 800219c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021a2:	223f      	movs	r2, #63	; 0x3f
 80021a4:	409a      	lsls	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d07d      	beq.n	80022be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
        }
        return;
 80021ca:	e078      	b.n	80022be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d01c      	beq.n	8002214 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d030      	beq.n	8002252 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	e02b      	b.n	8002252 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d027      	beq.n	8002252 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4798      	blx	r3
 800220a:	e022      	b.n	8002252 <HAL_DMA_IRQHandler+0x29e>
 800220c:	20000000 	.word	0x20000000
 8002210:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10f      	bne.n	8002242 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0210 	bic.w	r2, r2, #16
 8002230:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	2b00      	cmp	r3, #0
 8002258:	d032      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d022      	beq.n	80022ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2205      	movs	r2, #5
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3301      	adds	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	429a      	cmp	r2, r3
 8002288:	d307      	bcc.n	800229a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1f2      	bne.n	800227e <HAL_DMA_IRQHandler+0x2ca>
 8002298:	e000      	b.n	800229c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800229a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
 80022bc:	e000      	b.n	80022c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80022be:	bf00      	nop
    }
  }
}
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop

080022c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d6:	b2db      	uxtb	r3, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d108      	bne.n	800233c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800233a:	e007      	b.n	800234c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	60da      	str	r2, [r3, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3b10      	subs	r3, #16
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <DMA_CalcBaseAndBitshift+0x64>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	091b      	lsrs	r3, r3, #4
 8002370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002372:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <DMA_CalcBaseAndBitshift+0x68>)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d909      	bls.n	800239a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	1d1a      	adds	r2, r3, #4
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	; 0x58
 8002398:	e007      	b.n	80023aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	aaaaaaab 	.word	0xaaaaaaab
 80023c0:	080084c0 	.word	0x080084c0

080023c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d11f      	bne.n	800241e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d855      	bhi.n	8002490 <DMA_CheckFifoParam+0xcc>
 80023e4:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <DMA_CheckFifoParam+0x28>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	080023fd 	.word	0x080023fd
 80023f0:	0800240f 	.word	0x0800240f
 80023f4:	080023fd 	.word	0x080023fd
 80023f8:	08002491 	.word	0x08002491
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d045      	beq.n	8002494 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800240c:	e042      	b.n	8002494 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002416:	d13f      	bne.n	8002498 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800241c:	e03c      	b.n	8002498 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002426:	d121      	bne.n	800246c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d836      	bhi.n	800249c <DMA_CheckFifoParam+0xd8>
 800242e:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <DMA_CheckFifoParam+0x70>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002445 	.word	0x08002445
 8002438:	0800244b 	.word	0x0800244b
 800243c:	08002445 	.word	0x08002445
 8002440:	0800245d 	.word	0x0800245d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
      break;
 8002448:	e02f      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d024      	beq.n	80024a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245a:	e021      	b.n	80024a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002464:	d11e      	bne.n	80024a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800246a:	e01b      	b.n	80024a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <DMA_CheckFifoParam+0xb4>
 8002472:	2b03      	cmp	r3, #3
 8002474:	d003      	beq.n	800247e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002476:	e018      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	73fb      	strb	r3, [r7, #15]
      break;
 800247c:	e015      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00e      	beq.n	80024a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	73fb      	strb	r3, [r7, #15]
      break;
 800248e:	e00b      	b.n	80024a8 <DMA_CheckFifoParam+0xe4>
      break;
 8002490:	bf00      	nop
 8002492:	e00a      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 8002494:	bf00      	nop
 8002496:	e008      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 8002498:	bf00      	nop
 800249a:	e006      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 800249c:	bf00      	nop
 800249e:	e004      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 80024a0:	bf00      	nop
 80024a2:	e002      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;   
 80024a4:	bf00      	nop
 80024a6:	e000      	b.n	80024aa <DMA_CheckFifoParam+0xe6>
      break;
 80024a8:	bf00      	nop
    }
  } 
  
  return status; 
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e16b      	b.n	80027ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 815a 	bne.w	80027a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d00b      	beq.n	8002512 <HAL_GPIO_Init+0x5a>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d007      	beq.n	8002512 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002506:	2b11      	cmp	r3, #17
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b12      	cmp	r3, #18
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	2203      	movs	r2, #3
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0xfc>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80b4 	beq.w	80027a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_GPIO_Init+0x308>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a5e      	ldr	r2, [pc, #376]	; (80027c0 <HAL_GPIO_Init+0x308>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b5c      	ldr	r3, [pc, #368]	; (80027c0 <HAL_GPIO_Init+0x308>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265a:	4a5a      	ldr	r2, [pc, #360]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a51      	ldr	r2, [pc, #324]	; (80027c8 <HAL_GPIO_Init+0x310>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x226>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a50      	ldr	r2, [pc, #320]	; (80027cc <HAL_GPIO_Init+0x314>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x222>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a4f      	ldr	r2, [pc, #316]	; (80027d0 <HAL_GPIO_Init+0x318>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x21e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a4e      	ldr	r2, [pc, #312]	; (80027d4 <HAL_GPIO_Init+0x31c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x21a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a4d      	ldr	r2, [pc, #308]	; (80027d8 <HAL_GPIO_Init+0x320>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x216>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4c      	ldr	r2, [pc, #304]	; (80027dc <HAL_GPIO_Init+0x324>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x212>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_GPIO_Init+0x328>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x20e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4a      	ldr	r2, [pc, #296]	; (80027e4 <HAL_GPIO_Init+0x32c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x20a>
 80026be:	2307      	movs	r3, #7
 80026c0:	e00e      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c2:	2308      	movs	r3, #8
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026c6:	2306      	movs	r3, #6
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x228>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4934      	ldr	r1, [pc, #208]	; (80027c4 <HAL_GPIO_Init+0x30c>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002722:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x330>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_GPIO_Init+0x330>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_GPIO_Init+0x330>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x330>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_GPIO_Init+0x330>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae90 	bls.w	80024d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	3724      	adds	r7, #36	; 0x24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40013800 	.word	0x40013800
 80027c8:	40020000 	.word	0x40020000
 80027cc:	40020400 	.word	0x40020400
 80027d0:	40020800 	.word	0x40020800
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40021400 	.word	0x40021400
 80027e0:	40021800 	.word	0x40021800
 80027e4:	40021c00 	.word	0x40021c00
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	887b      	ldrh	r3, [r7, #2]
 8002830:	401a      	ands	r2, r3
 8002832:	887b      	ldrh	r3, [r7, #2]
 8002834:	429a      	cmp	r2, r3
 8002836:	d104      	bne.n	8002842 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	041a      	lsls	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002840:	e002      	b.n	8002848 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002842:	887a      	ldrh	r2, [r7, #2]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	619a      	str	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e11f      	b.n	8002aa6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fd12 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	; 0x24
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b8:	f002 fef8 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80028bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	4a7b      	ldr	r2, [pc, #492]	; (8002ab0 <HAL_I2C_Init+0x25c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d807      	bhi.n	80028d8 <HAL_I2C_Init+0x84>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a7a      	ldr	r2, [pc, #488]	; (8002ab4 <HAL_I2C_Init+0x260>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e006      	b.n	80028e6 <HAL_I2C_Init+0x92>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a77      	ldr	r2, [pc, #476]	; (8002ab8 <HAL_I2C_Init+0x264>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	bf94      	ite	ls
 80028e0:	2301      	movls	r3, #1
 80028e2:	2300      	movhi	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e0db      	b.n	8002aa6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a72      	ldr	r2, [pc, #456]	; (8002abc <HAL_I2C_Init+0x268>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0c9b      	lsrs	r3, r3, #18
 80028f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <HAL_I2C_Init+0x25c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d802      	bhi.n	8002928 <HAL_I2C_Init+0xd4>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3301      	adds	r3, #1
 8002926:	e009      	b.n	800293c <HAL_I2C_Init+0xe8>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	4a63      	ldr	r2, [pc, #396]	; (8002ac0 <HAL_I2C_Init+0x26c>)
 8002934:	fba2 2303 	umull	r2, r3, r2, r3
 8002938:	099b      	lsrs	r3, r3, #6
 800293a:	3301      	adds	r3, #1
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	430b      	orrs	r3, r1
 8002942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4956      	ldr	r1, [pc, #344]	; (8002ab0 <HAL_I2C_Init+0x25c>)
 8002958:	428b      	cmp	r3, r1
 800295a:	d80d      	bhi.n	8002978 <HAL_I2C_Init+0x124>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e59      	subs	r1, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fbb1 f3f3 	udiv	r3, r1, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b04      	cmp	r3, #4
 8002972:	bf38      	it	cc
 8002974:	2304      	movcc	r3, #4
 8002976:	e04f      	b.n	8002a18 <HAL_I2C_Init+0x1c4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d111      	bne.n	80029a4 <HAL_I2C_Init+0x150>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1e58      	subs	r0, r3, #1
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6859      	ldr	r1, [r3, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	e012      	b.n	80029ca <HAL_I2C_Init+0x176>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1e58      	subs	r0, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	0099      	lsls	r1, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Init+0x17e>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e022      	b.n	8002a18 <HAL_I2C_Init+0x1c4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10e      	bne.n	80029f8 <HAL_I2C_Init+0x1a4>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	1e58      	subs	r0, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	460b      	mov	r3, r1
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	440b      	add	r3, r1
 80029e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ec:	3301      	adds	r3, #1
 80029ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Init+0x1c4>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6859      	ldr	r1, [r3, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	0099      	lsls	r1, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	6809      	ldr	r1, [r1, #0]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6911      	ldr	r1, [r2, #16]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68d2      	ldr	r2, [r2, #12]
 8002a52:	4311      	orrs	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695a      	ldr	r2, [r3, #20]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	000186a0 	.word	0x000186a0
 8002ab4:	001e847f 	.word	0x001e847f
 8002ab8:	003d08ff 	.word	0x003d08ff
 8002abc:	431bde83 	.word	0x431bde83
 8002ac0:	10624dd3 	.word	0x10624dd3

08002ac4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	4608      	mov	r0, r1
 8002ace:	4611      	mov	r1, r2
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	817b      	strh	r3, [r7, #10]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	813b      	strh	r3, [r7, #8]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ade:	f7fe fff3 	bl	8001ac8 <HAL_GetTick>
 8002ae2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	f040 80d9 	bne.w	8002ca4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	2319      	movs	r3, #25
 8002af8:	2201      	movs	r2, #1
 8002afa:	496d      	ldr	r1, [pc, #436]	; (8002cb0 <HAL_I2C_Mem_Write+0x1ec>)
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f001 ff90 	bl	8004a22 <I2C_WaitOnFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_I2C_Mem_Write+0x56>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0c5      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x1e2>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d007      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2221      	movs	r2, #33	; 0x21
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a4d      	ldr	r2, [pc, #308]	; (8002cb4 <HAL_I2C_Mem_Write+0x1f0>)
 8002b80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b82:	88f8      	ldrh	r0, [r7, #6]
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4603      	mov	r3, r0
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f001 fc3a 	bl	800440c <I2C_RequestMemoryWrite>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d052      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e081      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f002 f811 	bl	8004bce <I2C_WaitOnTXEFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00d      	beq.n	8002bce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d107      	bne.n	8002bca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06b      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d11b      	bne.n	8002c44 <HAL_I2C_Mem_Write+0x180>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d017      	beq.n	8002c44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1aa      	bne.n	8002ba2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f001 fffd 	bl	8004c50 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00d      	beq.n	8002c78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d107      	bne.n	8002c74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e016      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	e000      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ca4:	2302      	movs	r3, #2
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	00100002 	.word	0x00100002
 8002cb4:	ffff0000 	.word	0xffff0000

08002cb8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08c      	sub	sp, #48	; 0x30
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	817b      	strh	r3, [r7, #10]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	813b      	strh	r3, [r7, #8]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cd2:	f7fe fef9 	bl	8001ac8 <HAL_GetTick>
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	f040 8123 	bne.w	8002f30 <HAL_I2C_Mem_Read_DMA+0x278>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cea:	4b94      	ldr	r3, [pc, #592]	; (8002f3c <HAL_I2C_Mem_Read_DMA+0x284>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	08db      	lsrs	r3, r3, #3
 8002cf0:	4a93      	ldr	r2, [pc, #588]	; (8002f40 <HAL_I2C_Mem_Read_DMA+0x288>)
 8002cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf6:	0a1a      	lsrs	r2, r3, #8
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009a      	lsls	r2, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d116      	bne.n	8002d3e <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0f9      	b.n	8002f32 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d0db      	beq.n	8002d04 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Mem_Read_DMA+0xa2>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0eb      	b.n	8002f32 <HAL_I2C_Mem_Read_DMA+0x27a>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2222      	movs	r2, #34	; 0x22
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8085 	beq.w	8002ed6 <HAL_I2C_Mem_Read_DMA+0x21e>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	4a5d      	ldr	r2, [pc, #372]	; (8002f48 <HAL_I2C_Mem_Read_DMA+0x290>)
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd8:	4a5c      	ldr	r2, [pc, #368]	; (8002f4c <HAL_I2C_Mem_Read_DMA+0x294>)
 8002dda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	2200      	movs	r2, #0
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	2200      	movs	r2, #0
 8002df2:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	2200      	movs	r2, #0
 8002dfa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3310      	adds	r3, #16
 8002e06:	4619      	mov	r1, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	f7ff f855 	bl	8001ec0 <HAL_DMA_Start_IT>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if (dmaxferstatus == HAL_OK)
 8002e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d144      	bne.n	8002eae <HAL_I2C_Mem_Read_DMA+0x1f6>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002e24:	88f8      	ldrh	r0, [r7, #6]
 8002e26:	893a      	ldrh	r2, [r7, #8]
 8002e28:	8979      	ldrh	r1, [r7, #10]
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	2323      	movs	r3, #35	; 0x23
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	4603      	mov	r3, r0
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f001 fb7d 	bl	8004534 <I2C_RequestMemoryRead>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Mem_Read_DMA+0x18c>
        {
          return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e076      	b.n	8002f32 <HAL_I2C_Mem_Read_DMA+0x27a>
        }

        if (hi2c->XferSize == 1U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d108      	bne.n	8002e5e <HAL_I2C_Mem_Read_DMA+0x1a6>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	e007      	b.n	8002e6e <HAL_I2C_Mem_Read_DMA+0x1b6>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	61bb      	str	r3, [r7, #24]
 8002e82:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e9a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	e03e      	b.n	8002f2c <HAL_I2C_Mem_Read_DMA+0x274>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f043 0210 	orr.w	r2, r3, #16
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02d      	b.n	8002f32 <HAL_I2C_Mem_Read_DMA+0x27a>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002ed6:	88f8      	ldrh	r0, [r7, #6]
 8002ed8:	893a      	ldrh	r2, [r7, #8]
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ede:	9301      	str	r3, [sp, #4]
 8002ee0:	2323      	movs	r3, #35	; 0x23
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f001 fb24 	bl	8004534 <I2C_RequestMemoryRead>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Mem_Read_DMA+0x23e>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e01d      	b.n	8002f32 <HAL_I2C_Mem_Read_DMA+0x27a>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f1a:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2C_Mem_Read_DMA+0x27a>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	14f8b589 	.word	0x14f8b589
 8002f44:	ffff0000 	.word	0xffff0000
 8002f48:	08004701 	.word	0x08004701
 8002f4c:	080048ab 	.word	0x080048ab

08002f50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b10      	cmp	r3, #16
 8002f7e:	d003      	beq.n	8002f88 <HAL_I2C_EV_IRQHandler+0x38>
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	f040 80b6 	bne.w	80030f4 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10d      	bne.n	8002fbe <HAL_I2C_EV_IRQHandler+0x6e>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002fa8:	d003      	beq.n	8002fb2 <HAL_I2C_EV_IRQHandler+0x62>
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002fb0:	d101      	bne.n	8002fb6 <HAL_I2C_EV_IRQHandler+0x66>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_I2C_EV_IRQHandler+0x68>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	f000 8127 	beq.w	800320c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x92>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d006      	beq.n	8002fe2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f001 feab 	bl	8004d30 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fc75 	bl	80038ca <I2C_Master_SB>
 8002fe0:	e087      	b.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	08db      	lsrs	r3, r3, #3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d009      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0xb2>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	0a5b      	lsrs	r3, r3, #9
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fceb 	bl	80039d6 <I2C_Master_ADD10>
 8003000:	e077      	b.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	085b      	lsrs	r3, r3, #1
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0xd2>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	0a5b      	lsrs	r3, r3, #9
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fd05 	bl	8003a2a <I2C_Master_ADDR>
 8003020:	e067      	b.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	089b      	lsrs	r3, r3, #2
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d030      	beq.n	8003090 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003038:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800303c:	f000 80e8 	beq.w	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	09db      	lsrs	r3, r3, #7
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00f      	beq.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	0a9b      	lsrs	r3, r3, #10
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	089b      	lsrs	r3, r3, #2
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f941 	bl	80032ec <I2C_MasterTransmit_TXE>
 800306a:	e042      	b.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80cb 	beq.w	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	0a5b      	lsrs	r3, r3, #9
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80c4 	beq.w	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f9cb 	bl	8003424 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800308e:	e0bf      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	f000 80b7 	beq.w	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00f      	beq.n	80030ce <HAL_I2C_EV_IRQHandler+0x17e>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	0a9b      	lsrs	r3, r3, #10
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d009      	beq.n	80030ce <HAL_I2C_EV_IRQHandler+0x17e>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fa93 	bl	80035f2 <I2C_MasterReceive_RXNE>
 80030cc:	e011      	b.n	80030f2 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 809a 	beq.w	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	0a5b      	lsrs	r3, r3, #9
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8093 	beq.w	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fb03 	bl	80036f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030f0:	e08e      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
 80030f2:	e08d      	b.n	8003210 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d004      	beq.n	8003106 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e007      	b.n	8003116 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	085b      	lsrs	r3, r3, #1
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d012      	beq.n	8003148 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	0a5b      	lsrs	r3, r3, #9
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fec1 	bl	8003ec8 <I2C_Slave_ADDR>
 8003146:	e066      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x218>
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	0a5b      	lsrs	r3, r3, #9
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fef5 	bl	8003f50 <I2C_Slave_STOPF>
 8003166:	e056      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	2b21      	cmp	r3, #33	; 0x21
 800316c:	d002      	beq.n	8003174 <HAL_I2C_EV_IRQHandler+0x224>
 800316e:	7bbb      	ldrb	r3, [r7, #14]
 8003170:	2b29      	cmp	r3, #41	; 0x29
 8003172:	d125      	bne.n	80031c0 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	09db      	lsrs	r3, r3, #7
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00f      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x250>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_I2C_EV_IRQHandler+0x250>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d103      	bne.n	80031a0 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 fdd7 	bl	8003d4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800319e:	e039      	b.n	8003214 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d033      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x2c4>
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	0a5b      	lsrs	r3, r3, #9
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d02d      	beq.n	8003214 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fe04 	bl	8003dc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031be:	e029      	b.n	8003214 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	099b      	lsrs	r3, r3, #6
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00f      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x29c>
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	0a9b      	lsrs	r3, r3, #10
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_I2C_EV_IRQHandler+0x29c>
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	089b      	lsrs	r3, r3, #2
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fe0f 	bl	8003e08 <I2C_SlaveReceive_RXNE>
 80031ea:	e014      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00e      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0a5b      	lsrs	r3, r3, #9
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fe3d 	bl	8003e84 <I2C_SlaveReceive_BTF>
 800320a:	e004      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800320c:	bf00      	nop
 800320e:	e002      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003214:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
 8003278:	4613      	mov	r3, r2
 800327a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003302:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	2b00      	cmp	r3, #0
 8003310:	d150      	bne.n	80033b4 <I2C_MasterTransmit_TXE+0xc8>
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b21      	cmp	r3, #33	; 0x21
 8003316:	d14d      	bne.n	80033b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b08      	cmp	r3, #8
 800331c:	d01d      	beq.n	800335a <I2C_MasterTransmit_TXE+0x6e>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2b20      	cmp	r3, #32
 8003322:	d01a      	beq.n	800335a <I2C_MasterTransmit_TXE+0x6e>
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800332a:	d016      	beq.n	800335a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800333a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2211      	movs	r2, #17
 8003340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ff62 	bl	800321c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003358:	e060      	b.n	800341c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003368:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003378:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d107      	bne.n	80033a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff7d 	bl	800329c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033a2:	e03b      	b.n	800341c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff35 	bl	800321c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033b2:	e033      	b.n	800341c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b21      	cmp	r3, #33	; 0x21
 80033b8:	d005      	beq.n	80033c6 <I2C_MasterTransmit_TXE+0xda>
 80033ba:	7bbb      	ldrb	r3, [r7, #14]
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	d12d      	bne.n	800341c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b22      	cmp	r3, #34	; 0x22
 80033c4:	d12a      	bne.n	800341c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d108      	bne.n	80033e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80033e0:	e01c      	b.n	800341c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d103      	bne.n	80033f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f898 	bl	8003524 <I2C_MemoryTransmit_TXE_BTF>
}
 80033f4:	e012      	b.n	800341c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	781a      	ldrb	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800341a:	e7ff      	b.n	800341c <I2C_MasterTransmit_TXE+0x130>
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b21      	cmp	r3, #33	; 0x21
 800343c:	d165      	bne.n	800350a <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d012      	beq.n	800346e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800346c:	e056      	b.n	800351c <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d01d      	beq.n	80034b0 <I2C_MasterTransmit_BTF+0x8c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b20      	cmp	r3, #32
 8003478:	d01a      	beq.n	80034b0 <I2C_MasterTransmit_BTF+0x8c>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003480:	d016      	beq.n	80034b0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003490:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2211      	movs	r2, #17
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f7ff feb7 	bl	800321c <HAL_I2C_MasterTxCpltCallback>
}
 80034ae:	e035      	b.n	800351c <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034be:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ce:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b40      	cmp	r3, #64	; 0x40
 80034e8:	d107      	bne.n	80034fa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fed2 	bl	800329c <HAL_I2C_MemTxCpltCallback>
}
 80034f8:	e010      	b.n	800351c <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff fe8a 	bl	800321c <HAL_I2C_MasterTxCpltCallback>
}
 8003508:	e008      	b.n	800351c <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b40      	cmp	r3, #64	; 0x40
 8003514:	d102      	bne.n	800351c <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f804 	bl	8003524 <I2C_MemoryTransmit_TXE_BTF>
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11d      	bne.n	8003570 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10b      	bne.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003552:	e048      	b.n	80035e6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003558:	b29b      	uxth	r3, r3
 800355a:	121b      	asrs	r3, r3, #8
 800355c:	b2da      	uxtb	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800356e:	e03a      	b.n	80035e6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003574:	2b01      	cmp	r3, #1
 8003576:	d10b      	bne.n	8003590 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800357c:	b2da      	uxtb	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800358e:	e02a      	b.n	80035e6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	2b02      	cmp	r3, #2
 8003596:	d126      	bne.n	80035e6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b22      	cmp	r3, #34	; 0x22
 80035a2:	d108      	bne.n	80035b6 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b2:	601a      	str	r2, [r3, #0]
}
 80035b4:	e017      	b.n	80035e6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b21      	cmp	r3, #33	; 0x21
 80035c0:	d111      	bne.n	80035e6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b22      	cmp	r3, #34	; 0x22
 8003604:	d173      	bne.n	80036ee <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d920      	bls.n	8003656 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691a      	ldr	r2, [r3, #16]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b03      	cmp	r3, #3
 8003642:	d154      	bne.n	80036ee <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003652:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003654:	e04b      	b.n	80036ee <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	2b02      	cmp	r3, #2
 800365c:	d047      	beq.n	80036ee <I2C_MasterReceive_RXNE+0xfc>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d002      	beq.n	800366a <I2C_MasterReceive_RXNE+0x78>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d141      	bne.n	80036ee <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003678:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003688:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b40      	cmp	r3, #64	; 0x40
 80036c2:	d10a      	bne.n	80036da <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff fdec 	bl	80032b0 <HAL_I2C_MemRxCpltCallback>
}
 80036d8:	e009      	b.n	80036ee <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2212      	movs	r2, #18
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fda1 	bl	8003230 <HAL_I2C_MasterRxCpltCallback>
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b084      	sub	sp, #16
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b04      	cmp	r3, #4
 800370c:	d11b      	bne.n	8003746 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691a      	ldr	r2, [r3, #16]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29a      	uxth	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003744:	e0bd      	b.n	80038c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d129      	bne.n	80037a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800375e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00a      	beq.n	800377c <I2C_MasterReceive_BTF+0x86>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b02      	cmp	r3, #2
 800376a:	d007      	beq.n	800377c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80037a2:	e08e      	b.n	80038c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d176      	bne.n	800389c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d002      	beq.n	80037ba <I2C_MasterReceive_BTF+0xc4>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b10      	cmp	r3, #16
 80037b8:	d108      	bne.n	80037cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e019      	b.n	8003800 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d002      	beq.n	80037d8 <I2C_MasterReceive_BTF+0xe2>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d108      	bne.n	80037ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	e00a      	b.n	8003800 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d007      	beq.n	8003800 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800385a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b40      	cmp	r3, #64	; 0x40
 800386e:	d10a      	bne.n	8003886 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7ff fd16 	bl	80032b0 <HAL_I2C_MemRxCpltCallback>
}
 8003884:	e01d      	b.n	80038c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2212      	movs	r2, #18
 8003892:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff fccb 	bl	8003230 <HAL_I2C_MasterRxCpltCallback>
}
 800389a:	e012      	b.n	80038c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d117      	bne.n	800390e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038f8:	e067      	b.n	80039ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	611a      	str	r2, [r3, #16]
}
 800390c:	e05d      	b.n	80039ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003916:	d133      	bne.n	8003980 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b21      	cmp	r3, #33	; 0x21
 8003922:	d109      	bne.n	8003938 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003934:	611a      	str	r2, [r3, #16]
 8003936:	e008      	b.n	800394a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <I2C_Master_SB+0x92>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d108      	bne.n	800396e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	2b00      	cmp	r3, #0
 8003962:	d032      	beq.n	80039ca <I2C_Master_SB+0x100>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396a:	2b00      	cmp	r3, #0
 800396c:	d02d      	beq.n	80039ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397c:	605a      	str	r2, [r3, #4]
}
 800397e:	e024      	b.n	80039ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10e      	bne.n	80039a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398c:	b29b      	uxth	r3, r3
 800398e:	11db      	asrs	r3, r3, #7
 8003990:	b2db      	uxtb	r3, r3
 8003992:	f003 0306 	and.w	r3, r3, #6
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f063 030f 	orn	r3, r3, #15
 800399c:	b2da      	uxtb	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	611a      	str	r2, [r3, #16]
}
 80039a4:	e011      	b.n	80039ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10d      	bne.n	80039ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	11db      	asrs	r3, r3, #7
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f003 0306 	and.w	r3, r3, #6
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	f063 030e 	orn	r3, r3, #14
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	611a      	str	r2, [r3, #16]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d103      	bne.n	80039fa <I2C_Master_ADD10+0x24>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d011      	beq.n	8003a1e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <I2C_Master_ADD10+0x38>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a1c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b091      	sub	sp, #68	; 0x44
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b22      	cmp	r3, #34	; 0x22
 8003a52:	f040 8169 	bne.w	8003d28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <I2C_Master_ADDR+0x54>
 8003a5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d10b      	bne.n	8003a7e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	e160      	b.n	8003d40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d11d      	bne.n	8003ac2 <I2C_Master_ADDR+0x98>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a8e:	d118      	bne.n	8003ac2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a90:	2300      	movs	r3, #0
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	651a      	str	r2, [r3, #80]	; 0x50
 8003ac0:	e13e      	b.n	8003d40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d113      	bne.n	8003af4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e115      	b.n	8003d20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	f040 808a 	bne.w	8003c14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b06:	d137      	bne.n	8003b78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b26:	d113      	bne.n	8003b50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	627b      	str	r3, [r7, #36]	; 0x24
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	e0e7      	b.n	8003d20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b50:	2300      	movs	r3, #0
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	623b      	str	r3, [r7, #32]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	e0d3      	b.n	8003d20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d02e      	beq.n	8003bdc <I2C_Master_ADDR+0x1b2>
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d02b      	beq.n	8003bdc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d102      	bne.n	8003b90 <I2C_Master_ADDR+0x166>
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d125      	bne.n	8003bdc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00e      	beq.n	8003bb4 <I2C_Master_ADDR+0x18a>
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d00b      	beq.n	8003bb4 <I2C_Master_ADDR+0x18a>
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d008      	beq.n	8003bb4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	e007      	b.n	8003bc4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	61fb      	str	r3, [r7, #28]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	e0a1      	b.n	8003d20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	61bb      	str	r3, [r7, #24]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e085      	b.n	8003d20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d14d      	bne.n	8003cba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d016      	beq.n	8003c52 <I2C_Master_ADDR+0x228>
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d013      	beq.n	8003c52 <I2C_Master_ADDR+0x228>
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d010      	beq.n	8003c52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e007      	b.n	8003c62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c70:	d117      	bne.n	8003ca2 <I2C_Master_ADDR+0x278>
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c78:	d00b      	beq.n	8003c92 <I2C_Master_ADDR+0x268>
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d008      	beq.n	8003c92 <I2C_Master_ADDR+0x268>
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d005      	beq.n	8003c92 <I2C_Master_ADDR+0x268>
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d002      	beq.n	8003c92 <I2C_Master_ADDR+0x268>
 8003c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d107      	bne.n	8003ca2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ca0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	e032      	b.n	8003d20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd8:	d117      	bne.n	8003d0a <I2C_Master_ADDR+0x2e0>
 8003cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ce0:	d00b      	beq.n	8003cfa <I2C_Master_ADDR+0x2d0>
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d008      	beq.n	8003cfa <I2C_Master_ADDR+0x2d0>
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d005      	beq.n	8003cfa <I2C_Master_ADDR+0x2d0>
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d002      	beq.n	8003cfa <I2C_Master_ADDR+0x2d0>
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d107      	bne.n	8003d0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d26:	e00b      	b.n	8003d40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	e7ff      	b.n	8003d40 <I2C_Master_ADDR+0x316>
 8003d40:	bf00      	nop
 8003d42:	3744      	adds	r7, #68	; 0x44
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02b      	beq.n	8003dbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d114      	bne.n	8003dbe <I2C_SlaveTransmit_TXE+0x72>
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b29      	cmp	r3, #41	; 0x29
 8003d98:	d111      	bne.n	8003dbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003da8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2221      	movs	r2, #33	; 0x21
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2228      	movs	r2, #40	; 0x28
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f7ff fa43 	bl	8003244 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d011      	beq.n	8003dfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d02c      	beq.n	8003e7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d114      	bne.n	8003e7c <I2C_SlaveReceive_RXNE+0x74>
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	2b2a      	cmp	r3, #42	; 0x2a
 8003e56:	d111      	bne.n	8003e7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2222      	movs	r2, #34	; 0x22
 8003e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2228      	movs	r2, #40	; 0x28
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7ff f9ee 	bl	8003258 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d012      	beq.n	8003ebc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ee2:	2b28      	cmp	r3, #40	; 0x28
 8003ee4:	d127      	bne.n	8003f36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	09db      	lsrs	r3, r3, #7
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	81bb      	strh	r3, [r7, #12]
 8003f18:	e002      	b.n	8003f20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f28:	89ba      	ldrh	r2, [r7, #12]
 8003f2a:	7bfb      	ldrb	r3, [r7, #15]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff f99c 	bl	800326c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f34:	e008      	b.n	8003f48 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0202 	mvn.w	r2, #2
 8003f3e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f6e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0201 	orr.w	r2, r2, #1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fac:	d172      	bne.n	8004094 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b22      	cmp	r3, #34	; 0x22
 8003fb2:	d002      	beq.n	8003fba <I2C_Slave_STOPF+0x6a>
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fb8:	d135      	bne.n	8004026 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fe f968 	bl	80022c8 <HAL_DMA_GetState>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d049      	beq.n	8004092 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004002:	4a69      	ldr	r2, [pc, #420]	; (80041a8 <I2C_Slave_STOPF+0x258>)
 8004004:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd ffb0 	bl	8001f70 <HAL_DMA_Abort_IT>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03d      	beq.n	8004092 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004020:	4610      	mov	r0, r2
 8004022:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004024:	e035      	b.n	8004092 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b29a      	uxth	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004042:	f043 0204 	orr.w	r2, r3, #4
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004058:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	4618      	mov	r0, r3
 8004060:	f7fe f932 	bl	80022c8 <HAL_DMA_GetState>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d014      	beq.n	8004094 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406e:	4a4e      	ldr	r2, [pc, #312]	; (80041a8 <I2C_Slave_STOPF+0x258>)
 8004070:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd ff7a 	bl	8001f70 <HAL_DMA_Abort_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800408c:	4610      	mov	r0, r2
 800408e:	4798      	blx	r3
 8004090:	e000      	b.n	8004094 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004092:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d03e      	beq.n	800411c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d112      	bne.n	80040d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d112      	bne.n	8004106 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	f043 0204 	orr.w	r2, r3, #4
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f843 	bl	80041b0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800412a:	e039      	b.n	80041a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b2a      	cmp	r3, #42	; 0x2a
 8004130:	d109      	bne.n	8004146 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2228      	movs	r2, #40	; 0x28
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff f889 	bl	8003258 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b28      	cmp	r3, #40	; 0x28
 8004150:	d111      	bne.n	8004176 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <I2C_Slave_STOPF+0x25c>)
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff f88a 	bl	8003288 <HAL_I2C_ListenCpltCallback>
}
 8004174:	e014      	b.n	80041a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	d002      	beq.n	8004184 <I2C_Slave_STOPF+0x234>
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	2b22      	cmp	r3, #34	; 0x22
 8004182:	d10d      	bne.n	80041a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff f85c 	bl	8003258 <HAL_I2C_SlaveRxCpltCallback>
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	08004925 	.word	0x08004925
 80041ac:	ffff0000 	.word	0xffff0000

080041b0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d10a      	bne.n	80041e2 <I2C_ITError+0x32>
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	2b22      	cmp	r3, #34	; 0x22
 80041d0:	d107      	bne.n	80041e2 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041e8:	2b28      	cmp	r3, #40	; 0x28
 80041ea:	d107      	bne.n	80041fc <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2228      	movs	r2, #40	; 0x28
 80041f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80041fa:	e015      	b.n	8004228 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800420a:	d006      	beq.n	800421a <I2C_ITError+0x6a>
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b60      	cmp	r3, #96	; 0x60
 8004210:	d003      	beq.n	800421a <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004236:	d162      	bne.n	80042fe <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004246:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b01      	cmp	r3, #1
 8004254:	d020      	beq.n	8004298 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	4a6a      	ldr	r2, [pc, #424]	; (8004404 <I2C_ITError+0x254>)
 800425c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fe84 	bl	8001f70 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8089 	beq.w	8004382 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0201 	bic.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004292:	4610      	mov	r0, r2
 8004294:	4798      	blx	r3
 8004296:	e074      	b.n	8004382 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	4a59      	ldr	r2, [pc, #356]	; (8004404 <I2C_ITError+0x254>)
 800429e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd fe63 	bl	8001f70 <HAL_DMA_Abort_IT>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d068      	beq.n	8004382 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d10b      	bne.n	80042d6 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042f8:	4610      	mov	r0, r2
 80042fa:	4798      	blx	r3
 80042fc:	e041      	b.n	8004382 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b60      	cmp	r3, #96	; 0x60
 8004308:	d125      	bne.n	8004356 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004322:	2b40      	cmp	r3, #64	; 0x40
 8004324:	d10b      	bne.n	800433e <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe ffc2 	bl	80032d8 <HAL_I2C_AbortCpltCallback>
 8004354:	e015      	b.n	8004382 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b40      	cmp	r3, #64	; 0x40
 8004362:	d10b      	bne.n	800437c <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	691a      	ldr	r2, [r3, #16]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fe ffa1 	bl	80032c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10e      	bne.n	80043b0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d104      	bne.n	80043b0 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d007      	beq.n	80043c0 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d113      	bne.n	80043fc <I2C_ITError+0x24c>
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b28      	cmp	r3, #40	; 0x28
 80043d8:	d110      	bne.n	80043fc <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <I2C_ITError+0x258>)
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fe ff46 	bl	8003288 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80043fc:	bf00      	nop
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08004925 	.word	0x08004925
 8004408:	ffff0000 	.word	0xffff0000

0800440c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	4608      	mov	r0, r1
 8004416:	4611      	mov	r1, r2
 8004418:	461a      	mov	r2, r3
 800441a:	4603      	mov	r3, r0
 800441c:	817b      	strh	r3, [r7, #10]
 800441e:	460b      	mov	r3, r1
 8004420:	813b      	strh	r3, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004434:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2200      	movs	r2, #0
 800443e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 faed 	bl	8004a22 <I2C_WaitOnFlagUntilTimeout>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e05f      	b.n	8004528 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	461a      	mov	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004476:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	492c      	ldr	r1, [pc, #176]	; (8004530 <I2C_RequestMemoryWrite+0x124>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 fb26 	bl	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e04c      	b.n	8004528 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a6:	6a39      	ldr	r1, [r7, #32]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fb90 	bl	8004bce <I2C_WaitOnTXEFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00d      	beq.n	80044d0 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d107      	bne.n	80044cc <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e02b      	b.n	8004528 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d6:	893b      	ldrh	r3, [r7, #8]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	611a      	str	r2, [r3, #16]
 80044e0:	e021      	b.n	8004526 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044e2:	893b      	ldrh	r3, [r7, #8]
 80044e4:	0a1b      	lsrs	r3, r3, #8
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	6a39      	ldr	r1, [r7, #32]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fb6a 	bl	8004bce <I2C_WaitOnTXEFlagUntilTimeout>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00d      	beq.n	800451c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	2b04      	cmp	r3, #4
 8004506:	d107      	bne.n	8004518 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004516:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e005      	b.n	8004528 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800451c:	893b      	ldrh	r3, [r7, #8]
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	00010002 	.word	0x00010002

08004534 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b088      	sub	sp, #32
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	4608      	mov	r0, r1
 800453e:	4611      	mov	r1, r2
 8004540:	461a      	mov	r2, r3
 8004542:	4603      	mov	r3, r0
 8004544:	817b      	strh	r3, [r7, #10]
 8004546:	460b      	mov	r3, r1
 8004548:	813b      	strh	r3, [r7, #8]
 800454a:	4613      	mov	r3, r2
 800454c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800455c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800456c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	2200      	movs	r2, #0
 8004576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fa51 	bl	8004a22 <I2C_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e0a9      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045a0:	897b      	ldrh	r3, [r7, #10]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	6a3a      	ldr	r2, [r7, #32]
 80045b4:	4951      	ldr	r1, [pc, #324]	; (80046fc <I2C_RequestMemoryRead+0x1c8>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fa8a 	bl	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e096      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	6a39      	ldr	r1, [r7, #32]
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 faf4 	bl	8004bce <I2C_WaitOnTXEFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d107      	bne.n	8004604 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004602:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e075      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004608:	88fb      	ldrh	r3, [r7, #6]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
 8004618:	e021      	b.n	800465e <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800461a:	893b      	ldrh	r3, [r7, #8]
 800461c:	0a1b      	lsrs	r3, r3, #8
 800461e:	b29b      	uxth	r3, r3
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800462a:	6a39      	ldr	r1, [r7, #32]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 face 	bl	8004bce <I2C_WaitOnTXEFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00d      	beq.n	8004654 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	2b04      	cmp	r3, #4
 800463e:	d107      	bne.n	8004650 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800464e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e04f      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004654:	893b      	ldrh	r3, [r7, #8]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004660:	6a39      	ldr	r1, [r7, #32]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fab3 	bl	8004bce <I2C_WaitOnTXEFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	2b04      	cmp	r3, #4
 8004674:	d107      	bne.n	8004686 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e034      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004698:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	9300      	str	r3, [sp, #0]
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f9bb 	bl	8004a22 <I2C_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00c      	beq.n	80046cc <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e013      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f043 0301 	orr.w	r3, r3, #1
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	4906      	ldr	r1, [pc, #24]	; (80046fc <I2C_RequestMemoryRead+0x1c8>)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f9f4 	bl	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010002 	.word	0x00010002

08004700 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800471c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004732:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004740:	2200      	movs	r2, #0
 8004742:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	2200      	movs	r2, #0
 8004752:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800475a:	2b21      	cmp	r3, #33	; 0x21
 800475c:	d007      	beq.n	800476e <I2C_DMAXferCplt+0x6e>
 800475e:	7cfb      	ldrb	r3, [r7, #19]
 8004760:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004764:	2b22      	cmp	r3, #34	; 0x22
 8004766:	d131      	bne.n	80047cc <I2C_DMAXferCplt+0xcc>
 8004768:	7cbb      	ldrb	r3, [r7, #18]
 800476a:	2b20      	cmp	r3, #32
 800476c:	d12e      	bne.n	80047cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800477c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b29      	cmp	r3, #41	; 0x29
 8004788:	d10a      	bne.n	80047a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2221      	movs	r2, #33	; 0x21
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2228      	movs	r2, #40	; 0x28
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004798:	6978      	ldr	r0, [r7, #20]
 800479a:	f7fe fd53 	bl	8003244 <HAL_I2C_SlaveTxCpltCallback>
 800479e:	e00c      	b.n	80047ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b2a      	cmp	r3, #42	; 0x2a
 80047a4:	d109      	bne.n	80047ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2222      	movs	r2, #34	; 0x22
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	2228      	movs	r2, #40	; 0x28
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f7fe fd4f 	bl	8003258 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80047c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80047ca:	e06a      	b.n	80048a2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d064      	beq.n	80048a2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004800:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004808:	d009      	beq.n	800481e <I2C_DMAXferCplt+0x11e>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d006      	beq.n	800481e <I2C_DMAXferCplt+0x11e>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004816:	d002      	beq.n	800481e <I2C_DMAXferCplt+0x11e>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2b20      	cmp	r3, #32
 800481c:	d107      	bne.n	800482e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800482c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800483c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f7fe fd31 	bl	80032c4 <HAL_I2C_ErrorCallback>
}
 8004862:	e01e      	b.n	80048a2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b40      	cmp	r3, #64	; 0x40
 8004876:	d10a      	bne.n	800488e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004886:	6978      	ldr	r0, [r7, #20]
 8004888:	f7fe fd12 	bl	80032b0 <HAL_I2C_MemRxCpltCallback>
}
 800488c:	e009      	b.n	80048a2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2212      	movs	r2, #18
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f7fe fcc7 	bl	8003230 <HAL_I2C_MasterRxCpltCallback>
}
 80048a2:	bf00      	nop
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048c4:	2200      	movs	r2, #0
 80048c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	2200      	movs	r2, #0
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7fd fd03 	bl	80022e4 <HAL_DMA_GetError>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d01b      	beq.n	800491c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0210 	orr.w	r2, r3, #16
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7fe fcd4 	bl	80032c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	2200      	movs	r2, #0
 8004948:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	2200      	movs	r2, #0
 8004958:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004968:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497c:	2200      	movs	r2, #0
 800497e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	2200      	movs	r2, #0
 800498e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f022 0201 	bic.w	r2, r2, #1
 800499e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b60      	cmp	r3, #96	; 0x60
 80049aa:	d10e      	bne.n	80049ca <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7fe fc88 	bl	80032d8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049c8:	e027      	b.n	8004a1a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049d0:	2b28      	cmp	r3, #40	; 0x28
 80049d2:	d117      	bne.n	8004a04 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2228      	movs	r2, #40	; 0x28
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004a02:	e007      	b.n	8004a14 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7fe fc55 	bl	80032c4 <HAL_I2C_ErrorCallback>
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a32:	e025      	b.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a3a:	d021      	beq.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3c:	f7fd f844 	bl	8001ac8 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d116      	bne.n	8004a80 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e023      	b.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	0c1b      	lsrs	r3, r3, #16
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d10d      	bne.n	8004aa6 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	43da      	mvns	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	4013      	ands	r3, r2
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2301      	moveq	r3, #1
 8004a9e:	2300      	movne	r3, #0
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	e00c      	b.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	43da      	mvns	r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf0c      	ite	eq
 8004ab8:	2301      	moveq	r3, #1
 8004aba:	2300      	movne	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d0b6      	beq.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ade:	e051      	b.n	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aee:	d123      	bne.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0204 	orr.w	r2, r3, #4
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e046      	b.n	8004bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d021      	beq.n	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b40:	f7fc ffc2 	bl	8001ac8 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d116      	bne.n	8004b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	f043 0220 	orr.w	r2, r3, #32
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e020      	b.n	8004bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	0c1b      	lsrs	r3, r3, #16
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d10c      	bne.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	43da      	mvns	r2, r3
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	e00b      	b.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	43da      	mvns	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d18d      	bne.n	8004ae0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bda:	e02d      	b.n	8004c38 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f878 	bl	8004cd2 <I2C_IsAcknowledgeFailed>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e02d      	b.n	8004c48 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf2:	d021      	beq.n	8004c38 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fc ff68 	bl	8001ac8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e007      	b.n	8004c48 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d1ca      	bne.n	8004bdc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c5c:	e02d      	b.n	8004cba <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f837 	bl	8004cd2 <I2C_IsAcknowledgeFailed>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e02d      	b.n	8004cca <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c74:	d021      	beq.n	8004cba <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c76:	f7fc ff27 	bl	8001ac8 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d302      	bcc.n	8004c8c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d116      	bne.n	8004cba <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0220 	orr.w	r2, r3, #32
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e007      	b.n	8004cca <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d1ca      	bne.n	8004c5e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce8:	d11b      	bne.n	8004d22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cf2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0204 	orr.w	r2, r3, #4
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004d40:	d103      	bne.n	8004d4a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004d48:	e007      	b.n	8004d5a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004d52:	d102      	bne.n	8004d5a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2208      	movs	r2, #8
 8004d58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e25b      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d075      	beq.n	8004e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d86:	4ba3      	ldr	r3, [pc, #652]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00c      	beq.n	8004dac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d92:	4ba0      	ldr	r3, [pc, #640]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d9a:	2b08      	cmp	r3, #8
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9e:	4b9d      	ldr	r3, [pc, #628]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004daa:	d10b      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4b99      	ldr	r3, [pc, #612]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05b      	beq.n	8004e70 <HAL_RCC_OscConfig+0x108>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d157      	bne.n	8004e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e236      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCC_OscConfig+0x74>
 8004dce:	4b91      	ldr	r3, [pc, #580]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a90      	ldr	r2, [pc, #576]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e01d      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCC_OscConfig+0x98>
 8004de6:	4b8b      	ldr	r3, [pc, #556]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a8a      	ldr	r2, [pc, #552]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004df0:	6013      	str	r3, [r2, #0]
 8004df2:	4b88      	ldr	r3, [pc, #544]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a87      	ldr	r2, [pc, #540]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e00b      	b.n	8004e18 <HAL_RCC_OscConfig+0xb0>
 8004e00:	4b84      	ldr	r3, [pc, #528]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a83      	ldr	r2, [pc, #524]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	4b81      	ldr	r3, [pc, #516]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a80      	ldr	r2, [pc, #512]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d013      	beq.n	8004e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fc fe52 	bl	8001ac8 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e28:	f7fc fe4e 	bl	8001ac8 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b64      	cmp	r3, #100	; 0x64
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e1fb      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d0f0      	beq.n	8004e28 <HAL_RCC_OscConfig+0xc0>
 8004e46:	e014      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fc fe3e 	bl	8001ac8 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e50:	f7fc fe3a 	bl	8001ac8 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b64      	cmp	r3, #100	; 0x64
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e1e7      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	4b6c      	ldr	r3, [pc, #432]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0xe8>
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d063      	beq.n	8004f46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e7e:	4b65      	ldr	r3, [pc, #404]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00b      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e8a:	4b62      	ldr	r3, [pc, #392]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d11c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e96:	4b5f      	ldr	r3, [pc, #380]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d116      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ea2:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d001      	beq.n	8004eba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e1bb      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eba:	4b56      	ldr	r3, [pc, #344]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4952      	ldr	r1, [pc, #328]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ece:	e03a      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed8:	4b4f      	ldr	r3, [pc, #316]	; (8005018 <HAL_RCC_OscConfig+0x2b0>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fc fdf3 	bl	8001ac8 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ee6:	f7fc fdef 	bl	8001ac8 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e19c      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	4b46      	ldr	r3, [pc, #280]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f04:	4b43      	ldr	r3, [pc, #268]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4940      	ldr	r1, [pc, #256]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	e015      	b.n	8004f46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f1a:	4b3f      	ldr	r3, [pc, #252]	; (8005018 <HAL_RCC_OscConfig+0x2b0>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fc fdd2 	bl	8001ac8 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f28:	f7fc fdce 	bl	8001ac8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e17b      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d030      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d016      	beq.n	8004f88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f5a:	4b30      	ldr	r3, [pc, #192]	; (800501c <HAL_RCC_OscConfig+0x2b4>)
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f60:	f7fc fdb2 	bl	8001ac8 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fc fdae 	bl	8001ac8 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e15b      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	4b26      	ldr	r3, [pc, #152]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0x200>
 8004f86:	e015      	b.n	8004fb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_RCC_OscConfig+0x2b4>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8e:	f7fc fd9b 	bl	8001ac8 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f96:	f7fc fd97 	bl	8001ac8 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e144      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80a0 	beq.w	8005102 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	4b0f      	ldr	r3, [pc, #60]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fe2:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff2:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_OscConfig+0x2b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d121      	bne.n	8005042 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_RCC_OscConfig+0x2b8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a07      	ldr	r2, [pc, #28]	; (8005020 <HAL_RCC_OscConfig+0x2b8>)
 8005004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500a:	f7fc fd5d 	bl	8001ac8 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	e011      	b.n	8005036 <HAL_RCC_OscConfig+0x2ce>
 8005012:	bf00      	nop
 8005014:	40023800 	.word	0x40023800
 8005018:	42470000 	.word	0x42470000
 800501c:	42470e80 	.word	0x42470e80
 8005020:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005024:	f7fc fd50 	bl	8001ac8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e0fd      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005036:	4b81      	ldr	r3, [pc, #516]	; (800523c <HAL_RCC_OscConfig+0x4d4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d106      	bne.n	8005058 <HAL_RCC_OscConfig+0x2f0>
 800504a:	4b7d      	ldr	r3, [pc, #500]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 800504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504e:	4a7c      	ldr	r2, [pc, #496]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005050:	f043 0301 	orr.w	r3, r3, #1
 8005054:	6713      	str	r3, [r2, #112]	; 0x70
 8005056:	e01c      	b.n	8005092 <HAL_RCC_OscConfig+0x32a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b05      	cmp	r3, #5
 800505e:	d10c      	bne.n	800507a <HAL_RCC_OscConfig+0x312>
 8005060:	4b77      	ldr	r3, [pc, #476]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4a76      	ldr	r2, [pc, #472]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005066:	f043 0304 	orr.w	r3, r3, #4
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
 800506c:	4b74      	ldr	r3, [pc, #464]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	4a73      	ldr	r2, [pc, #460]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005072:	f043 0301 	orr.w	r3, r3, #1
 8005076:	6713      	str	r3, [r2, #112]	; 0x70
 8005078:	e00b      	b.n	8005092 <HAL_RCC_OscConfig+0x32a>
 800507a:	4b71      	ldr	r3, [pc, #452]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	4a70      	ldr	r2, [pc, #448]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	6713      	str	r3, [r2, #112]	; 0x70
 8005086:	4b6e      	ldr	r3, [pc, #440]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	4a6d      	ldr	r2, [pc, #436]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 800508c:	f023 0304 	bic.w	r3, r3, #4
 8005090:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d015      	beq.n	80050c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509a:	f7fc fd15 	bl	8001ac8 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a0:	e00a      	b.n	80050b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a2:	f7fc fd11 	bl	8001ac8 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e0bc      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050bc:	f003 0302 	and.w	r3, r3, #2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d0ee      	beq.n	80050a2 <HAL_RCC_OscConfig+0x33a>
 80050c4:	e014      	b.n	80050f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c6:	f7fc fcff 	bl	8001ac8 <HAL_GetTick>
 80050ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050cc:	e00a      	b.n	80050e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050ce:	f7fc fcfb 	bl	8001ac8 <HAL_GetTick>
 80050d2:	4602      	mov	r2, r0
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	1ad3      	subs	r3, r2, r3
 80050d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050dc:	4293      	cmp	r3, r2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e0a6      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e4:	4b56      	ldr	r3, [pc, #344]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1ee      	bne.n	80050ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f6:	4b52      	ldr	r3, [pc, #328]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a51      	ldr	r2, [pc, #324]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 80050fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8092 	beq.w	8005230 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800510c:	4b4c      	ldr	r3, [pc, #304]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 030c 	and.w	r3, r3, #12
 8005114:	2b08      	cmp	r3, #8
 8005116:	d05c      	beq.n	80051d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d141      	bne.n	80051a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005120:	4b48      	ldr	r3, [pc, #288]	; (8005244 <HAL_RCC_OscConfig+0x4dc>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005126:	f7fc fccf 	bl	8001ac8 <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800512c:	e008      	b.n	8005140 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800512e:	f7fc fccb 	bl	8001ac8 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e078      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005140:	4b3f      	ldr	r3, [pc, #252]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1f0      	bne.n	800512e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	019b      	lsls	r3, r3, #6
 800515c:	431a      	orrs	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	085b      	lsrs	r3, r3, #1
 8005164:	3b01      	subs	r3, #1
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	4933      	ldr	r1, [pc, #204]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005176:	4b33      	ldr	r3, [pc, #204]	; (8005244 <HAL_RCC_OscConfig+0x4dc>)
 8005178:	2201      	movs	r2, #1
 800517a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7fc fca4 	bl	8001ac8 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005184:	f7fc fca0 	bl	8001ac8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e04d      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005196:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d0f0      	beq.n	8005184 <HAL_RCC_OscConfig+0x41c>
 80051a2:	e045      	b.n	8005230 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051a4:	4b27      	ldr	r3, [pc, #156]	; (8005244 <HAL_RCC_OscConfig+0x4dc>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051aa:	f7fc fc8d 	bl	8001ac8 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051b2:	f7fc fc89 	bl	8001ac8 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e036      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051c4:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCC_OscConfig+0x44a>
 80051d0:	e02e      	b.n	8005230 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d101      	bne.n	80051de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e029      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051de:	4b18      	ldr	r3, [pc, #96]	; (8005240 <HAL_RCC_OscConfig+0x4d8>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d11c      	bne.n	800522c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d115      	bne.n	800522c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005206:	4013      	ands	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800520c:	4293      	cmp	r3, r2
 800520e:	d10d      	bne.n	800522c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d106      	bne.n	800522c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005228:	429a      	cmp	r2, r3
 800522a:	d001      	beq.n	8005230 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40007000 	.word	0x40007000
 8005240:	40023800 	.word	0x40023800
 8005244:	42470060 	.word	0x42470060

08005248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0cc      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800525c:	4b68      	ldr	r3, [pc, #416]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d90c      	bls.n	8005284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800526a:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	4b63      	ldr	r3, [pc, #396]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	683a      	ldr	r2, [r7, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e0b8      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d020      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d005      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800529c:	4b59      	ldr	r3, [pc, #356]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	4a58      	ldr	r2, [pc, #352]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80052a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052b4:	4b53      	ldr	r3, [pc, #332]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4a52      	ldr	r2, [pc, #328]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052c0:	4b50      	ldr	r3, [pc, #320]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	494d      	ldr	r1, [pc, #308]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d044      	beq.n	8005368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052e6:	4b47      	ldr	r3, [pc, #284]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d119      	bne.n	8005326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e07f      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005302:	2b03      	cmp	r3, #3
 8005304:	d107      	bne.n	8005316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005306:	4b3f      	ldr	r3, [pc, #252]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e06f      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005316:	4b3b      	ldr	r3, [pc, #236]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e067      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005326:	4b37      	ldr	r3, [pc, #220]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f023 0203 	bic.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4934      	ldr	r1, [pc, #208]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	4313      	orrs	r3, r2
 8005336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005338:	f7fc fbc6 	bl	8001ac8 <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	e00a      	b.n	8005356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7fc fbc2 	bl	8001ac8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e04f      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005356:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 020c 	and.w	r2, r3, #12
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	429a      	cmp	r2, r3
 8005366:	d1eb      	bne.n	8005340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005368:	4b25      	ldr	r3, [pc, #148]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 030f 	and.w	r3, r3, #15
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d20c      	bcs.n	8005390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537e:	4b20      	ldr	r3, [pc, #128]	; (8005400 <HAL_RCC_ClockConfig+0x1b8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d001      	beq.n	8005390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e032      	b.n	80053f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0304 	and.w	r3, r3, #4
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800539c:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4916      	ldr	r1, [pc, #88]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d009      	beq.n	80053ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053ba:	4b12      	ldr	r3, [pc, #72]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	490e      	ldr	r1, [pc, #56]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053ce:	f000 f889 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80053d2:	4601      	mov	r1, r0
 80053d4:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	091b      	lsrs	r3, r3, #4
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <HAL_RCC_ClockConfig+0x1c0>)
 80053e0:	5cd3      	ldrb	r3, [r2, r3]
 80053e2:	fa21 f303 	lsr.w	r3, r1, r3
 80053e6:	4a09      	ldr	r2, [pc, #36]	; (800540c <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053ea:	4b09      	ldr	r3, [pc, #36]	; (8005410 <HAL_RCC_ClockConfig+0x1c8>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fc fb26 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	40023c00 	.word	0x40023c00
 8005404:	40023800 	.word	0x40023800
 8005408:	080084a8 	.word	0x080084a8
 800540c:	20000000 	.word	0x20000000
 8005410:	20000004 	.word	0x20000004

08005414 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d129      	bne.n	800547a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005426:	2300      	movs	r3, #0
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	4b2b      	ldr	r3, [pc, #172]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 800542c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542e:	4a2a      	ldr	r2, [pc, #168]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	6313      	str	r3, [r2, #48]	; 0x30
 8005436:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005442:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005448:	2302      	movs	r3, #2
 800544a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800544c:	2303      	movs	r3, #3
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	2300      	movs	r3, #0
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005454:	2300      	movs	r3, #0
 8005456:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005458:	f107 031c 	add.w	r3, r7, #28
 800545c:	4619      	mov	r1, r3
 800545e:	481f      	ldr	r0, [pc, #124]	; (80054dc <HAL_RCC_MCOConfig+0xc8>)
 8005460:	f7fd f82a 	bl	80024b8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005464:	4b1c      	ldr	r3, [pc, #112]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800546c:	68b9      	ldr	r1, [r7, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	430b      	orrs	r3, r1
 8005472:	4919      	ldr	r1, [pc, #100]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005478:	e029      	b.n	80054ce <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 8005484:	f043 0304 	orr.w	r3, r3, #4
 8005488:	6313      	str	r3, [r2, #48]	; 0x30
 800548a:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 800548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	617b      	str	r3, [r7, #20]
 8005494:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800549a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549c:	2302      	movs	r3, #2
 800549e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a0:	2303      	movs	r3, #3
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80054ac:	f107 031c 	add.w	r3, r7, #28
 80054b0:	4619      	mov	r1, r3
 80054b2:	480b      	ldr	r0, [pc, #44]	; (80054e0 <HAL_RCC_MCOConfig+0xcc>)
 80054b4:	f7fd f800 	bl	80024b8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80054b8:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	00d9      	lsls	r1, r3, #3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	430b      	orrs	r3, r1
 80054c8:	4903      	ldr	r1, [pc, #12]	; (80054d8 <HAL_RCC_MCOConfig+0xc4>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	608b      	str	r3, [r1, #8]
}
 80054ce:	bf00      	nop
 80054d0:	3730      	adds	r7, #48	; 0x30
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40020000 	.word	0x40020000
 80054e0:	40020800 	.word	0x40020800

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	2300      	movs	r3, #0
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b04      	cmp	r3, #4
 8005504:	d007      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x32>
 8005506:	2b08      	cmp	r3, #8
 8005508:	d008      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x38>
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 80b4 	bne.w	8005678 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b5e      	ldr	r3, [pc, #376]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005512:	60bb      	str	r3, [r7, #8]
       break;
 8005514:	e0b3      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005516:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005518:	60bb      	str	r3, [r7, #8]
      break;
 800551a:	e0b0      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551c:	4b5a      	ldr	r3, [pc, #360]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b58      	ldr	r3, [pc, #352]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04a      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b55      	ldr	r3, [pc, #340]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea03 0501 	and.w	r5, r3, r1
 8005548:	ea04 0602 	and.w	r6, r4, r2
 800554c:	4629      	mov	r1, r5
 800554e:	4632      	mov	r2, r6
 8005550:	f04f 0300 	mov.w	r3, #0
 8005554:	f04f 0400 	mov.w	r4, #0
 8005558:	0154      	lsls	r4, r2, #5
 800555a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800555e:	014b      	lsls	r3, r1, #5
 8005560:	4619      	mov	r1, r3
 8005562:	4622      	mov	r2, r4
 8005564:	1b49      	subs	r1, r1, r5
 8005566:	eb62 0206 	sbc.w	r2, r2, r6
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	f04f 0400 	mov.w	r4, #0
 8005572:	0194      	lsls	r4, r2, #6
 8005574:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005578:	018b      	lsls	r3, r1, #6
 800557a:	1a5b      	subs	r3, r3, r1
 800557c:	eb64 0402 	sbc.w	r4, r4, r2
 8005580:	f04f 0100 	mov.w	r1, #0
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	00e2      	lsls	r2, r4, #3
 800558a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800558e:	00d9      	lsls	r1, r3, #3
 8005590:	460b      	mov	r3, r1
 8005592:	4614      	mov	r4, r2
 8005594:	195b      	adds	r3, r3, r5
 8005596:	eb44 0406 	adc.w	r4, r4, r6
 800559a:	f04f 0100 	mov.w	r1, #0
 800559e:	f04f 0200 	mov.w	r2, #0
 80055a2:	0262      	lsls	r2, r4, #9
 80055a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80055a8:	0259      	lsls	r1, r3, #9
 80055aa:	460b      	mov	r3, r1
 80055ac:	4614      	mov	r4, r2
 80055ae:	4618      	mov	r0, r3
 80055b0:	4621      	mov	r1, r4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f04f 0400 	mov.w	r4, #0
 80055b8:	461a      	mov	r2, r3
 80055ba:	4623      	mov	r3, r4
 80055bc:	f7fa fe58 	bl	8000270 <__aeabi_uldivmod>
 80055c0:	4603      	mov	r3, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	60fb      	str	r3, [r7, #12]
 80055c6:	e049      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c8:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	f04f 0400 	mov.w	r4, #0
 80055d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	ea03 0501 	and.w	r5, r3, r1
 80055de:	ea04 0602 	and.w	r6, r4, r2
 80055e2:	4629      	mov	r1, r5
 80055e4:	4632      	mov	r2, r6
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	f04f 0400 	mov.w	r4, #0
 80055ee:	0154      	lsls	r4, r2, #5
 80055f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80055f4:	014b      	lsls	r3, r1, #5
 80055f6:	4619      	mov	r1, r3
 80055f8:	4622      	mov	r2, r4
 80055fa:	1b49      	subs	r1, r1, r5
 80055fc:	eb62 0206 	sbc.w	r2, r2, r6
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	f04f 0400 	mov.w	r4, #0
 8005608:	0194      	lsls	r4, r2, #6
 800560a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800560e:	018b      	lsls	r3, r1, #6
 8005610:	1a5b      	subs	r3, r3, r1
 8005612:	eb64 0402 	sbc.w	r4, r4, r2
 8005616:	f04f 0100 	mov.w	r1, #0
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	00e2      	lsls	r2, r4, #3
 8005620:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005624:	00d9      	lsls	r1, r3, #3
 8005626:	460b      	mov	r3, r1
 8005628:	4614      	mov	r4, r2
 800562a:	195b      	adds	r3, r3, r5
 800562c:	eb44 0406 	adc.w	r4, r4, r6
 8005630:	f04f 0100 	mov.w	r1, #0
 8005634:	f04f 0200 	mov.w	r2, #0
 8005638:	02a2      	lsls	r2, r4, #10
 800563a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800563e:	0299      	lsls	r1, r3, #10
 8005640:	460b      	mov	r3, r1
 8005642:	4614      	mov	r4, r2
 8005644:	4618      	mov	r0, r3
 8005646:	4621      	mov	r1, r4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f04f 0400 	mov.w	r4, #0
 800564e:	461a      	mov	r2, r3
 8005650:	4623      	mov	r3, r4
 8005652:	f7fa fe0d 	bl	8000270 <__aeabi_uldivmod>
 8005656:	4603      	mov	r3, r0
 8005658:	460c      	mov	r4, r1
 800565a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800565c:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	3301      	adds	r3, #1
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	fbb2 f3f3 	udiv	r3, r2, r3
 8005674:	60bb      	str	r3, [r7, #8]
      break;
 8005676:	e002      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800567a:	60bb      	str	r3, [r7, #8]
      break;
 800567c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800567e:	68bb      	ldr	r3, [r7, #8]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4601      	mov	r1, r0
 80056b6:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a9b      	lsrs	r3, r3, #10
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4a03      	ldr	r2, [pc, #12]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056c2:	5cd3      	ldrb	r3, [r2, r3]
 80056c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40023800 	.word	0x40023800
 80056d0:	080084b8 	.word	0x080084b8

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d8:	f7ff ffdc 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056dc:	4601      	mov	r1, r0
 80056de:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0b5b      	lsrs	r3, r3, #13
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4a03      	ldr	r2, [pc, #12]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	080084b8 	.word	0x080084b8

080056fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e01d      	b.n	800574a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fb fea8 	bl	8001478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f000 fd04 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005752:	b480      	push	{r7}
 8005754:	b085      	sub	sp, #20
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68da      	ldr	r2, [r3, #12]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d007      	beq.n	800578c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0201 	orr.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800579a:	b580      	push	{r7, lr}
 800579c:	b082      	sub	sp, #8
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e01d      	b.n	80057e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f815 	bl	80057f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2202      	movs	r2, #2
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f000 fcb5 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f001 f930 	bl	8006a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a15      	ldr	r2, [pc, #84]	; (8005878 <HAL_TIM_PWM_Start+0x74>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIM_PWM_Start+0x2c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a14      	ldr	r2, [pc, #80]	; (800587c <HAL_TIM_PWM_Start+0x78>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d101      	bne.n	8005834 <HAL_TIM_PWM_Start+0x30>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_TIM_PWM_Start+0x32>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b06      	cmp	r3, #6
 800585a:	d007      	beq.n	800586c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40010000 	.word	0x40010000
 800587c:	40010400 	.word	0x40010400

08005880 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e01d      	b.n	80058ce <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f815 	bl	80058d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f000 fc42 	bl	8006148 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b0c      	cmp	r3, #12
 80058fa:	d841      	bhi.n	8005980 <HAL_TIM_IC_Start_IT+0x94>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <HAL_TIM_IC_Start_IT+0x18>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005939 	.word	0x08005939
 8005908:	08005981 	.word	0x08005981
 800590c:	08005981 	.word	0x08005981
 8005910:	08005981 	.word	0x08005981
 8005914:	0800594b 	.word	0x0800594b
 8005918:	08005981 	.word	0x08005981
 800591c:	08005981 	.word	0x08005981
 8005920:	08005981 	.word	0x08005981
 8005924:	0800595d 	.word	0x0800595d
 8005928:	08005981 	.word	0x08005981
 800592c:	08005981 	.word	0x08005981
 8005930:	08005981 	.word	0x08005981
 8005934:	0800596f 	.word	0x0800596f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0202 	orr.w	r2, r2, #2
 8005946:	60da      	str	r2, [r3, #12]
      break;
 8005948:	e01b      	b.n	8005982 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0204 	orr.w	r2, r2, #4
 8005958:	60da      	str	r2, [r3, #12]
      break;
 800595a:	e012      	b.n	8005982 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	60da      	str	r2, [r3, #12]
      break;
 800596c:	e009      	b.n	8005982 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0210 	orr.w	r2, r2, #16
 800597c:	60da      	str	r2, [r3, #12]
      break;
 800597e:	e000      	b.n	8005982 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005980:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	6839      	ldr	r1, [r7, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f001 f876 	bl	8006a7c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 0307 	and.w	r3, r3, #7
 800599a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d007      	beq.n	80059b2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d122      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d11b      	bne.n	8005a18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f06f 0202 	mvn.w	r2, #2
 80059e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fa ff4a 	bl	8000898 <HAL_TIM_IC_CaptureCallback>
 8005a04:	e005      	b.n	8005a12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fb80 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fb87 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0304 	and.w	r3, r3, #4
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d122      	bne.n	8005a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b04      	cmp	r3, #4
 8005a32:	d11b      	bne.n	8005a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0204 	mvn.w	r2, #4
 8005a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fa ff20 	bl	8000898 <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fb56 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb5d 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0308 	and.w	r3, r3, #8
 8005a76:	2b08      	cmp	r3, #8
 8005a78:	d122      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d11b      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0208 	mvn.w	r2, #8
 8005a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2204      	movs	r2, #4
 8005a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7fa fef6 	bl	8000898 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fb2c 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fb33 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d122      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b10      	cmp	r3, #16
 8005ada:	d11b      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0210 	mvn.w	r2, #16
 8005ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fa fecc 	bl	8000898 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fb02 	bl	800610c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fb09 	bl	8006120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d10e      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d107      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0201 	mvn.w	r2, #1
 8005b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fa fe56 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	d10e      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b80      	cmp	r3, #128	; 0x80
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f001 f834 	bl	8006bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b84:	2b40      	cmp	r3, #64	; 0x40
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 face 	bl	8006134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0320 	and.w	r3, r3, #32
 8005bb0:	2b20      	cmp	r3, #32
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0220 	mvn.w	r2, #32
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fffe 	bl	8006bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e08a      	b.n	8005cfc <HAL_TIM_IC_ConfigChannel+0x130>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d11b      	bne.n	8005c34 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f000 fd72 	bl	80066f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 020c 	bic.w	r2, r2, #12
 8005c1e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
 8005c32:	e05a      	b.n	8005cea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d11c      	bne.n	8005c74 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6819      	ldr	r1, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f000 fdf6 	bl	800683a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699a      	ldr	r2, [r3, #24]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c5c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6999      	ldr	r1, [r3, #24]
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	619a      	str	r2, [r3, #24]
 8005c72:	e03a      	b.n	8005cea <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d11b      	bne.n	8005cb2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6819      	ldr	r1, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f000 fe43 	bl	8006914 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 020c 	bic.w	r2, r2, #12
 8005c9c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69d9      	ldr	r1, [r3, #28]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	61da      	str	r2, [r3, #28]
 8005cb0:	e01b      	b.n	8005cea <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6819      	ldr	r1, [r3, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 fe63 	bl	800698c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005cd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69d9      	ldr	r1, [r3, #28]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	021a      	lsls	r2, r3, #8
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0b4      	b.n	8005e88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b0c      	cmp	r3, #12
 8005d32:	f200 809f 	bhi.w	8005e74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005d71 	.word	0x08005d71
 8005d40:	08005e75 	.word	0x08005e75
 8005d44:	08005e75 	.word	0x08005e75
 8005d48:	08005e75 	.word	0x08005e75
 8005d4c:	08005db1 	.word	0x08005db1
 8005d50:	08005e75 	.word	0x08005e75
 8005d54:	08005e75 	.word	0x08005e75
 8005d58:	08005e75 	.word	0x08005e75
 8005d5c:	08005df3 	.word	0x08005df3
 8005d60:	08005e75 	.word	0x08005e75
 8005d64:	08005e75 	.word	0x08005e75
 8005d68:	08005e75 	.word	0x08005e75
 8005d6c:	08005e33 	.word	0x08005e33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fa86 	bl	8006288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	619a      	str	r2, [r3, #24]
      break;
 8005dae:	e062      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fad6 	bl	8006368 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	619a      	str	r2, [r3, #24]
      break;
 8005df0:	e041      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fb2b 	bl	8006454 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0208 	orr.w	r2, r2, #8
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0204 	bic.w	r2, r2, #4
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	61da      	str	r2, [r3, #28]
      break;
 8005e30:	e021      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fb7f 	bl	800653c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69d9      	ldr	r1, [r3, #28]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	021a      	lsls	r2, r3, #8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	61da      	str	r2, [r3, #28]
      break;
 8005e72:	e000      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005e74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_ConfigClockSource+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e0a6      	b.n	8005ff6 <HAL_TIM_ConfigClockSource+0x166>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ece:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2b40      	cmp	r3, #64	; 0x40
 8005ede:	d067      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0x120>
 8005ee0:	2b40      	cmp	r3, #64	; 0x40
 8005ee2:	d80b      	bhi.n	8005efc <HAL_TIM_ConfigClockSource+0x6c>
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d073      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
 8005ee8:	2b10      	cmp	r3, #16
 8005eea:	d802      	bhi.n	8005ef2 <HAL_TIM_ConfigClockSource+0x62>
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d06f      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005ef0:	e078      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005ef2:	2b20      	cmp	r3, #32
 8005ef4:	d06c      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
 8005ef6:	2b30      	cmp	r3, #48	; 0x30
 8005ef8:	d06a      	beq.n	8005fd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005efa:	e073      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005efc:	2b70      	cmp	r3, #112	; 0x70
 8005efe:	d00d      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x8c>
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d804      	bhi.n	8005f0e <HAL_TIM_ConfigClockSource+0x7e>
 8005f04:	2b50      	cmp	r3, #80	; 0x50
 8005f06:	d033      	beq.n	8005f70 <HAL_TIM_ConfigClockSource+0xe0>
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d041      	beq.n	8005f90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005f0c:	e06a      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f12:	d066      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x152>
 8005f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f18:	d017      	beq.n	8005f4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005f1a:	e063      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6899      	ldr	r1, [r3, #8]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	f000 fd86 	bl	8006a3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	609a      	str	r2, [r3, #8]
      break;
 8005f48:	e04c      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	6899      	ldr	r1, [r3, #8]
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f000 fd6f 	bl	8006a3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f6c:	609a      	str	r2, [r3, #8]
      break;
 8005f6e:	e039      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6818      	ldr	r0, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	6859      	ldr	r1, [r3, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f000 fc2d 	bl	80067dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2150      	movs	r1, #80	; 0x50
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fd3c 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 8005f8e:	e029      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	6859      	ldr	r1, [r3, #4]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f000 fc89 	bl	80068b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2160      	movs	r1, #96	; 0x60
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fd2c 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 8005fae:	e019      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6859      	ldr	r1, [r3, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f000 fc0d 	bl	80067dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2140      	movs	r1, #64	; 0x40
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 fd1c 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 8005fce:	e009      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f000 fd13 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e000      	b.n	8005fe4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006012:	2302      	movs	r3, #2
 8006014:	e031      	b.n	800607a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fadd 	bl	80065e8 <TIM_SlaveTimer_SetConfig>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d009      	beq.n	8006048 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e018      	b.n	800607a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006056:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006066:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d831      	bhi.n	80060fc <HAL_TIM_ReadCapturedValue+0x78>
 8006098:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060d5 	.word	0x080060d5
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060df 	.word	0x080060df
 80060b4:	080060fd 	.word	0x080060fd
 80060b8:	080060fd 	.word	0x080060fd
 80060bc:	080060fd 	.word	0x080060fd
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060fd 	.word	0x080060fd
 80060c8:	080060fd 	.word	0x080060fd
 80060cc:	080060fd 	.word	0x080060fd
 80060d0:	080060f3 	.word	0x080060f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	60fb      	str	r3, [r7, #12]

      break;
 80060dc:	e00f      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	60fb      	str	r3, [r7, #12]

      break;
 80060e6:	e00a      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	60fb      	str	r3, [r7, #12]

      break;
 80060f0:	e005      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f8:	60fb      	str	r3, [r7, #12]

      break;
 80060fa:	e000      	b.n	80060fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060fc:	bf00      	nop
  }

  return tmpreg;
 80060fe:	68fb      	ldr	r3, [r7, #12]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a40      	ldr	r2, [pc, #256]	; (800625c <TIM_Base_SetConfig+0x114>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d00f      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3d      	ldr	r2, [pc, #244]	; (8006260 <TIM_Base_SetConfig+0x118>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3c      	ldr	r2, [pc, #240]	; (8006264 <TIM_Base_SetConfig+0x11c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3b      	ldr	r2, [pc, #236]	; (8006268 <TIM_Base_SetConfig+0x120>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_Base_SetConfig+0x40>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a3a      	ldr	r2, [pc, #232]	; (800626c <TIM_Base_SetConfig+0x124>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d108      	bne.n	800619a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2f      	ldr	r2, [pc, #188]	; (800625c <TIM_Base_SetConfig+0x114>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d02b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a8:	d027      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <TIM_Base_SetConfig+0x118>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d023      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2b      	ldr	r2, [pc, #172]	; (8006264 <TIM_Base_SetConfig+0x11c>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01f      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a2a      	ldr	r2, [pc, #168]	; (8006268 <TIM_Base_SetConfig+0x120>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d01b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a29      	ldr	r2, [pc, #164]	; (800626c <TIM_Base_SetConfig+0x124>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d017      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a28      	ldr	r2, [pc, #160]	; (8006270 <TIM_Base_SetConfig+0x128>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a27      	ldr	r2, [pc, #156]	; (8006274 <TIM_Base_SetConfig+0x12c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00f      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a26      	ldr	r2, [pc, #152]	; (8006278 <TIM_Base_SetConfig+0x130>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a25      	ldr	r2, [pc, #148]	; (800627c <TIM_Base_SetConfig+0x134>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a24      	ldr	r2, [pc, #144]	; (8006280 <TIM_Base_SetConfig+0x138>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a23      	ldr	r2, [pc, #140]	; (8006284 <TIM_Base_SetConfig+0x13c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a0a      	ldr	r2, [pc, #40]	; (800625c <TIM_Base_SetConfig+0x114>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0xf8>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a0c      	ldr	r2, [pc, #48]	; (800626c <TIM_Base_SetConfig+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d103      	bne.n	8006248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]
}
 800624e:	bf00      	nop
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	40010000 	.word	0x40010000
 8006260:	40000400 	.word	0x40000400
 8006264:	40000800 	.word	0x40000800
 8006268:	40000c00 	.word	0x40000c00
 800626c:	40010400 	.word	0x40010400
 8006270:	40014000 	.word	0x40014000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800
 800627c:	40001800 	.word	0x40001800
 8006280:	40001c00 	.word	0x40001c00
 8006284:	40002000 	.word	0x40002000

08006288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	f023 0302 	bic.w	r3, r3, #2
 80062d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a20      	ldr	r2, [pc, #128]	; (8006360 <TIM_OC1_SetConfig+0xd8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d003      	beq.n	80062ec <TIM_OC1_SetConfig+0x64>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a1f      	ldr	r2, [pc, #124]	; (8006364 <TIM_OC1_SetConfig+0xdc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d10c      	bne.n	8006306 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0308 	bic.w	r3, r3, #8
 80062f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f023 0304 	bic.w	r3, r3, #4
 8006304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a15      	ldr	r2, [pc, #84]	; (8006360 <TIM_OC1_SetConfig+0xd8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d003      	beq.n	8006316 <TIM_OC1_SetConfig+0x8e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a14      	ldr	r2, [pc, #80]	; (8006364 <TIM_OC1_SetConfig+0xdc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d111      	bne.n	800633a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800631c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4313      	orrs	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	40010000 	.word	0x40010000
 8006364:	40010400 	.word	0x40010400

08006368 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f023 0210 	bic.w	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800639e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f023 0320 	bic.w	r3, r3, #32
 80063b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a22      	ldr	r2, [pc, #136]	; (800644c <TIM_OC2_SetConfig+0xe4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_OC2_SetConfig+0x68>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a21      	ldr	r2, [pc, #132]	; (8006450 <TIM_OC2_SetConfig+0xe8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10d      	bne.n	80063ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a17      	ldr	r2, [pc, #92]	; (800644c <TIM_OC2_SetConfig+0xe4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC2_SetConfig+0x94>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a16      	ldr	r2, [pc, #88]	; (8006450 <TIM_OC2_SetConfig+0xe8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d113      	bne.n	8006424 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800640a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	695b      	ldr	r3, [r3, #20]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40010000 	.word	0x40010000
 8006450:	40010400 	.word	0x40010400

08006454 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800649c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	021b      	lsls	r3, r3, #8
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a21      	ldr	r2, [pc, #132]	; (8006534 <TIM_OC3_SetConfig+0xe0>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <TIM_OC3_SetConfig+0x66>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a20      	ldr	r2, [pc, #128]	; (8006538 <TIM_OC3_SetConfig+0xe4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d10d      	bne.n	80064d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a16      	ldr	r2, [pc, #88]	; (8006534 <TIM_OC3_SetConfig+0xe0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_OC3_SetConfig+0x92>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a15      	ldr	r2, [pc, #84]	; (8006538 <TIM_OC3_SetConfig+0xe4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d113      	bne.n	800650e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	4313      	orrs	r3, r2
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4313      	orrs	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	621a      	str	r2, [r3, #32]
}
 8006528:	bf00      	nop
 800652a:	371c      	adds	r7, #28
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	40010000 	.word	0x40010000
 8006538:	40010400 	.word	0x40010400

0800653c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	031b      	lsls	r3, r3, #12
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a12      	ldr	r2, [pc, #72]	; (80065e0 <TIM_OC4_SetConfig+0xa4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_OC4_SetConfig+0x68>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <TIM_OC4_SetConfig+0xa8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d109      	bne.n	80065b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	019b      	lsls	r3, r3, #6
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40010400 	.word	0x40010400

080065e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006600:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0307 	bic.w	r3, r3, #7
 8006612:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b30      	cmp	r3, #48	; 0x30
 800662c:	d05c      	beq.n	80066e8 <TIM_SlaveTimer_SetConfig+0x100>
 800662e:	2b30      	cmp	r3, #48	; 0x30
 8006630:	d806      	bhi.n	8006640 <TIM_SlaveTimer_SetConfig+0x58>
 8006632:	2b10      	cmp	r3, #16
 8006634:	d058      	beq.n	80066e8 <TIM_SlaveTimer_SetConfig+0x100>
 8006636:	2b20      	cmp	r3, #32
 8006638:	d056      	beq.n	80066e8 <TIM_SlaveTimer_SetConfig+0x100>
 800663a:	2b00      	cmp	r3, #0
 800663c:	d054      	beq.n	80066e8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800663e:	e054      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006640:	2b50      	cmp	r3, #80	; 0x50
 8006642:	d03d      	beq.n	80066c0 <TIM_SlaveTimer_SetConfig+0xd8>
 8006644:	2b50      	cmp	r3, #80	; 0x50
 8006646:	d802      	bhi.n	800664e <TIM_SlaveTimer_SetConfig+0x66>
 8006648:	2b40      	cmp	r3, #64	; 0x40
 800664a:	d010      	beq.n	800666e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800664c:	e04d      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800664e:	2b60      	cmp	r3, #96	; 0x60
 8006650:	d040      	beq.n	80066d4 <TIM_SlaveTimer_SetConfig+0xec>
 8006652:	2b70      	cmp	r3, #112	; 0x70
 8006654:	d000      	beq.n	8006658 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006656:	e048      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68d9      	ldr	r1, [r3, #12]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f000 f9e8 	bl	8006a3c <TIM_ETR_SetConfig>
      break;
 800666c:	e03d      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b05      	cmp	r3, #5
 8006674:	d101      	bne.n	800667a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e038      	b.n	80066ec <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6a1a      	ldr	r2, [r3, #32]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f022 0201 	bic.w	r2, r2, #1
 8006690:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	621a      	str	r2, [r3, #32]
      break;
 80066be:	e014      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6818      	ldr	r0, [r3, #0]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f000 f885 	bl	80067dc <TIM_TI1_ConfigInputStage>
      break;
 80066d2:	e00a      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6899      	ldr	r1, [r3, #8]
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	461a      	mov	r2, r3
 80066e2:	f000 f8e7 	bl	80068b4 <TIM_TI2_ConfigInputStage>
      break;
 80066e6:	e000      	b.n	80066ea <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80066e8:	bf00      	nop
  }
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	f023 0201 	bic.w	r2, r3, #1
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	4a28      	ldr	r2, [pc, #160]	; (80067c0 <TIM_TI1_SetConfig+0xcc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d01b      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006728:	d017      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4a25      	ldr	r2, [pc, #148]	; (80067c4 <TIM_TI1_SetConfig+0xd0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4a24      	ldr	r2, [pc, #144]	; (80067c8 <TIM_TI1_SetConfig+0xd4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00f      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	4a23      	ldr	r2, [pc, #140]	; (80067cc <TIM_TI1_SetConfig+0xd8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00b      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <TIM_TI1_SetConfig+0xdc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a21      	ldr	r2, [pc, #132]	; (80067d4 <TIM_TI1_SetConfig+0xe0>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_TI1_SetConfig+0x66>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a20      	ldr	r2, [pc, #128]	; (80067d8 <TIM_TI1_SetConfig+0xe4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <TIM_TI1_SetConfig+0x6a>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <TIM_TI1_SetConfig+0x6c>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d008      	beq.n	8006776 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e003      	b.n	800677e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f043 0301 	orr.w	r3, r3, #1
 800677c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006784:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	b2db      	uxtb	r3, r3
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f023 030a 	bic.w	r3, r3, #10
 8006798:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f003 030a 	and.w	r3, r3, #10
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40000c00 	.word	0x40000c00
 80067d0:	40010400 	.word	0x40010400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40001800 	.word	0x40001800

080067dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067dc:	b480      	push	{r7}
 80067de:	b087      	sub	sp, #28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	699b      	ldr	r3, [r3, #24]
 80067fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006806:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4313      	orrs	r3, r2
 8006810:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f023 030a 	bic.w	r3, r3, #10
 8006818:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800683a:	b480      	push	{r7}
 800683c:	b087      	sub	sp, #28
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
 8006846:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f023 0210 	bic.w	r2, r3, #16
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6a1b      	ldr	r3, [r3, #32]
 800685e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	021b      	lsls	r3, r3, #8
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006878:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	031b      	lsls	r3, r3, #12
 800687e:	b29b      	uxth	r3, r3
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800688c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	621a      	str	r2, [r3, #32]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f023 0210 	bic.w	r2, r3, #16
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	031b      	lsls	r3, r3, #12
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	011b      	lsls	r3, r3, #4
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	621a      	str	r2, [r3, #32]
}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
 8006920:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 0303 	bic.w	r3, r3, #3
 8006940:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006950:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	b2db      	uxtb	r3, r3
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006964:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	031b      	lsls	r3, r3, #12
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80069de:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	031b      	lsls	r3, r3, #12
 80069e4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f043 0307 	orr.w	r3, r3, #7
 8006a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	609a      	str	r2, [r3, #8]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	021a      	lsls	r2, r3, #8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2201      	movs	r2, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e05a      	b.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d022      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d01d      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d018      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00e      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a18      	ldr	r2, [pc, #96]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10c      	bne.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40000c00 	.word	0x40000c00
 8006bb4:	40010400 	.word	0x40010400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40001800 	.word	0x40001800

08006bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e03f      	b.n	8006c7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fa fd5e 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	; 0x24
 8006c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc37 	bl	80074a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b20      	cmp	r3, #32
 8006c9c:	d153      	bne.n	8006d46 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <HAL_UART_Transmit_DMA+0x26>
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e04c      	b.n	8006d48 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_UART_Transmit_DMA+0x38>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e045      	b.n	8006d48 <HAL_UART_Transmit_DMA+0xc4>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	88fa      	ldrh	r2, [r7, #6]
 8006cce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2221      	movs	r2, #33	; 0x21
 8006ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	4a19      	ldr	r2, [pc, #100]	; (8006d50 <HAL_UART_Transmit_DMA+0xcc>)
 8006cea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf0:	4a18      	ldr	r2, [pc, #96]	; (8006d54 <HAL_UART_Transmit_DMA+0xd0>)
 8006cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <HAL_UART_Transmit_DMA+0xd4>)
 8006cfa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	2200      	movs	r2, #0
 8006d02:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006d04:	f107 0308 	add.w	r3, r7, #8
 8006d08:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6819      	ldr	r1, [r3, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	3304      	adds	r3, #4
 8006d18:	461a      	mov	r2, r3
 8006d1a:	88fb      	ldrh	r3, [r7, #6]
 8006d1c:	f7fb f8d0 	bl	8001ec0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d28:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695a      	ldr	r2, [r3, #20]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d40:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006d42:	2300      	movs	r3, #0
 8006d44:	e000      	b.n	8006d48 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
  }
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	080070ad 	.word	0x080070ad
 8006d54:	080070ff 	.word	0x080070ff
 8006d58:	0800719f 	.word	0x0800719f

08006d5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4613      	mov	r3, r2
 8006d68:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b20      	cmp	r3, #32
 8006d74:	d166      	bne.n	8006e44 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_UART_Receive_DMA+0x26>
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e05f      	b.n	8006e46 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_UART_Receive_DMA+0x38>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e058      	b.n	8006e46 <HAL_UART_Receive_DMA+0xea>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	88fa      	ldrh	r2, [r7, #6]
 8006da6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2222      	movs	r2, #34	; 0x22
 8006db2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	4a25      	ldr	r2, [pc, #148]	; (8006e50 <HAL_UART_Receive_DMA+0xf4>)
 8006dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc2:	4a24      	ldr	r2, [pc, #144]	; (8006e54 <HAL_UART_Receive_DMA+0xf8>)
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dca:	4a23      	ldr	r2, [pc, #140]	; (8006e58 <HAL_UART_Receive_DMA+0xfc>)
 8006dcc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006dd6:	f107 0308 	add.w	r3, r7, #8
 8006dda:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	88fb      	ldrh	r3, [r7, #6]
 8006dee:	f7fb f867 	bl	8001ec0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8006df2:	2300      	movs	r3, #0
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	613b      	str	r3, [r7, #16]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e1e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695a      	ldr	r2, [r3, #20]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e3e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e000      	b.n	8006e46 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	0800711b 	.word	0x0800711b
 8006e54:	08007183 	.word	0x08007183
 8006e58:	0800719f 	.word	0x0800719f

08006e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10d      	bne.n	8006eae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f003 0320 	and.w	r3, r3, #32
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <HAL_UART_IRQHandler+0x52>
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa79 	bl	800739e <UART_Receive_IT>
      return;
 8006eac:	e0d1      	b.n	8007052 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f000 80b0 	beq.w	8007016 <HAL_UART_IRQHandler+0x1ba>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d105      	bne.n	8006ecc <HAL_UART_IRQHandler+0x70>
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 80a5 	beq.w	8007016 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00a      	beq.n	8006eec <HAL_UART_IRQHandler+0x90>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee4:	f043 0201 	orr.w	r2, r3, #1
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	f003 0304 	and.w	r3, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <HAL_UART_IRQHandler+0xb0>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f04:	f043 0202 	orr.w	r2, r3, #2
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <HAL_UART_IRQHandler+0xd0>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f24:	f043 0204 	orr.w	r2, r3, #4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00f      	beq.n	8006f56 <HAL_UART_IRQHandler+0xfa>
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	f003 0320 	and.w	r3, r3, #32
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d104      	bne.n	8006f4a <HAL_UART_IRQHandler+0xee>
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	f043 0208 	orr.w	r2, r3, #8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d078      	beq.n	8007050 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	f003 0320 	and.w	r3, r3, #32
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <HAL_UART_IRQHandler+0x11c>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fa13 	bl	800739e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f82:	2b40      	cmp	r3, #64	; 0x40
 8006f84:	bf0c      	ite	eq
 8006f86:	2301      	moveq	r3, #1
 8006f88:	2300      	movne	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d102      	bne.n	8006fa0 <HAL_UART_IRQHandler+0x144>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d031      	beq.n	8007004 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 f95c 	bl	800725e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb0:	2b40      	cmp	r3, #64	; 0x40
 8006fb2:	d123      	bne.n	8006ffc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fc2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d013      	beq.n	8006ff4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd0:	4a21      	ldr	r2, [pc, #132]	; (8007058 <HAL_UART_IRQHandler+0x1fc>)
 8006fd2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fa ffc9 	bl	8001f70 <HAL_DMA_Abort_IT>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d016      	beq.n	8007012 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	e00e      	b.n	8007012 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f84f 	bl	8007098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffa:	e00a      	b.n	8007012 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f84b 	bl	8007098 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007002:	e006      	b.n	8007012 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f847 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007010:	e01e      	b.n	8007050 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007012:	bf00      	nop
    return;
 8007014:	e01c      	b.n	8007050 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <HAL_UART_IRQHandler+0x1d6>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f949 	bl	80072c2 <UART_Transmit_IT>
    return;
 8007030:	e00f      	b.n	8007052 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_UART_IRQHandler+0x1f6>
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f991 	bl	800736e <UART_EndTransmit_IT>
    return;
 800704c:	bf00      	nop
 800704e:	e000      	b.n	8007052 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007050:	bf00      	nop
  }
}
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	0800729b 	.word	0x0800729b

0800705c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d113      	bne.n	80070f0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	695a      	ldr	r2, [r3, #20]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070dc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ec:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ee:	e002      	b.n	80070f6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f7ff ffb3 	bl	800705c <HAL_UART_TxCpltCallback>
}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff ffaf 	bl	8007070 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007132:	2b00      	cmp	r3, #0
 8007134:	d11e      	bne.n	8007174 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800714a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0201 	bic.w	r2, r2, #1
 800715a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	695a      	ldr	r2, [r3, #20]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800716a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7f9 fb79 	bl	800086c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800717a:	bf00      	nop
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff ff77 	bl	8007084 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	bf0c      	ite	eq
 80071be:	2301      	moveq	r3, #1
 80071c0:	2300      	movne	r3, #0
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b21      	cmp	r3, #33	; 0x21
 80071d0:	d108      	bne.n	80071e4 <UART_DMAError+0x46>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2200      	movs	r2, #0
 80071dc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80071de:	68b8      	ldr	r0, [r7, #8]
 80071e0:	f000 f827 	bl	8007232 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b40      	cmp	r3, #64	; 0x40
 80071f0:	bf0c      	ite	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	2300      	movne	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b22      	cmp	r3, #34	; 0x22
 8007204:	d108      	bne.n	8007218 <UART_DMAError+0x7a>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2200      	movs	r2, #0
 8007210:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007212:	68b8      	ldr	r0, [r7, #8]
 8007214:	f000 f823 	bl	800725e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721c:	f043 0210 	orr.w	r2, r3, #16
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007224:	68b8      	ldr	r0, [r7, #8]
 8007226:	f7ff ff37 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007248:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2220      	movs	r2, #32
 800724e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007274:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	695a      	ldr	r2, [r3, #20]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f022 0201 	bic.w	r2, r2, #1
 8007284:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff feef 	bl	8007098 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b21      	cmp	r3, #33	; 0x21
 80072d4:	d144      	bne.n	8007360 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072de:	d11a      	bne.n	8007316 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	1c9a      	adds	r2, r3, #2
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	621a      	str	r2, [r3, #32]
 8007308:	e00e      	b.n	8007328 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	621a      	str	r2, [r3, #32]
 8007314:	e008      	b.n	8007328 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	1c59      	adds	r1, r3, #1
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6211      	str	r1, [r2, #32]
 8007320:	781a      	ldrb	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800732c:	b29b      	uxth	r3, r3
 800732e:	3b01      	subs	r3, #1
 8007330:	b29b      	uxth	r3, r3
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	4619      	mov	r1, r3
 8007336:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10f      	bne.n	800735c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800734a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800735a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800735c:	2300      	movs	r3, #0
 800735e:	e000      	b.n	8007362 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007360:	2302      	movs	r3, #2
  }
}
 8007362:	4618      	mov	r0, r3
 8007364:	3714      	adds	r7, #20
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68da      	ldr	r2, [r3, #12]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007384:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff fe64 	bl	800705c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b084      	sub	sp, #16
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b22      	cmp	r3, #34	; 0x22
 80073b0:	d171      	bne.n	8007496 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ba:	d123      	bne.n	8007404 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10e      	bne.n	80073e8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	1c9a      	adds	r2, r3, #2
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
 80073e6:	e029      	b.n	800743c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	629a      	str	r2, [r3, #40]	; 0x28
 8007402:	e01b      	b.n	800743c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	691b      	ldr	r3, [r3, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10a      	bne.n	8007422 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6858      	ldr	r0, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	1c59      	adds	r1, r3, #1
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	6291      	str	r1, [r2, #40]	; 0x28
 800741c:	b2c2      	uxtb	r2, r0
 800741e:	701a      	strb	r2, [r3, #0]
 8007420:	e00c      	b.n	800743c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742e:	1c58      	adds	r0, r3, #1
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	6288      	str	r0, [r1, #40]	; 0x28
 8007434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29b      	uxth	r3, r3
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4619      	mov	r1, r3
 800744a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800744c:	2b00      	cmp	r3, #0
 800744e:	d120      	bne.n	8007492 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68da      	ldr	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0220 	bic.w	r2, r2, #32
 800745e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800746e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695a      	ldr	r2, [r3, #20]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0201 	bic.w	r2, r2, #1
 800747e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7f9 f9ef 	bl	800086c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e002      	b.n	8007498 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	e000      	b.n	8007498 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007496:	2302      	movs	r3, #2
  }
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	b085      	sub	sp, #20
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80074e2:	f023 030c 	bic.w	r3, r3, #12
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	6812      	ldr	r2, [r2, #0]
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	430b      	orrs	r3, r1
 80074ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750e:	f040 818b 	bne.w	8007828 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4ac1      	ldr	r2, [pc, #772]	; (800781c <UART_SetConfig+0x37c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d005      	beq.n	8007528 <UART_SetConfig+0x88>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4abf      	ldr	r2, [pc, #764]	; (8007820 <UART_SetConfig+0x380>)
 8007522:	4293      	cmp	r3, r2
 8007524:	f040 80bd 	bne.w	80076a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007528:	f7fe f8d4 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 800752c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	461d      	mov	r5, r3
 8007532:	f04f 0600 	mov.w	r6, #0
 8007536:	46a8      	mov	r8, r5
 8007538:	46b1      	mov	r9, r6
 800753a:	eb18 0308 	adds.w	r3, r8, r8
 800753e:	eb49 0409 	adc.w	r4, r9, r9
 8007542:	4698      	mov	r8, r3
 8007544:	46a1      	mov	r9, r4
 8007546:	eb18 0805 	adds.w	r8, r8, r5
 800754a:	eb49 0906 	adc.w	r9, r9, r6
 800754e:	f04f 0100 	mov.w	r1, #0
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800755a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800755e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007562:	4688      	mov	r8, r1
 8007564:	4691      	mov	r9, r2
 8007566:	eb18 0005 	adds.w	r0, r8, r5
 800756a:	eb49 0106 	adc.w	r1, r9, r6
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	461d      	mov	r5, r3
 8007574:	f04f 0600 	mov.w	r6, #0
 8007578:	196b      	adds	r3, r5, r5
 800757a:	eb46 0406 	adc.w	r4, r6, r6
 800757e:	461a      	mov	r2, r3
 8007580:	4623      	mov	r3, r4
 8007582:	f7f8 fe75 	bl	8000270 <__aeabi_uldivmod>
 8007586:	4603      	mov	r3, r0
 8007588:	460c      	mov	r4, r1
 800758a:	461a      	mov	r2, r3
 800758c:	4ba5      	ldr	r3, [pc, #660]	; (8007824 <UART_SetConfig+0x384>)
 800758e:	fba3 2302 	umull	r2, r3, r3, r2
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	461d      	mov	r5, r3
 800759c:	f04f 0600 	mov.w	r6, #0
 80075a0:	46a9      	mov	r9, r5
 80075a2:	46b2      	mov	sl, r6
 80075a4:	eb19 0309 	adds.w	r3, r9, r9
 80075a8:	eb4a 040a 	adc.w	r4, sl, sl
 80075ac:	4699      	mov	r9, r3
 80075ae:	46a2      	mov	sl, r4
 80075b0:	eb19 0905 	adds.w	r9, r9, r5
 80075b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80075b8:	f04f 0100 	mov.w	r1, #0
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80075c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80075cc:	4689      	mov	r9, r1
 80075ce:	4692      	mov	sl, r2
 80075d0:	eb19 0005 	adds.w	r0, r9, r5
 80075d4:	eb4a 0106 	adc.w	r1, sl, r6
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	461d      	mov	r5, r3
 80075de:	f04f 0600 	mov.w	r6, #0
 80075e2:	196b      	adds	r3, r5, r5
 80075e4:	eb46 0406 	adc.w	r4, r6, r6
 80075e8:	461a      	mov	r2, r3
 80075ea:	4623      	mov	r3, r4
 80075ec:	f7f8 fe40 	bl	8000270 <__aeabi_uldivmod>
 80075f0:	4603      	mov	r3, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	461a      	mov	r2, r3
 80075f6:	4b8b      	ldr	r3, [pc, #556]	; (8007824 <UART_SetConfig+0x384>)
 80075f8:	fba3 1302 	umull	r1, r3, r3, r2
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	2164      	movs	r1, #100	; 0x64
 8007600:	fb01 f303 	mul.w	r3, r1, r3
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	3332      	adds	r3, #50	; 0x32
 800760a:	4a86      	ldr	r2, [pc, #536]	; (8007824 <UART_SetConfig+0x384>)
 800760c:	fba2 2303 	umull	r2, r3, r2, r3
 8007610:	095b      	lsrs	r3, r3, #5
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007618:	4498      	add	r8, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	461d      	mov	r5, r3
 800761e:	f04f 0600 	mov.w	r6, #0
 8007622:	46a9      	mov	r9, r5
 8007624:	46b2      	mov	sl, r6
 8007626:	eb19 0309 	adds.w	r3, r9, r9
 800762a:	eb4a 040a 	adc.w	r4, sl, sl
 800762e:	4699      	mov	r9, r3
 8007630:	46a2      	mov	sl, r4
 8007632:	eb19 0905 	adds.w	r9, r9, r5
 8007636:	eb4a 0a06 	adc.w	sl, sl, r6
 800763a:	f04f 0100 	mov.w	r1, #0
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800764a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800764e:	4689      	mov	r9, r1
 8007650:	4692      	mov	sl, r2
 8007652:	eb19 0005 	adds.w	r0, r9, r5
 8007656:	eb4a 0106 	adc.w	r1, sl, r6
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	461d      	mov	r5, r3
 8007660:	f04f 0600 	mov.w	r6, #0
 8007664:	196b      	adds	r3, r5, r5
 8007666:	eb46 0406 	adc.w	r4, r6, r6
 800766a:	461a      	mov	r2, r3
 800766c:	4623      	mov	r3, r4
 800766e:	f7f8 fdff 	bl	8000270 <__aeabi_uldivmod>
 8007672:	4603      	mov	r3, r0
 8007674:	460c      	mov	r4, r1
 8007676:	461a      	mov	r2, r3
 8007678:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <UART_SetConfig+0x384>)
 800767a:	fba3 1302 	umull	r1, r3, r3, r2
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2164      	movs	r1, #100	; 0x64
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	00db      	lsls	r3, r3, #3
 800768a:	3332      	adds	r3, #50	; 0x32
 800768c:	4a65      	ldr	r2, [pc, #404]	; (8007824 <UART_SetConfig+0x384>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f003 0207 	and.w	r2, r3, #7
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4442      	add	r2, r8
 800769e:	609a      	str	r2, [r3, #8]
 80076a0:	e26f      	b.n	8007b82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80076a2:	f7fe f803 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80076a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	461d      	mov	r5, r3
 80076ac:	f04f 0600 	mov.w	r6, #0
 80076b0:	46a8      	mov	r8, r5
 80076b2:	46b1      	mov	r9, r6
 80076b4:	eb18 0308 	adds.w	r3, r8, r8
 80076b8:	eb49 0409 	adc.w	r4, r9, r9
 80076bc:	4698      	mov	r8, r3
 80076be:	46a1      	mov	r9, r4
 80076c0:	eb18 0805 	adds.w	r8, r8, r5
 80076c4:	eb49 0906 	adc.w	r9, r9, r6
 80076c8:	f04f 0100 	mov.w	r1, #0
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076dc:	4688      	mov	r8, r1
 80076de:	4691      	mov	r9, r2
 80076e0:	eb18 0005 	adds.w	r0, r8, r5
 80076e4:	eb49 0106 	adc.w	r1, r9, r6
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	461d      	mov	r5, r3
 80076ee:	f04f 0600 	mov.w	r6, #0
 80076f2:	196b      	adds	r3, r5, r5
 80076f4:	eb46 0406 	adc.w	r4, r6, r6
 80076f8:	461a      	mov	r2, r3
 80076fa:	4623      	mov	r3, r4
 80076fc:	f7f8 fdb8 	bl	8000270 <__aeabi_uldivmod>
 8007700:	4603      	mov	r3, r0
 8007702:	460c      	mov	r4, r1
 8007704:	461a      	mov	r2, r3
 8007706:	4b47      	ldr	r3, [pc, #284]	; (8007824 <UART_SetConfig+0x384>)
 8007708:	fba3 2302 	umull	r2, r3, r3, r2
 800770c:	095b      	lsrs	r3, r3, #5
 800770e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	461d      	mov	r5, r3
 8007716:	f04f 0600 	mov.w	r6, #0
 800771a:	46a9      	mov	r9, r5
 800771c:	46b2      	mov	sl, r6
 800771e:	eb19 0309 	adds.w	r3, r9, r9
 8007722:	eb4a 040a 	adc.w	r4, sl, sl
 8007726:	4699      	mov	r9, r3
 8007728:	46a2      	mov	sl, r4
 800772a:	eb19 0905 	adds.w	r9, r9, r5
 800772e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007732:	f04f 0100 	mov.w	r1, #0
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800773e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007742:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007746:	4689      	mov	r9, r1
 8007748:	4692      	mov	sl, r2
 800774a:	eb19 0005 	adds.w	r0, r9, r5
 800774e:	eb4a 0106 	adc.w	r1, sl, r6
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	461d      	mov	r5, r3
 8007758:	f04f 0600 	mov.w	r6, #0
 800775c:	196b      	adds	r3, r5, r5
 800775e:	eb46 0406 	adc.w	r4, r6, r6
 8007762:	461a      	mov	r2, r3
 8007764:	4623      	mov	r3, r4
 8007766:	f7f8 fd83 	bl	8000270 <__aeabi_uldivmod>
 800776a:	4603      	mov	r3, r0
 800776c:	460c      	mov	r4, r1
 800776e:	461a      	mov	r2, r3
 8007770:	4b2c      	ldr	r3, [pc, #176]	; (8007824 <UART_SetConfig+0x384>)
 8007772:	fba3 1302 	umull	r1, r3, r3, r2
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	2164      	movs	r1, #100	; 0x64
 800777a:	fb01 f303 	mul.w	r3, r1, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	00db      	lsls	r3, r3, #3
 8007782:	3332      	adds	r3, #50	; 0x32
 8007784:	4a27      	ldr	r2, [pc, #156]	; (8007824 <UART_SetConfig+0x384>)
 8007786:	fba2 2303 	umull	r2, r3, r2, r3
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007792:	4498      	add	r8, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	461d      	mov	r5, r3
 8007798:	f04f 0600 	mov.w	r6, #0
 800779c:	46a9      	mov	r9, r5
 800779e:	46b2      	mov	sl, r6
 80077a0:	eb19 0309 	adds.w	r3, r9, r9
 80077a4:	eb4a 040a 	adc.w	r4, sl, sl
 80077a8:	4699      	mov	r9, r3
 80077aa:	46a2      	mov	sl, r4
 80077ac:	eb19 0905 	adds.w	r9, r9, r5
 80077b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80077b4:	f04f 0100 	mov.w	r1, #0
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077c8:	4689      	mov	r9, r1
 80077ca:	4692      	mov	sl, r2
 80077cc:	eb19 0005 	adds.w	r0, r9, r5
 80077d0:	eb4a 0106 	adc.w	r1, sl, r6
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	461d      	mov	r5, r3
 80077da:	f04f 0600 	mov.w	r6, #0
 80077de:	196b      	adds	r3, r5, r5
 80077e0:	eb46 0406 	adc.w	r4, r6, r6
 80077e4:	461a      	mov	r2, r3
 80077e6:	4623      	mov	r3, r4
 80077e8:	f7f8 fd42 	bl	8000270 <__aeabi_uldivmod>
 80077ec:	4603      	mov	r3, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	461a      	mov	r2, r3
 80077f2:	4b0c      	ldr	r3, [pc, #48]	; (8007824 <UART_SetConfig+0x384>)
 80077f4:	fba3 1302 	umull	r1, r3, r3, r2
 80077f8:	095b      	lsrs	r3, r3, #5
 80077fa:	2164      	movs	r1, #100	; 0x64
 80077fc:	fb01 f303 	mul.w	r3, r1, r3
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	3332      	adds	r3, #50	; 0x32
 8007806:	4a07      	ldr	r2, [pc, #28]	; (8007824 <UART_SetConfig+0x384>)
 8007808:	fba2 2303 	umull	r2, r3, r2, r3
 800780c:	095b      	lsrs	r3, r3, #5
 800780e:	f003 0207 	and.w	r2, r3, #7
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4442      	add	r2, r8
 8007818:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800781a:	e1b2      	b.n	8007b82 <UART_SetConfig+0x6e2>
 800781c:	40011000 	.word	0x40011000
 8007820:	40011400 	.word	0x40011400
 8007824:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4ad7      	ldr	r2, [pc, #860]	; (8007b8c <UART_SetConfig+0x6ec>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d005      	beq.n	800783e <UART_SetConfig+0x39e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4ad6      	ldr	r2, [pc, #856]	; (8007b90 <UART_SetConfig+0x6f0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	f040 80d1 	bne.w	80079e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800783e:	f7fd ff49 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8007842:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	469a      	mov	sl, r3
 8007848:	f04f 0b00 	mov.w	fp, #0
 800784c:	46d0      	mov	r8, sl
 800784e:	46d9      	mov	r9, fp
 8007850:	eb18 0308 	adds.w	r3, r8, r8
 8007854:	eb49 0409 	adc.w	r4, r9, r9
 8007858:	4698      	mov	r8, r3
 800785a:	46a1      	mov	r9, r4
 800785c:	eb18 080a 	adds.w	r8, r8, sl
 8007860:	eb49 090b 	adc.w	r9, r9, fp
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007870:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007874:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007878:	4688      	mov	r8, r1
 800787a:	4691      	mov	r9, r2
 800787c:	eb1a 0508 	adds.w	r5, sl, r8
 8007880:	eb4b 0609 	adc.w	r6, fp, r9
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4619      	mov	r1, r3
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	f04f 0300 	mov.w	r3, #0
 8007892:	f04f 0400 	mov.w	r4, #0
 8007896:	0094      	lsls	r4, r2, #2
 8007898:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800789c:	008b      	lsls	r3, r1, #2
 800789e:	461a      	mov	r2, r3
 80078a0:	4623      	mov	r3, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	4631      	mov	r1, r6
 80078a6:	f7f8 fce3 	bl	8000270 <__aeabi_uldivmod>
 80078aa:	4603      	mov	r3, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	461a      	mov	r2, r3
 80078b0:	4bb8      	ldr	r3, [pc, #736]	; (8007b94 <UART_SetConfig+0x6f4>)
 80078b2:	fba3 2302 	umull	r2, r3, r3, r2
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	469b      	mov	fp, r3
 80078c0:	f04f 0c00 	mov.w	ip, #0
 80078c4:	46d9      	mov	r9, fp
 80078c6:	46e2      	mov	sl, ip
 80078c8:	eb19 0309 	adds.w	r3, r9, r9
 80078cc:	eb4a 040a 	adc.w	r4, sl, sl
 80078d0:	4699      	mov	r9, r3
 80078d2:	46a2      	mov	sl, r4
 80078d4:	eb19 090b 	adds.w	r9, r9, fp
 80078d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078f0:	4689      	mov	r9, r1
 80078f2:	4692      	mov	sl, r2
 80078f4:	eb1b 0509 	adds.w	r5, fp, r9
 80078f8:	eb4c 060a 	adc.w	r6, ip, sl
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4619      	mov	r1, r3
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	f04f 0400 	mov.w	r4, #0
 800790e:	0094      	lsls	r4, r2, #2
 8007910:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007914:	008b      	lsls	r3, r1, #2
 8007916:	461a      	mov	r2, r3
 8007918:	4623      	mov	r3, r4
 800791a:	4628      	mov	r0, r5
 800791c:	4631      	mov	r1, r6
 800791e:	f7f8 fca7 	bl	8000270 <__aeabi_uldivmod>
 8007922:	4603      	mov	r3, r0
 8007924:	460c      	mov	r4, r1
 8007926:	461a      	mov	r2, r3
 8007928:	4b9a      	ldr	r3, [pc, #616]	; (8007b94 <UART_SetConfig+0x6f4>)
 800792a:	fba3 1302 	umull	r1, r3, r3, r2
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	2164      	movs	r1, #100	; 0x64
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	011b      	lsls	r3, r3, #4
 800793a:	3332      	adds	r3, #50	; 0x32
 800793c:	4a95      	ldr	r2, [pc, #596]	; (8007b94 <UART_SetConfig+0x6f4>)
 800793e:	fba2 2303 	umull	r2, r3, r2, r3
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007948:	4498      	add	r8, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	469b      	mov	fp, r3
 800794e:	f04f 0c00 	mov.w	ip, #0
 8007952:	46d9      	mov	r9, fp
 8007954:	46e2      	mov	sl, ip
 8007956:	eb19 0309 	adds.w	r3, r9, r9
 800795a:	eb4a 040a 	adc.w	r4, sl, sl
 800795e:	4699      	mov	r9, r3
 8007960:	46a2      	mov	sl, r4
 8007962:	eb19 090b 	adds.w	r9, r9, fp
 8007966:	eb4a 0a0c 	adc.w	sl, sl, ip
 800796a:	f04f 0100 	mov.w	r1, #0
 800796e:	f04f 0200 	mov.w	r2, #0
 8007972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800797a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800797e:	4689      	mov	r9, r1
 8007980:	4692      	mov	sl, r2
 8007982:	eb1b 0509 	adds.w	r5, fp, r9
 8007986:	eb4c 060a 	adc.w	r6, ip, sl
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4619      	mov	r1, r3
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	f04f 0400 	mov.w	r4, #0
 800799c:	0094      	lsls	r4, r2, #2
 800799e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80079a2:	008b      	lsls	r3, r1, #2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	4628      	mov	r0, r5
 80079aa:	4631      	mov	r1, r6
 80079ac:	f7f8 fc60 	bl	8000270 <__aeabi_uldivmod>
 80079b0:	4603      	mov	r3, r0
 80079b2:	460c      	mov	r4, r1
 80079b4:	461a      	mov	r2, r3
 80079b6:	4b77      	ldr	r3, [pc, #476]	; (8007b94 <UART_SetConfig+0x6f4>)
 80079b8:	fba3 1302 	umull	r1, r3, r3, r2
 80079bc:	095b      	lsrs	r3, r3, #5
 80079be:	2164      	movs	r1, #100	; 0x64
 80079c0:	fb01 f303 	mul.w	r3, r1, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	011b      	lsls	r3, r3, #4
 80079c8:	3332      	adds	r3, #50	; 0x32
 80079ca:	4a72      	ldr	r2, [pc, #456]	; (8007b94 <UART_SetConfig+0x6f4>)
 80079cc:	fba2 2303 	umull	r2, r3, r2, r3
 80079d0:	095b      	lsrs	r3, r3, #5
 80079d2:	f003 020f 	and.w	r2, r3, #15
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4442      	add	r2, r8
 80079dc:	609a      	str	r2, [r3, #8]
 80079de:	e0d0      	b.n	8007b82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80079e0:	f7fd fe64 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80079e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	469a      	mov	sl, r3
 80079ea:	f04f 0b00 	mov.w	fp, #0
 80079ee:	46d0      	mov	r8, sl
 80079f0:	46d9      	mov	r9, fp
 80079f2:	eb18 0308 	adds.w	r3, r8, r8
 80079f6:	eb49 0409 	adc.w	r4, r9, r9
 80079fa:	4698      	mov	r8, r3
 80079fc:	46a1      	mov	r9, r4
 80079fe:	eb18 080a 	adds.w	r8, r8, sl
 8007a02:	eb49 090b 	adc.w	r9, r9, fp
 8007a06:	f04f 0100 	mov.w	r1, #0
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a1a:	4688      	mov	r8, r1
 8007a1c:	4691      	mov	r9, r2
 8007a1e:	eb1a 0508 	adds.w	r5, sl, r8
 8007a22:	eb4b 0609 	adc.w	r6, fp, r9
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	f04f 0200 	mov.w	r2, #0
 8007a30:	f04f 0300 	mov.w	r3, #0
 8007a34:	f04f 0400 	mov.w	r4, #0
 8007a38:	0094      	lsls	r4, r2, #2
 8007a3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007a3e:	008b      	lsls	r3, r1, #2
 8007a40:	461a      	mov	r2, r3
 8007a42:	4623      	mov	r3, r4
 8007a44:	4628      	mov	r0, r5
 8007a46:	4631      	mov	r1, r6
 8007a48:	f7f8 fc12 	bl	8000270 <__aeabi_uldivmod>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	461a      	mov	r2, r3
 8007a52:	4b50      	ldr	r3, [pc, #320]	; (8007b94 <UART_SetConfig+0x6f4>)
 8007a54:	fba3 2302 	umull	r2, r3, r3, r2
 8007a58:	095b      	lsrs	r3, r3, #5
 8007a5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	469b      	mov	fp, r3
 8007a62:	f04f 0c00 	mov.w	ip, #0
 8007a66:	46d9      	mov	r9, fp
 8007a68:	46e2      	mov	sl, ip
 8007a6a:	eb19 0309 	adds.w	r3, r9, r9
 8007a6e:	eb4a 040a 	adc.w	r4, sl, sl
 8007a72:	4699      	mov	r9, r3
 8007a74:	46a2      	mov	sl, r4
 8007a76:	eb19 090b 	adds.w	r9, r9, fp
 8007a7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a92:	4689      	mov	r9, r1
 8007a94:	4692      	mov	sl, r2
 8007a96:	eb1b 0509 	adds.w	r5, fp, r9
 8007a9a:	eb4c 060a 	adc.w	r6, ip, sl
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	f04f 0200 	mov.w	r2, #0
 8007aa8:	f04f 0300 	mov.w	r3, #0
 8007aac:	f04f 0400 	mov.w	r4, #0
 8007ab0:	0094      	lsls	r4, r2, #2
 8007ab2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ab6:	008b      	lsls	r3, r1, #2
 8007ab8:	461a      	mov	r2, r3
 8007aba:	4623      	mov	r3, r4
 8007abc:	4628      	mov	r0, r5
 8007abe:	4631      	mov	r1, r6
 8007ac0:	f7f8 fbd6 	bl	8000270 <__aeabi_uldivmod>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	461a      	mov	r2, r3
 8007aca:	4b32      	ldr	r3, [pc, #200]	; (8007b94 <UART_SetConfig+0x6f4>)
 8007acc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	2164      	movs	r1, #100	; 0x64
 8007ad4:	fb01 f303 	mul.w	r3, r1, r3
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	3332      	adds	r3, #50	; 0x32
 8007ade:	4a2d      	ldr	r2, [pc, #180]	; (8007b94 <UART_SetConfig+0x6f4>)
 8007ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae4:	095b      	lsrs	r3, r3, #5
 8007ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aea:	4498      	add	r8, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	469b      	mov	fp, r3
 8007af0:	f04f 0c00 	mov.w	ip, #0
 8007af4:	46d9      	mov	r9, fp
 8007af6:	46e2      	mov	sl, ip
 8007af8:	eb19 0309 	adds.w	r3, r9, r9
 8007afc:	eb4a 040a 	adc.w	r4, sl, sl
 8007b00:	4699      	mov	r9, r3
 8007b02:	46a2      	mov	sl, r4
 8007b04:	eb19 090b 	adds.w	r9, r9, fp
 8007b08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b0c:	f04f 0100 	mov.w	r1, #0
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b20:	4689      	mov	r9, r1
 8007b22:	4692      	mov	sl, r2
 8007b24:	eb1b 0509 	adds.w	r5, fp, r9
 8007b28:	eb4c 060a 	adc.w	r6, ip, sl
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	4619      	mov	r1, r3
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	f04f 0400 	mov.w	r4, #0
 8007b3e:	0094      	lsls	r4, r2, #2
 8007b40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b44:	008b      	lsls	r3, r1, #2
 8007b46:	461a      	mov	r2, r3
 8007b48:	4623      	mov	r3, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	f7f8 fb8f 	bl	8000270 <__aeabi_uldivmod>
 8007b52:	4603      	mov	r3, r0
 8007b54:	460c      	mov	r4, r1
 8007b56:	461a      	mov	r2, r3
 8007b58:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <UART_SetConfig+0x6f4>)
 8007b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	2164      	movs	r1, #100	; 0x64
 8007b62:	fb01 f303 	mul.w	r3, r1, r3
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	3332      	adds	r3, #50	; 0x32
 8007b6c:	4a09      	ldr	r2, [pc, #36]	; (8007b94 <UART_SetConfig+0x6f4>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	095b      	lsrs	r3, r3, #5
 8007b74:	f003 020f 	and.w	r2, r3, #15
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4442      	add	r2, r8
 8007b7e:	609a      	str	r2, [r3, #8]
}
 8007b80:	e7ff      	b.n	8007b82 <UART_SetConfig+0x6e2>
 8007b82:	bf00      	nop
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8c:	40011000 	.word	0x40011000
 8007b90:	40011400 	.word	0x40011400
 8007b94:	51eb851f 	.word	0x51eb851f

08007b98 <__errno>:
 8007b98:	4b01      	ldr	r3, [pc, #4]	; (8007ba0 <__errno+0x8>)
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	2000000c 	.word	0x2000000c

08007ba4 <__libc_init_array>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4e0d      	ldr	r6, [pc, #52]	; (8007bdc <__libc_init_array+0x38>)
 8007ba8:	4c0d      	ldr	r4, [pc, #52]	; (8007be0 <__libc_init_array+0x3c>)
 8007baa:	1ba4      	subs	r4, r4, r6
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	2500      	movs	r5, #0
 8007bb0:	42a5      	cmp	r5, r4
 8007bb2:	d109      	bne.n	8007bc8 <__libc_init_array+0x24>
 8007bb4:	4e0b      	ldr	r6, [pc, #44]	; (8007be4 <__libc_init_array+0x40>)
 8007bb6:	4c0c      	ldr	r4, [pc, #48]	; (8007be8 <__libc_init_array+0x44>)
 8007bb8:	f000 fc26 	bl	8008408 <_init>
 8007bbc:	1ba4      	subs	r4, r4, r6
 8007bbe:	10a4      	asrs	r4, r4, #2
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	42a5      	cmp	r5, r4
 8007bc4:	d105      	bne.n	8007bd2 <__libc_init_array+0x2e>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bcc:	4798      	blx	r3
 8007bce:	3501      	adds	r5, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__libc_init_array+0xc>
 8007bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bd6:	4798      	blx	r3
 8007bd8:	3501      	adds	r5, #1
 8007bda:	e7f2      	b.n	8007bc2 <__libc_init_array+0x1e>
 8007bdc:	08008504 	.word	0x08008504
 8007be0:	08008504 	.word	0x08008504
 8007be4:	08008504 	.word	0x08008504
 8007be8:	08008508 	.word	0x08008508

08007bec <memset>:
 8007bec:	4402      	add	r2, r0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d100      	bne.n	8007bf6 <memset+0xa>
 8007bf4:	4770      	bx	lr
 8007bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007bfa:	e7f9      	b.n	8007bf0 <memset+0x4>

08007bfc <siprintf>:
 8007bfc:	b40e      	push	{r1, r2, r3}
 8007bfe:	b500      	push	{lr}
 8007c00:	b09c      	sub	sp, #112	; 0x70
 8007c02:	ab1d      	add	r3, sp, #116	; 0x74
 8007c04:	9002      	str	r0, [sp, #8]
 8007c06:	9006      	str	r0, [sp, #24]
 8007c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c0c:	4809      	ldr	r0, [pc, #36]	; (8007c34 <siprintf+0x38>)
 8007c0e:	9107      	str	r1, [sp, #28]
 8007c10:	9104      	str	r1, [sp, #16]
 8007c12:	4909      	ldr	r1, [pc, #36]	; (8007c38 <siprintf+0x3c>)
 8007c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c18:	9105      	str	r1, [sp, #20]
 8007c1a:	6800      	ldr	r0, [r0, #0]
 8007c1c:	9301      	str	r3, [sp, #4]
 8007c1e:	a902      	add	r1, sp, #8
 8007c20:	f000 f866 	bl	8007cf0 <_svfiprintf_r>
 8007c24:	9b02      	ldr	r3, [sp, #8]
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	b01c      	add	sp, #112	; 0x70
 8007c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c30:	b003      	add	sp, #12
 8007c32:	4770      	bx	lr
 8007c34:	2000000c 	.word	0x2000000c
 8007c38:	ffff0208 	.word	0xffff0208

08007c3c <__ssputs_r>:
 8007c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c40:	688e      	ldr	r6, [r1, #8]
 8007c42:	429e      	cmp	r6, r3
 8007c44:	4682      	mov	sl, r0
 8007c46:	460c      	mov	r4, r1
 8007c48:	4690      	mov	r8, r2
 8007c4a:	4699      	mov	r9, r3
 8007c4c:	d837      	bhi.n	8007cbe <__ssputs_r+0x82>
 8007c4e:	898a      	ldrh	r2, [r1, #12]
 8007c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c54:	d031      	beq.n	8007cba <__ssputs_r+0x7e>
 8007c56:	6825      	ldr	r5, [r4, #0]
 8007c58:	6909      	ldr	r1, [r1, #16]
 8007c5a:	1a6f      	subs	r7, r5, r1
 8007c5c:	6965      	ldr	r5, [r4, #20]
 8007c5e:	2302      	movs	r3, #2
 8007c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c64:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c68:	f109 0301 	add.w	r3, r9, #1
 8007c6c:	443b      	add	r3, r7
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	bf38      	it	cc
 8007c72:	461d      	movcc	r5, r3
 8007c74:	0553      	lsls	r3, r2, #21
 8007c76:	d530      	bpl.n	8007cda <__ssputs_r+0x9e>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f000 fb2b 	bl	80082d4 <_malloc_r>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	b950      	cbnz	r0, 8007c98 <__ssputs_r+0x5c>
 8007c82:	230c      	movs	r3, #12
 8007c84:	f8ca 3000 	str.w	r3, [sl]
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c98:	463a      	mov	r2, r7
 8007c9a:	6921      	ldr	r1, [r4, #16]
 8007c9c:	f000 faa8 	bl	80081f0 <memcpy>
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007caa:	81a3      	strh	r3, [r4, #12]
 8007cac:	6126      	str	r6, [r4, #16]
 8007cae:	6165      	str	r5, [r4, #20]
 8007cb0:	443e      	add	r6, r7
 8007cb2:	1bed      	subs	r5, r5, r7
 8007cb4:	6026      	str	r6, [r4, #0]
 8007cb6:	60a5      	str	r5, [r4, #8]
 8007cb8:	464e      	mov	r6, r9
 8007cba:	454e      	cmp	r6, r9
 8007cbc:	d900      	bls.n	8007cc0 <__ssputs_r+0x84>
 8007cbe:	464e      	mov	r6, r9
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	4641      	mov	r1, r8
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	f000 fa9e 	bl	8008206 <memmove>
 8007cca:	68a3      	ldr	r3, [r4, #8]
 8007ccc:	1b9b      	subs	r3, r3, r6
 8007cce:	60a3      	str	r3, [r4, #8]
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	441e      	add	r6, r3
 8007cd4:	6026      	str	r6, [r4, #0]
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e7dc      	b.n	8007c94 <__ssputs_r+0x58>
 8007cda:	462a      	mov	r2, r5
 8007cdc:	f000 fb54 	bl	8008388 <_realloc_r>
 8007ce0:	4606      	mov	r6, r0
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	d1e2      	bne.n	8007cac <__ssputs_r+0x70>
 8007ce6:	6921      	ldr	r1, [r4, #16]
 8007ce8:	4650      	mov	r0, sl
 8007cea:	f000 faa5 	bl	8008238 <_free_r>
 8007cee:	e7c8      	b.n	8007c82 <__ssputs_r+0x46>

08007cf0 <_svfiprintf_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	461d      	mov	r5, r3
 8007cf6:	898b      	ldrh	r3, [r1, #12]
 8007cf8:	061f      	lsls	r7, r3, #24
 8007cfa:	b09d      	sub	sp, #116	; 0x74
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	4616      	mov	r6, r2
 8007d02:	d50f      	bpl.n	8007d24 <_svfiprintf_r+0x34>
 8007d04:	690b      	ldr	r3, [r1, #16]
 8007d06:	b96b      	cbnz	r3, 8007d24 <_svfiprintf_r+0x34>
 8007d08:	2140      	movs	r1, #64	; 0x40
 8007d0a:	f000 fae3 	bl	80082d4 <_malloc_r>
 8007d0e:	6020      	str	r0, [r4, #0]
 8007d10:	6120      	str	r0, [r4, #16]
 8007d12:	b928      	cbnz	r0, 8007d20 <_svfiprintf_r+0x30>
 8007d14:	230c      	movs	r3, #12
 8007d16:	f8c8 3000 	str.w	r3, [r8]
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d1e:	e0c8      	b.n	8007eb2 <_svfiprintf_r+0x1c2>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	6163      	str	r3, [r4, #20]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9309      	str	r3, [sp, #36]	; 0x24
 8007d28:	2320      	movs	r3, #32
 8007d2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2e:	2330      	movs	r3, #48	; 0x30
 8007d30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d34:	9503      	str	r5, [sp, #12]
 8007d36:	f04f 0b01 	mov.w	fp, #1
 8007d3a:	4637      	mov	r7, r6
 8007d3c:	463d      	mov	r5, r7
 8007d3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d42:	b10b      	cbz	r3, 8007d48 <_svfiprintf_r+0x58>
 8007d44:	2b25      	cmp	r3, #37	; 0x25
 8007d46:	d13e      	bne.n	8007dc6 <_svfiprintf_r+0xd6>
 8007d48:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d4c:	d00b      	beq.n	8007d66 <_svfiprintf_r+0x76>
 8007d4e:	4653      	mov	r3, sl
 8007d50:	4632      	mov	r2, r6
 8007d52:	4621      	mov	r1, r4
 8007d54:	4640      	mov	r0, r8
 8007d56:	f7ff ff71 	bl	8007c3c <__ssputs_r>
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f000 80a4 	beq.w	8007ea8 <_svfiprintf_r+0x1b8>
 8007d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d62:	4453      	add	r3, sl
 8007d64:	9309      	str	r3, [sp, #36]	; 0x24
 8007d66:	783b      	ldrb	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 809d 	beq.w	8007ea8 <_svfiprintf_r+0x1b8>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	9307      	str	r3, [sp, #28]
 8007d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d80:	931a      	str	r3, [sp, #104]	; 0x68
 8007d82:	462f      	mov	r7, r5
 8007d84:	2205      	movs	r2, #5
 8007d86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d8a:	4850      	ldr	r0, [pc, #320]	; (8007ecc <_svfiprintf_r+0x1dc>)
 8007d8c:	f7f8 fa20 	bl	80001d0 <memchr>
 8007d90:	9b04      	ldr	r3, [sp, #16]
 8007d92:	b9d0      	cbnz	r0, 8007dca <_svfiprintf_r+0xda>
 8007d94:	06d9      	lsls	r1, r3, #27
 8007d96:	bf44      	itt	mi
 8007d98:	2220      	movmi	r2, #32
 8007d9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d9e:	071a      	lsls	r2, r3, #28
 8007da0:	bf44      	itt	mi
 8007da2:	222b      	movmi	r2, #43	; 0x2b
 8007da4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007da8:	782a      	ldrb	r2, [r5, #0]
 8007daa:	2a2a      	cmp	r2, #42	; 0x2a
 8007dac:	d015      	beq.n	8007dda <_svfiprintf_r+0xea>
 8007dae:	9a07      	ldr	r2, [sp, #28]
 8007db0:	462f      	mov	r7, r5
 8007db2:	2000      	movs	r0, #0
 8007db4:	250a      	movs	r5, #10
 8007db6:	4639      	mov	r1, r7
 8007db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dbc:	3b30      	subs	r3, #48	; 0x30
 8007dbe:	2b09      	cmp	r3, #9
 8007dc0:	d94d      	bls.n	8007e5e <_svfiprintf_r+0x16e>
 8007dc2:	b1b8      	cbz	r0, 8007df4 <_svfiprintf_r+0x104>
 8007dc4:	e00f      	b.n	8007de6 <_svfiprintf_r+0xf6>
 8007dc6:	462f      	mov	r7, r5
 8007dc8:	e7b8      	b.n	8007d3c <_svfiprintf_r+0x4c>
 8007dca:	4a40      	ldr	r2, [pc, #256]	; (8007ecc <_svfiprintf_r+0x1dc>)
 8007dcc:	1a80      	subs	r0, r0, r2
 8007dce:	fa0b f000 	lsl.w	r0, fp, r0
 8007dd2:	4318      	orrs	r0, r3
 8007dd4:	9004      	str	r0, [sp, #16]
 8007dd6:	463d      	mov	r5, r7
 8007dd8:	e7d3      	b.n	8007d82 <_svfiprintf_r+0x92>
 8007dda:	9a03      	ldr	r2, [sp, #12]
 8007ddc:	1d11      	adds	r1, r2, #4
 8007dde:	6812      	ldr	r2, [r2, #0]
 8007de0:	9103      	str	r1, [sp, #12]
 8007de2:	2a00      	cmp	r2, #0
 8007de4:	db01      	blt.n	8007dea <_svfiprintf_r+0xfa>
 8007de6:	9207      	str	r2, [sp, #28]
 8007de8:	e004      	b.n	8007df4 <_svfiprintf_r+0x104>
 8007dea:	4252      	negs	r2, r2
 8007dec:	f043 0302 	orr.w	r3, r3, #2
 8007df0:	9207      	str	r2, [sp, #28]
 8007df2:	9304      	str	r3, [sp, #16]
 8007df4:	783b      	ldrb	r3, [r7, #0]
 8007df6:	2b2e      	cmp	r3, #46	; 0x2e
 8007df8:	d10c      	bne.n	8007e14 <_svfiprintf_r+0x124>
 8007dfa:	787b      	ldrb	r3, [r7, #1]
 8007dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8007dfe:	d133      	bne.n	8007e68 <_svfiprintf_r+0x178>
 8007e00:	9b03      	ldr	r3, [sp, #12]
 8007e02:	1d1a      	adds	r2, r3, #4
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	9203      	str	r2, [sp, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	bfb8      	it	lt
 8007e0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e10:	3702      	adds	r7, #2
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	4d2e      	ldr	r5, [pc, #184]	; (8007ed0 <_svfiprintf_r+0x1e0>)
 8007e16:	7839      	ldrb	r1, [r7, #0]
 8007e18:	2203      	movs	r2, #3
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f7f8 f9d8 	bl	80001d0 <memchr>
 8007e20:	b138      	cbz	r0, 8007e32 <_svfiprintf_r+0x142>
 8007e22:	2340      	movs	r3, #64	; 0x40
 8007e24:	1b40      	subs	r0, r0, r5
 8007e26:	fa03 f000 	lsl.w	r0, r3, r0
 8007e2a:	9b04      	ldr	r3, [sp, #16]
 8007e2c:	4303      	orrs	r3, r0
 8007e2e:	3701      	adds	r7, #1
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	7839      	ldrb	r1, [r7, #0]
 8007e34:	4827      	ldr	r0, [pc, #156]	; (8007ed4 <_svfiprintf_r+0x1e4>)
 8007e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e3a:	2206      	movs	r2, #6
 8007e3c:	1c7e      	adds	r6, r7, #1
 8007e3e:	f7f8 f9c7 	bl	80001d0 <memchr>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d038      	beq.n	8007eb8 <_svfiprintf_r+0x1c8>
 8007e46:	4b24      	ldr	r3, [pc, #144]	; (8007ed8 <_svfiprintf_r+0x1e8>)
 8007e48:	bb13      	cbnz	r3, 8007e90 <_svfiprintf_r+0x1a0>
 8007e4a:	9b03      	ldr	r3, [sp, #12]
 8007e4c:	3307      	adds	r3, #7
 8007e4e:	f023 0307 	bic.w	r3, r3, #7
 8007e52:	3308      	adds	r3, #8
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e58:	444b      	add	r3, r9
 8007e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5c:	e76d      	b.n	8007d3a <_svfiprintf_r+0x4a>
 8007e5e:	fb05 3202 	mla	r2, r5, r2, r3
 8007e62:	2001      	movs	r0, #1
 8007e64:	460f      	mov	r7, r1
 8007e66:	e7a6      	b.n	8007db6 <_svfiprintf_r+0xc6>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	3701      	adds	r7, #1
 8007e6c:	9305      	str	r3, [sp, #20]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	250a      	movs	r5, #10
 8007e72:	4638      	mov	r0, r7
 8007e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e78:	3a30      	subs	r2, #48	; 0x30
 8007e7a:	2a09      	cmp	r2, #9
 8007e7c:	d903      	bls.n	8007e86 <_svfiprintf_r+0x196>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d0c8      	beq.n	8007e14 <_svfiprintf_r+0x124>
 8007e82:	9105      	str	r1, [sp, #20]
 8007e84:	e7c6      	b.n	8007e14 <_svfiprintf_r+0x124>
 8007e86:	fb05 2101 	mla	r1, r5, r1, r2
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	e7f0      	b.n	8007e72 <_svfiprintf_r+0x182>
 8007e90:	ab03      	add	r3, sp, #12
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	4622      	mov	r2, r4
 8007e96:	4b11      	ldr	r3, [pc, #68]	; (8007edc <_svfiprintf_r+0x1ec>)
 8007e98:	a904      	add	r1, sp, #16
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	f3af 8000 	nop.w
 8007ea0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007ea4:	4681      	mov	r9, r0
 8007ea6:	d1d6      	bne.n	8007e56 <_svfiprintf_r+0x166>
 8007ea8:	89a3      	ldrh	r3, [r4, #12]
 8007eaa:	065b      	lsls	r3, r3, #25
 8007eac:	f53f af35 	bmi.w	8007d1a <_svfiprintf_r+0x2a>
 8007eb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eb2:	b01d      	add	sp, #116	; 0x74
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eb8:	ab03      	add	r3, sp, #12
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	4b07      	ldr	r3, [pc, #28]	; (8007edc <_svfiprintf_r+0x1ec>)
 8007ec0:	a904      	add	r1, sp, #16
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	f000 f882 	bl	8007fcc <_printf_i>
 8007ec8:	e7ea      	b.n	8007ea0 <_svfiprintf_r+0x1b0>
 8007eca:	bf00      	nop
 8007ecc:	080084c8 	.word	0x080084c8
 8007ed0:	080084ce 	.word	0x080084ce
 8007ed4:	080084d2 	.word	0x080084d2
 8007ed8:	00000000 	.word	0x00000000
 8007edc:	08007c3d 	.word	0x08007c3d

08007ee0 <_printf_common>:
 8007ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ee4:	4691      	mov	r9, r2
 8007ee6:	461f      	mov	r7, r3
 8007ee8:	688a      	ldr	r2, [r1, #8]
 8007eea:	690b      	ldr	r3, [r1, #16]
 8007eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	bfb8      	it	lt
 8007ef4:	4613      	movlt	r3, r2
 8007ef6:	f8c9 3000 	str.w	r3, [r9]
 8007efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007efe:	4606      	mov	r6, r0
 8007f00:	460c      	mov	r4, r1
 8007f02:	b112      	cbz	r2, 8007f0a <_printf_common+0x2a>
 8007f04:	3301      	adds	r3, #1
 8007f06:	f8c9 3000 	str.w	r3, [r9]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	0699      	lsls	r1, r3, #26
 8007f0e:	bf42      	ittt	mi
 8007f10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f14:	3302      	addmi	r3, #2
 8007f16:	f8c9 3000 	strmi.w	r3, [r9]
 8007f1a:	6825      	ldr	r5, [r4, #0]
 8007f1c:	f015 0506 	ands.w	r5, r5, #6
 8007f20:	d107      	bne.n	8007f32 <_printf_common+0x52>
 8007f22:	f104 0a19 	add.w	sl, r4, #25
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	f8d9 2000 	ldr.w	r2, [r9]
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	42ab      	cmp	r3, r5
 8007f30:	dc28      	bgt.n	8007f84 <_printf_common+0xa4>
 8007f32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f36:	6822      	ldr	r2, [r4, #0]
 8007f38:	3300      	adds	r3, #0
 8007f3a:	bf18      	it	ne
 8007f3c:	2301      	movne	r3, #1
 8007f3e:	0692      	lsls	r2, r2, #26
 8007f40:	d42d      	bmi.n	8007f9e <_printf_common+0xbe>
 8007f42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f46:	4639      	mov	r1, r7
 8007f48:	4630      	mov	r0, r6
 8007f4a:	47c0      	blx	r8
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d020      	beq.n	8007f92 <_printf_common+0xb2>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	68e5      	ldr	r5, [r4, #12]
 8007f54:	f8d9 2000 	ldr.w	r2, [r9]
 8007f58:	f003 0306 	and.w	r3, r3, #6
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	bf08      	it	eq
 8007f60:	1aad      	subeq	r5, r5, r2
 8007f62:	68a3      	ldr	r3, [r4, #8]
 8007f64:	6922      	ldr	r2, [r4, #16]
 8007f66:	bf0c      	ite	eq
 8007f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f6c:	2500      	movne	r5, #0
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	bfc4      	itt	gt
 8007f72:	1a9b      	subgt	r3, r3, r2
 8007f74:	18ed      	addgt	r5, r5, r3
 8007f76:	f04f 0900 	mov.w	r9, #0
 8007f7a:	341a      	adds	r4, #26
 8007f7c:	454d      	cmp	r5, r9
 8007f7e:	d11a      	bne.n	8007fb6 <_printf_common+0xd6>
 8007f80:	2000      	movs	r0, #0
 8007f82:	e008      	b.n	8007f96 <_printf_common+0xb6>
 8007f84:	2301      	movs	r3, #1
 8007f86:	4652      	mov	r2, sl
 8007f88:	4639      	mov	r1, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	47c0      	blx	r8
 8007f8e:	3001      	adds	r0, #1
 8007f90:	d103      	bne.n	8007f9a <_printf_common+0xba>
 8007f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f9a:	3501      	adds	r5, #1
 8007f9c:	e7c3      	b.n	8007f26 <_printf_common+0x46>
 8007f9e:	18e1      	adds	r1, r4, r3
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	2030      	movs	r0, #48	; 0x30
 8007fa4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fa8:	4422      	add	r2, r4
 8007faa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fb2:	3302      	adds	r3, #2
 8007fb4:	e7c5      	b.n	8007f42 <_printf_common+0x62>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4622      	mov	r2, r4
 8007fba:	4639      	mov	r1, r7
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	47c0      	blx	r8
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d0e6      	beq.n	8007f92 <_printf_common+0xb2>
 8007fc4:	f109 0901 	add.w	r9, r9, #1
 8007fc8:	e7d8      	b.n	8007f7c <_printf_common+0x9c>
	...

08007fcc <_printf_i>:
 8007fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007fd4:	460c      	mov	r4, r1
 8007fd6:	7e09      	ldrb	r1, [r1, #24]
 8007fd8:	b085      	sub	sp, #20
 8007fda:	296e      	cmp	r1, #110	; 0x6e
 8007fdc:	4617      	mov	r7, r2
 8007fde:	4606      	mov	r6, r0
 8007fe0:	4698      	mov	r8, r3
 8007fe2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fe4:	f000 80b3 	beq.w	800814e <_printf_i+0x182>
 8007fe8:	d822      	bhi.n	8008030 <_printf_i+0x64>
 8007fea:	2963      	cmp	r1, #99	; 0x63
 8007fec:	d036      	beq.n	800805c <_printf_i+0x90>
 8007fee:	d80a      	bhi.n	8008006 <_printf_i+0x3a>
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	f000 80b9 	beq.w	8008168 <_printf_i+0x19c>
 8007ff6:	2958      	cmp	r1, #88	; 0x58
 8007ff8:	f000 8083 	beq.w	8008102 <_printf_i+0x136>
 8007ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008000:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008004:	e032      	b.n	800806c <_printf_i+0xa0>
 8008006:	2964      	cmp	r1, #100	; 0x64
 8008008:	d001      	beq.n	800800e <_printf_i+0x42>
 800800a:	2969      	cmp	r1, #105	; 0x69
 800800c:	d1f6      	bne.n	8007ffc <_printf_i+0x30>
 800800e:	6820      	ldr	r0, [r4, #0]
 8008010:	6813      	ldr	r3, [r2, #0]
 8008012:	0605      	lsls	r5, r0, #24
 8008014:	f103 0104 	add.w	r1, r3, #4
 8008018:	d52a      	bpl.n	8008070 <_printf_i+0xa4>
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	da03      	bge.n	800802a <_printf_i+0x5e>
 8008022:	222d      	movs	r2, #45	; 0x2d
 8008024:	425b      	negs	r3, r3
 8008026:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800802a:	486f      	ldr	r0, [pc, #444]	; (80081e8 <_printf_i+0x21c>)
 800802c:	220a      	movs	r2, #10
 800802e:	e039      	b.n	80080a4 <_printf_i+0xd8>
 8008030:	2973      	cmp	r1, #115	; 0x73
 8008032:	f000 809d 	beq.w	8008170 <_printf_i+0x1a4>
 8008036:	d808      	bhi.n	800804a <_printf_i+0x7e>
 8008038:	296f      	cmp	r1, #111	; 0x6f
 800803a:	d020      	beq.n	800807e <_printf_i+0xb2>
 800803c:	2970      	cmp	r1, #112	; 0x70
 800803e:	d1dd      	bne.n	8007ffc <_printf_i+0x30>
 8008040:	6823      	ldr	r3, [r4, #0]
 8008042:	f043 0320 	orr.w	r3, r3, #32
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	e003      	b.n	8008052 <_printf_i+0x86>
 800804a:	2975      	cmp	r1, #117	; 0x75
 800804c:	d017      	beq.n	800807e <_printf_i+0xb2>
 800804e:	2978      	cmp	r1, #120	; 0x78
 8008050:	d1d4      	bne.n	8007ffc <_printf_i+0x30>
 8008052:	2378      	movs	r3, #120	; 0x78
 8008054:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008058:	4864      	ldr	r0, [pc, #400]	; (80081ec <_printf_i+0x220>)
 800805a:	e055      	b.n	8008108 <_printf_i+0x13c>
 800805c:	6813      	ldr	r3, [r2, #0]
 800805e:	1d19      	adds	r1, r3, #4
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6011      	str	r1, [r2, #0]
 8008064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800806c:	2301      	movs	r3, #1
 800806e:	e08c      	b.n	800818a <_printf_i+0x1be>
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	6011      	str	r1, [r2, #0]
 8008074:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008078:	bf18      	it	ne
 800807a:	b21b      	sxthne	r3, r3
 800807c:	e7cf      	b.n	800801e <_printf_i+0x52>
 800807e:	6813      	ldr	r3, [r2, #0]
 8008080:	6825      	ldr	r5, [r4, #0]
 8008082:	1d18      	adds	r0, r3, #4
 8008084:	6010      	str	r0, [r2, #0]
 8008086:	0628      	lsls	r0, r5, #24
 8008088:	d501      	bpl.n	800808e <_printf_i+0xc2>
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	e002      	b.n	8008094 <_printf_i+0xc8>
 800808e:	0668      	lsls	r0, r5, #25
 8008090:	d5fb      	bpl.n	800808a <_printf_i+0xbe>
 8008092:	881b      	ldrh	r3, [r3, #0]
 8008094:	4854      	ldr	r0, [pc, #336]	; (80081e8 <_printf_i+0x21c>)
 8008096:	296f      	cmp	r1, #111	; 0x6f
 8008098:	bf14      	ite	ne
 800809a:	220a      	movne	r2, #10
 800809c:	2208      	moveq	r2, #8
 800809e:	2100      	movs	r1, #0
 80080a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080a4:	6865      	ldr	r5, [r4, #4]
 80080a6:	60a5      	str	r5, [r4, #8]
 80080a8:	2d00      	cmp	r5, #0
 80080aa:	f2c0 8095 	blt.w	80081d8 <_printf_i+0x20c>
 80080ae:	6821      	ldr	r1, [r4, #0]
 80080b0:	f021 0104 	bic.w	r1, r1, #4
 80080b4:	6021      	str	r1, [r4, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d13d      	bne.n	8008136 <_printf_i+0x16a>
 80080ba:	2d00      	cmp	r5, #0
 80080bc:	f040 808e 	bne.w	80081dc <_printf_i+0x210>
 80080c0:	4665      	mov	r5, ip
 80080c2:	2a08      	cmp	r2, #8
 80080c4:	d10b      	bne.n	80080de <_printf_i+0x112>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	07db      	lsls	r3, r3, #31
 80080ca:	d508      	bpl.n	80080de <_printf_i+0x112>
 80080cc:	6923      	ldr	r3, [r4, #16]
 80080ce:	6862      	ldr	r2, [r4, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	bfde      	ittt	le
 80080d4:	2330      	movle	r3, #48	; 0x30
 80080d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080de:	ebac 0305 	sub.w	r3, ip, r5
 80080e2:	6123      	str	r3, [r4, #16]
 80080e4:	f8cd 8000 	str.w	r8, [sp]
 80080e8:	463b      	mov	r3, r7
 80080ea:	aa03      	add	r2, sp, #12
 80080ec:	4621      	mov	r1, r4
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7ff fef6 	bl	8007ee0 <_printf_common>
 80080f4:	3001      	adds	r0, #1
 80080f6:	d14d      	bne.n	8008194 <_printf_i+0x1c8>
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080fc:	b005      	add	sp, #20
 80080fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008102:	4839      	ldr	r0, [pc, #228]	; (80081e8 <_printf_i+0x21c>)
 8008104:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008108:	6813      	ldr	r3, [r2, #0]
 800810a:	6821      	ldr	r1, [r4, #0]
 800810c:	1d1d      	adds	r5, r3, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6015      	str	r5, [r2, #0]
 8008112:	060a      	lsls	r2, r1, #24
 8008114:	d50b      	bpl.n	800812e <_printf_i+0x162>
 8008116:	07ca      	lsls	r2, r1, #31
 8008118:	bf44      	itt	mi
 800811a:	f041 0120 	orrmi.w	r1, r1, #32
 800811e:	6021      	strmi	r1, [r4, #0]
 8008120:	b91b      	cbnz	r3, 800812a <_printf_i+0x15e>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	f022 0220 	bic.w	r2, r2, #32
 8008128:	6022      	str	r2, [r4, #0]
 800812a:	2210      	movs	r2, #16
 800812c:	e7b7      	b.n	800809e <_printf_i+0xd2>
 800812e:	064d      	lsls	r5, r1, #25
 8008130:	bf48      	it	mi
 8008132:	b29b      	uxthmi	r3, r3
 8008134:	e7ef      	b.n	8008116 <_printf_i+0x14a>
 8008136:	4665      	mov	r5, ip
 8008138:	fbb3 f1f2 	udiv	r1, r3, r2
 800813c:	fb02 3311 	mls	r3, r2, r1, r3
 8008140:	5cc3      	ldrb	r3, [r0, r3]
 8008142:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008146:	460b      	mov	r3, r1
 8008148:	2900      	cmp	r1, #0
 800814a:	d1f5      	bne.n	8008138 <_printf_i+0x16c>
 800814c:	e7b9      	b.n	80080c2 <_printf_i+0xf6>
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	6825      	ldr	r5, [r4, #0]
 8008152:	6961      	ldr	r1, [r4, #20]
 8008154:	1d18      	adds	r0, r3, #4
 8008156:	6010      	str	r0, [r2, #0]
 8008158:	0628      	lsls	r0, r5, #24
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	d501      	bpl.n	8008162 <_printf_i+0x196>
 800815e:	6019      	str	r1, [r3, #0]
 8008160:	e002      	b.n	8008168 <_printf_i+0x19c>
 8008162:	066a      	lsls	r2, r5, #25
 8008164:	d5fb      	bpl.n	800815e <_printf_i+0x192>
 8008166:	8019      	strh	r1, [r3, #0]
 8008168:	2300      	movs	r3, #0
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	4665      	mov	r5, ip
 800816e:	e7b9      	b.n	80080e4 <_printf_i+0x118>
 8008170:	6813      	ldr	r3, [r2, #0]
 8008172:	1d19      	adds	r1, r3, #4
 8008174:	6011      	str	r1, [r2, #0]
 8008176:	681d      	ldr	r5, [r3, #0]
 8008178:	6862      	ldr	r2, [r4, #4]
 800817a:	2100      	movs	r1, #0
 800817c:	4628      	mov	r0, r5
 800817e:	f7f8 f827 	bl	80001d0 <memchr>
 8008182:	b108      	cbz	r0, 8008188 <_printf_i+0x1bc>
 8008184:	1b40      	subs	r0, r0, r5
 8008186:	6060      	str	r0, [r4, #4]
 8008188:	6863      	ldr	r3, [r4, #4]
 800818a:	6123      	str	r3, [r4, #16]
 800818c:	2300      	movs	r3, #0
 800818e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008192:	e7a7      	b.n	80080e4 <_printf_i+0x118>
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	462a      	mov	r2, r5
 8008198:	4639      	mov	r1, r7
 800819a:	4630      	mov	r0, r6
 800819c:	47c0      	blx	r8
 800819e:	3001      	adds	r0, #1
 80081a0:	d0aa      	beq.n	80080f8 <_printf_i+0x12c>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	079b      	lsls	r3, r3, #30
 80081a6:	d413      	bmi.n	80081d0 <_printf_i+0x204>
 80081a8:	68e0      	ldr	r0, [r4, #12]
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	4298      	cmp	r0, r3
 80081ae:	bfb8      	it	lt
 80081b0:	4618      	movlt	r0, r3
 80081b2:	e7a3      	b.n	80080fc <_printf_i+0x130>
 80081b4:	2301      	movs	r3, #1
 80081b6:	464a      	mov	r2, r9
 80081b8:	4639      	mov	r1, r7
 80081ba:	4630      	mov	r0, r6
 80081bc:	47c0      	blx	r8
 80081be:	3001      	adds	r0, #1
 80081c0:	d09a      	beq.n	80080f8 <_printf_i+0x12c>
 80081c2:	3501      	adds	r5, #1
 80081c4:	68e3      	ldr	r3, [r4, #12]
 80081c6:	9a03      	ldr	r2, [sp, #12]
 80081c8:	1a9b      	subs	r3, r3, r2
 80081ca:	42ab      	cmp	r3, r5
 80081cc:	dcf2      	bgt.n	80081b4 <_printf_i+0x1e8>
 80081ce:	e7eb      	b.n	80081a8 <_printf_i+0x1dc>
 80081d0:	2500      	movs	r5, #0
 80081d2:	f104 0919 	add.w	r9, r4, #25
 80081d6:	e7f5      	b.n	80081c4 <_printf_i+0x1f8>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1ac      	bne.n	8008136 <_printf_i+0x16a>
 80081dc:	7803      	ldrb	r3, [r0, #0]
 80081de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081e6:	e76c      	b.n	80080c2 <_printf_i+0xf6>
 80081e8:	080084d9 	.word	0x080084d9
 80081ec:	080084ea 	.word	0x080084ea

080081f0 <memcpy>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	1e43      	subs	r3, r0, #1
 80081f4:	440a      	add	r2, r1
 80081f6:	4291      	cmp	r1, r2
 80081f8:	d100      	bne.n	80081fc <memcpy+0xc>
 80081fa:	bd10      	pop	{r4, pc}
 80081fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008200:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008204:	e7f7      	b.n	80081f6 <memcpy+0x6>

08008206 <memmove>:
 8008206:	4288      	cmp	r0, r1
 8008208:	b510      	push	{r4, lr}
 800820a:	eb01 0302 	add.w	r3, r1, r2
 800820e:	d807      	bhi.n	8008220 <memmove+0x1a>
 8008210:	1e42      	subs	r2, r0, #1
 8008212:	4299      	cmp	r1, r3
 8008214:	d00a      	beq.n	800822c <memmove+0x26>
 8008216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800821a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800821e:	e7f8      	b.n	8008212 <memmove+0xc>
 8008220:	4283      	cmp	r3, r0
 8008222:	d9f5      	bls.n	8008210 <memmove+0xa>
 8008224:	1881      	adds	r1, r0, r2
 8008226:	1ad2      	subs	r2, r2, r3
 8008228:	42d3      	cmn	r3, r2
 800822a:	d100      	bne.n	800822e <memmove+0x28>
 800822c:	bd10      	pop	{r4, pc}
 800822e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008232:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008236:	e7f7      	b.n	8008228 <memmove+0x22>

08008238 <_free_r>:
 8008238:	b538      	push	{r3, r4, r5, lr}
 800823a:	4605      	mov	r5, r0
 800823c:	2900      	cmp	r1, #0
 800823e:	d045      	beq.n	80082cc <_free_r+0x94>
 8008240:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008244:	1f0c      	subs	r4, r1, #4
 8008246:	2b00      	cmp	r3, #0
 8008248:	bfb8      	it	lt
 800824a:	18e4      	addlt	r4, r4, r3
 800824c:	f000 f8d2 	bl	80083f4 <__malloc_lock>
 8008250:	4a1f      	ldr	r2, [pc, #124]	; (80082d0 <_free_r+0x98>)
 8008252:	6813      	ldr	r3, [r2, #0]
 8008254:	4610      	mov	r0, r2
 8008256:	b933      	cbnz	r3, 8008266 <_free_r+0x2e>
 8008258:	6063      	str	r3, [r4, #4]
 800825a:	6014      	str	r4, [r2, #0]
 800825c:	4628      	mov	r0, r5
 800825e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008262:	f000 b8c8 	b.w	80083f6 <__malloc_unlock>
 8008266:	42a3      	cmp	r3, r4
 8008268:	d90c      	bls.n	8008284 <_free_r+0x4c>
 800826a:	6821      	ldr	r1, [r4, #0]
 800826c:	1862      	adds	r2, r4, r1
 800826e:	4293      	cmp	r3, r2
 8008270:	bf04      	itt	eq
 8008272:	681a      	ldreq	r2, [r3, #0]
 8008274:	685b      	ldreq	r3, [r3, #4]
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	bf04      	itt	eq
 800827a:	1852      	addeq	r2, r2, r1
 800827c:	6022      	streq	r2, [r4, #0]
 800827e:	6004      	str	r4, [r0, #0]
 8008280:	e7ec      	b.n	800825c <_free_r+0x24>
 8008282:	4613      	mov	r3, r2
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	b10a      	cbz	r2, 800828c <_free_r+0x54>
 8008288:	42a2      	cmp	r2, r4
 800828a:	d9fa      	bls.n	8008282 <_free_r+0x4a>
 800828c:	6819      	ldr	r1, [r3, #0]
 800828e:	1858      	adds	r0, r3, r1
 8008290:	42a0      	cmp	r0, r4
 8008292:	d10b      	bne.n	80082ac <_free_r+0x74>
 8008294:	6820      	ldr	r0, [r4, #0]
 8008296:	4401      	add	r1, r0
 8008298:	1858      	adds	r0, r3, r1
 800829a:	4282      	cmp	r2, r0
 800829c:	6019      	str	r1, [r3, #0]
 800829e:	d1dd      	bne.n	800825c <_free_r+0x24>
 80082a0:	6810      	ldr	r0, [r2, #0]
 80082a2:	6852      	ldr	r2, [r2, #4]
 80082a4:	605a      	str	r2, [r3, #4]
 80082a6:	4401      	add	r1, r0
 80082a8:	6019      	str	r1, [r3, #0]
 80082aa:	e7d7      	b.n	800825c <_free_r+0x24>
 80082ac:	d902      	bls.n	80082b4 <_free_r+0x7c>
 80082ae:	230c      	movs	r3, #12
 80082b0:	602b      	str	r3, [r5, #0]
 80082b2:	e7d3      	b.n	800825c <_free_r+0x24>
 80082b4:	6820      	ldr	r0, [r4, #0]
 80082b6:	1821      	adds	r1, r4, r0
 80082b8:	428a      	cmp	r2, r1
 80082ba:	bf04      	itt	eq
 80082bc:	6811      	ldreq	r1, [r2, #0]
 80082be:	6852      	ldreq	r2, [r2, #4]
 80082c0:	6062      	str	r2, [r4, #4]
 80082c2:	bf04      	itt	eq
 80082c4:	1809      	addeq	r1, r1, r0
 80082c6:	6021      	streq	r1, [r4, #0]
 80082c8:	605c      	str	r4, [r3, #4]
 80082ca:	e7c7      	b.n	800825c <_free_r+0x24>
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	bf00      	nop
 80082d0:	200000a8 	.word	0x200000a8

080082d4 <_malloc_r>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	1ccd      	adds	r5, r1, #3
 80082d8:	f025 0503 	bic.w	r5, r5, #3
 80082dc:	3508      	adds	r5, #8
 80082de:	2d0c      	cmp	r5, #12
 80082e0:	bf38      	it	cc
 80082e2:	250c      	movcc	r5, #12
 80082e4:	2d00      	cmp	r5, #0
 80082e6:	4606      	mov	r6, r0
 80082e8:	db01      	blt.n	80082ee <_malloc_r+0x1a>
 80082ea:	42a9      	cmp	r1, r5
 80082ec:	d903      	bls.n	80082f6 <_malloc_r+0x22>
 80082ee:	230c      	movs	r3, #12
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	2000      	movs	r0, #0
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	f000 f87d 	bl	80083f4 <__malloc_lock>
 80082fa:	4a21      	ldr	r2, [pc, #132]	; (8008380 <_malloc_r+0xac>)
 80082fc:	6814      	ldr	r4, [r2, #0]
 80082fe:	4621      	mov	r1, r4
 8008300:	b991      	cbnz	r1, 8008328 <_malloc_r+0x54>
 8008302:	4c20      	ldr	r4, [pc, #128]	; (8008384 <_malloc_r+0xb0>)
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	b91b      	cbnz	r3, 8008310 <_malloc_r+0x3c>
 8008308:	4630      	mov	r0, r6
 800830a:	f000 f863 	bl	80083d4 <_sbrk_r>
 800830e:	6020      	str	r0, [r4, #0]
 8008310:	4629      	mov	r1, r5
 8008312:	4630      	mov	r0, r6
 8008314:	f000 f85e 	bl	80083d4 <_sbrk_r>
 8008318:	1c43      	adds	r3, r0, #1
 800831a:	d124      	bne.n	8008366 <_malloc_r+0x92>
 800831c:	230c      	movs	r3, #12
 800831e:	6033      	str	r3, [r6, #0]
 8008320:	4630      	mov	r0, r6
 8008322:	f000 f868 	bl	80083f6 <__malloc_unlock>
 8008326:	e7e4      	b.n	80082f2 <_malloc_r+0x1e>
 8008328:	680b      	ldr	r3, [r1, #0]
 800832a:	1b5b      	subs	r3, r3, r5
 800832c:	d418      	bmi.n	8008360 <_malloc_r+0x8c>
 800832e:	2b0b      	cmp	r3, #11
 8008330:	d90f      	bls.n	8008352 <_malloc_r+0x7e>
 8008332:	600b      	str	r3, [r1, #0]
 8008334:	50cd      	str	r5, [r1, r3]
 8008336:	18cc      	adds	r4, r1, r3
 8008338:	4630      	mov	r0, r6
 800833a:	f000 f85c 	bl	80083f6 <__malloc_unlock>
 800833e:	f104 000b 	add.w	r0, r4, #11
 8008342:	1d23      	adds	r3, r4, #4
 8008344:	f020 0007 	bic.w	r0, r0, #7
 8008348:	1ac3      	subs	r3, r0, r3
 800834a:	d0d3      	beq.n	80082f4 <_malloc_r+0x20>
 800834c:	425a      	negs	r2, r3
 800834e:	50e2      	str	r2, [r4, r3]
 8008350:	e7d0      	b.n	80082f4 <_malloc_r+0x20>
 8008352:	428c      	cmp	r4, r1
 8008354:	684b      	ldr	r3, [r1, #4]
 8008356:	bf16      	itet	ne
 8008358:	6063      	strne	r3, [r4, #4]
 800835a:	6013      	streq	r3, [r2, #0]
 800835c:	460c      	movne	r4, r1
 800835e:	e7eb      	b.n	8008338 <_malloc_r+0x64>
 8008360:	460c      	mov	r4, r1
 8008362:	6849      	ldr	r1, [r1, #4]
 8008364:	e7cc      	b.n	8008300 <_malloc_r+0x2c>
 8008366:	1cc4      	adds	r4, r0, #3
 8008368:	f024 0403 	bic.w	r4, r4, #3
 800836c:	42a0      	cmp	r0, r4
 800836e:	d005      	beq.n	800837c <_malloc_r+0xa8>
 8008370:	1a21      	subs	r1, r4, r0
 8008372:	4630      	mov	r0, r6
 8008374:	f000 f82e 	bl	80083d4 <_sbrk_r>
 8008378:	3001      	adds	r0, #1
 800837a:	d0cf      	beq.n	800831c <_malloc_r+0x48>
 800837c:	6025      	str	r5, [r4, #0]
 800837e:	e7db      	b.n	8008338 <_malloc_r+0x64>
 8008380:	200000a8 	.word	0x200000a8
 8008384:	200000ac 	.word	0x200000ac

08008388 <_realloc_r>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	4607      	mov	r7, r0
 800838c:	4614      	mov	r4, r2
 800838e:	460e      	mov	r6, r1
 8008390:	b921      	cbnz	r1, 800839c <_realloc_r+0x14>
 8008392:	4611      	mov	r1, r2
 8008394:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008398:	f7ff bf9c 	b.w	80082d4 <_malloc_r>
 800839c:	b922      	cbnz	r2, 80083a8 <_realloc_r+0x20>
 800839e:	f7ff ff4b 	bl	8008238 <_free_r>
 80083a2:	4625      	mov	r5, r4
 80083a4:	4628      	mov	r0, r5
 80083a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a8:	f000 f826 	bl	80083f8 <_malloc_usable_size_r>
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	d20f      	bcs.n	80083d0 <_realloc_r+0x48>
 80083b0:	4621      	mov	r1, r4
 80083b2:	4638      	mov	r0, r7
 80083b4:	f7ff ff8e 	bl	80082d4 <_malloc_r>
 80083b8:	4605      	mov	r5, r0
 80083ba:	2800      	cmp	r0, #0
 80083bc:	d0f2      	beq.n	80083a4 <_realloc_r+0x1c>
 80083be:	4631      	mov	r1, r6
 80083c0:	4622      	mov	r2, r4
 80083c2:	f7ff ff15 	bl	80081f0 <memcpy>
 80083c6:	4631      	mov	r1, r6
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff ff35 	bl	8008238 <_free_r>
 80083ce:	e7e9      	b.n	80083a4 <_realloc_r+0x1c>
 80083d0:	4635      	mov	r5, r6
 80083d2:	e7e7      	b.n	80083a4 <_realloc_r+0x1c>

080083d4 <_sbrk_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4c06      	ldr	r4, [pc, #24]	; (80083f0 <_sbrk_r+0x1c>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4605      	mov	r5, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	f7f9 faa0 	bl	8001924 <_sbrk>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_sbrk_r+0x1a>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_sbrk_r+0x1a>
 80083ec:	602b      	str	r3, [r5, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	200004dc 	.word	0x200004dc

080083f4 <__malloc_lock>:
 80083f4:	4770      	bx	lr

080083f6 <__malloc_unlock>:
 80083f6:	4770      	bx	lr

080083f8 <_malloc_usable_size_r>:
 80083f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fc:	1f18      	subs	r0, r3, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfbc      	itt	lt
 8008402:	580b      	ldrlt	r3, [r1, r0]
 8008404:	18c0      	addlt	r0, r0, r3
 8008406:	4770      	bx	lr

08008408 <_init>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr

08008414 <_fini>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr
